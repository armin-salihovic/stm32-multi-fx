
thesis-2-nucleo-h7a3zi-q.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a44c  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800a700  0800a700  0001a700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a880  0800a880  0001a880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a888  0800a888  0001a888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a88c  0800a88c  0001a88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800a890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006b4  24000074  0800a904  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000728  0800a904  00020728  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ec2e  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003b4c  00000000  00000000  0003ecd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001740  00000000  00000000  00042820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001598  00000000  00000000  00043f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000348f2  00000000  00000000  000454f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020eee  00000000  00000000  00079dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001556d0  00000000  00000000  0009acd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f03a8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006540  00000000  00000000  001f03f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a6e4 	.word	0x0800a6e4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800a6e4 	.word	0x0800a6e4

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b974 	b.w	8000968 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	4604      	mov	r4, r0
 80006a0:	468e      	mov	lr, r1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d14d      	bne.n	8000742 <__udivmoddi4+0xaa>
 80006a6:	428a      	cmp	r2, r1
 80006a8:	4694      	mov	ip, r2
 80006aa:	d969      	bls.n	8000780 <__udivmoddi4+0xe8>
 80006ac:	fab2 f282 	clz	r2, r2
 80006b0:	b152      	cbz	r2, 80006c8 <__udivmoddi4+0x30>
 80006b2:	fa01 f302 	lsl.w	r3, r1, r2
 80006b6:	f1c2 0120 	rsb	r1, r2, #32
 80006ba:	fa20 f101 	lsr.w	r1, r0, r1
 80006be:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c2:	ea41 0e03 	orr.w	lr, r1, r3
 80006c6:	4094      	lsls	r4, r2
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	0c21      	lsrs	r1, r4, #16
 80006ce:	fbbe f6f8 	udiv	r6, lr, r8
 80006d2:	fa1f f78c 	uxth.w	r7, ip
 80006d6:	fb08 e316 	mls	r3, r8, r6, lr
 80006da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006de:	fb06 f107 	mul.w	r1, r6, r7
 80006e2:	4299      	cmp	r1, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x64>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ee:	f080 811f 	bcs.w	8000930 <__udivmoddi4+0x298>
 80006f2:	4299      	cmp	r1, r3
 80006f4:	f240 811c 	bls.w	8000930 <__udivmoddi4+0x298>
 80006f8:	3e02      	subs	r6, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a5b      	subs	r3, r3, r1
 80006fe:	b2a4      	uxth	r4, r4
 8000700:	fbb3 f0f8 	udiv	r0, r3, r8
 8000704:	fb08 3310 	mls	r3, r8, r0, r3
 8000708:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800070c:	fb00 f707 	mul.w	r7, r0, r7
 8000710:	42a7      	cmp	r7, r4
 8000712:	d90a      	bls.n	800072a <__udivmoddi4+0x92>
 8000714:	eb1c 0404 	adds.w	r4, ip, r4
 8000718:	f100 33ff 	add.w	r3, r0, #4294967295
 800071c:	f080 810a 	bcs.w	8000934 <__udivmoddi4+0x29c>
 8000720:	42a7      	cmp	r7, r4
 8000722:	f240 8107 	bls.w	8000934 <__udivmoddi4+0x29c>
 8000726:	4464      	add	r4, ip
 8000728:	3802      	subs	r0, #2
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	1be4      	subs	r4, r4, r7
 8000730:	2600      	movs	r6, #0
 8000732:	b11d      	cbz	r5, 800073c <__udivmoddi4+0xa4>
 8000734:	40d4      	lsrs	r4, r2
 8000736:	2300      	movs	r3, #0
 8000738:	e9c5 4300 	strd	r4, r3, [r5]
 800073c:	4631      	mov	r1, r6
 800073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000742:	428b      	cmp	r3, r1
 8000744:	d909      	bls.n	800075a <__udivmoddi4+0xc2>
 8000746:	2d00      	cmp	r5, #0
 8000748:	f000 80ef 	beq.w	800092a <__udivmoddi4+0x292>
 800074c:	2600      	movs	r6, #0
 800074e:	e9c5 0100 	strd	r0, r1, [r5]
 8000752:	4630      	mov	r0, r6
 8000754:	4631      	mov	r1, r6
 8000756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075a:	fab3 f683 	clz	r6, r3
 800075e:	2e00      	cmp	r6, #0
 8000760:	d14a      	bne.n	80007f8 <__udivmoddi4+0x160>
 8000762:	428b      	cmp	r3, r1
 8000764:	d302      	bcc.n	800076c <__udivmoddi4+0xd4>
 8000766:	4282      	cmp	r2, r0
 8000768:	f200 80f9 	bhi.w	800095e <__udivmoddi4+0x2c6>
 800076c:	1a84      	subs	r4, r0, r2
 800076e:	eb61 0303 	sbc.w	r3, r1, r3
 8000772:	2001      	movs	r0, #1
 8000774:	469e      	mov	lr, r3
 8000776:	2d00      	cmp	r5, #0
 8000778:	d0e0      	beq.n	800073c <__udivmoddi4+0xa4>
 800077a:	e9c5 4e00 	strd	r4, lr, [r5]
 800077e:	e7dd      	b.n	800073c <__udivmoddi4+0xa4>
 8000780:	b902      	cbnz	r2, 8000784 <__udivmoddi4+0xec>
 8000782:	deff      	udf	#255	; 0xff
 8000784:	fab2 f282 	clz	r2, r2
 8000788:	2a00      	cmp	r2, #0
 800078a:	f040 8092 	bne.w	80008b2 <__udivmoddi4+0x21a>
 800078e:	eba1 010c 	sub.w	r1, r1, ip
 8000792:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000796:	fa1f fe8c 	uxth.w	lr, ip
 800079a:	2601      	movs	r6, #1
 800079c:	0c20      	lsrs	r0, r4, #16
 800079e:	fbb1 f3f7 	udiv	r3, r1, r7
 80007a2:	fb07 1113 	mls	r1, r7, r3, r1
 80007a6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007aa:	fb0e f003 	mul.w	r0, lr, r3
 80007ae:	4288      	cmp	r0, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0x12c>
 80007b2:	eb1c 0101 	adds.w	r1, ip, r1
 80007b6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x12a>
 80007bc:	4288      	cmp	r0, r1
 80007be:	f200 80cb 	bhi.w	8000958 <__udivmoddi4+0x2c0>
 80007c2:	4643      	mov	r3, r8
 80007c4:	1a09      	subs	r1, r1, r0
 80007c6:	b2a4      	uxth	r4, r4
 80007c8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007cc:	fb07 1110 	mls	r1, r7, r0, r1
 80007d0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007d4:	fb0e fe00 	mul.w	lr, lr, r0
 80007d8:	45a6      	cmp	lr, r4
 80007da:	d908      	bls.n	80007ee <__udivmoddi4+0x156>
 80007dc:	eb1c 0404 	adds.w	r4, ip, r4
 80007e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007e4:	d202      	bcs.n	80007ec <__udivmoddi4+0x154>
 80007e6:	45a6      	cmp	lr, r4
 80007e8:	f200 80bb 	bhi.w	8000962 <__udivmoddi4+0x2ca>
 80007ec:	4608      	mov	r0, r1
 80007ee:	eba4 040e 	sub.w	r4, r4, lr
 80007f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007f6:	e79c      	b.n	8000732 <__udivmoddi4+0x9a>
 80007f8:	f1c6 0720 	rsb	r7, r6, #32
 80007fc:	40b3      	lsls	r3, r6
 80007fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000802:	ea4c 0c03 	orr.w	ip, ip, r3
 8000806:	fa20 f407 	lsr.w	r4, r0, r7
 800080a:	fa01 f306 	lsl.w	r3, r1, r6
 800080e:	431c      	orrs	r4, r3
 8000810:	40f9      	lsrs	r1, r7
 8000812:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000816:	fa00 f306 	lsl.w	r3, r0, r6
 800081a:	fbb1 f8f9 	udiv	r8, r1, r9
 800081e:	0c20      	lsrs	r0, r4, #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fb09 1118 	mls	r1, r9, r8, r1
 8000828:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800082c:	fb08 f00e 	mul.w	r0, r8, lr
 8000830:	4288      	cmp	r0, r1
 8000832:	fa02 f206 	lsl.w	r2, r2, r6
 8000836:	d90b      	bls.n	8000850 <__udivmoddi4+0x1b8>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000840:	f080 8088 	bcs.w	8000954 <__udivmoddi4+0x2bc>
 8000844:	4288      	cmp	r0, r1
 8000846:	f240 8085 	bls.w	8000954 <__udivmoddi4+0x2bc>
 800084a:	f1a8 0802 	sub.w	r8, r8, #2
 800084e:	4461      	add	r1, ip
 8000850:	1a09      	subs	r1, r1, r0
 8000852:	b2a4      	uxth	r4, r4
 8000854:	fbb1 f0f9 	udiv	r0, r1, r9
 8000858:	fb09 1110 	mls	r1, r9, r0, r1
 800085c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000860:	fb00 fe0e 	mul.w	lr, r0, lr
 8000864:	458e      	cmp	lr, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x1e2>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000870:	d26c      	bcs.n	800094c <__udivmoddi4+0x2b4>
 8000872:	458e      	cmp	lr, r1
 8000874:	d96a      	bls.n	800094c <__udivmoddi4+0x2b4>
 8000876:	3802      	subs	r0, #2
 8000878:	4461      	add	r1, ip
 800087a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800087e:	fba0 9402 	umull	r9, r4, r0, r2
 8000882:	eba1 010e 	sub.w	r1, r1, lr
 8000886:	42a1      	cmp	r1, r4
 8000888:	46c8      	mov	r8, r9
 800088a:	46a6      	mov	lr, r4
 800088c:	d356      	bcc.n	800093c <__udivmoddi4+0x2a4>
 800088e:	d053      	beq.n	8000938 <__udivmoddi4+0x2a0>
 8000890:	b15d      	cbz	r5, 80008aa <__udivmoddi4+0x212>
 8000892:	ebb3 0208 	subs.w	r2, r3, r8
 8000896:	eb61 010e 	sbc.w	r1, r1, lr
 800089a:	fa01 f707 	lsl.w	r7, r1, r7
 800089e:	fa22 f306 	lsr.w	r3, r2, r6
 80008a2:	40f1      	lsrs	r1, r6
 80008a4:	431f      	orrs	r7, r3
 80008a6:	e9c5 7100 	strd	r7, r1, [r5]
 80008aa:	2600      	movs	r6, #0
 80008ac:	4631      	mov	r1, r6
 80008ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b2:	f1c2 0320 	rsb	r3, r2, #32
 80008b6:	40d8      	lsrs	r0, r3
 80008b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008bc:	fa21 f303 	lsr.w	r3, r1, r3
 80008c0:	4091      	lsls	r1, r2
 80008c2:	4301      	orrs	r1, r0
 80008c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c8:	fa1f fe8c 	uxth.w	lr, ip
 80008cc:	fbb3 f0f7 	udiv	r0, r3, r7
 80008d0:	fb07 3610 	mls	r6, r7, r0, r3
 80008d4:	0c0b      	lsrs	r3, r1, #16
 80008d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008da:	fb00 f60e 	mul.w	r6, r0, lr
 80008de:	429e      	cmp	r6, r3
 80008e0:	fa04 f402 	lsl.w	r4, r4, r2
 80008e4:	d908      	bls.n	80008f8 <__udivmoddi4+0x260>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ee:	d22f      	bcs.n	8000950 <__udivmoddi4+0x2b8>
 80008f0:	429e      	cmp	r6, r3
 80008f2:	d92d      	bls.n	8000950 <__udivmoddi4+0x2b8>
 80008f4:	3802      	subs	r0, #2
 80008f6:	4463      	add	r3, ip
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	b289      	uxth	r1, r1
 80008fc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000900:	fb07 3316 	mls	r3, r7, r6, r3
 8000904:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000908:	fb06 f30e 	mul.w	r3, r6, lr
 800090c:	428b      	cmp	r3, r1
 800090e:	d908      	bls.n	8000922 <__udivmoddi4+0x28a>
 8000910:	eb1c 0101 	adds.w	r1, ip, r1
 8000914:	f106 38ff 	add.w	r8, r6, #4294967295
 8000918:	d216      	bcs.n	8000948 <__udivmoddi4+0x2b0>
 800091a:	428b      	cmp	r3, r1
 800091c:	d914      	bls.n	8000948 <__udivmoddi4+0x2b0>
 800091e:	3e02      	subs	r6, #2
 8000920:	4461      	add	r1, ip
 8000922:	1ac9      	subs	r1, r1, r3
 8000924:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000928:	e738      	b.n	800079c <__udivmoddi4+0x104>
 800092a:	462e      	mov	r6, r5
 800092c:	4628      	mov	r0, r5
 800092e:	e705      	b.n	800073c <__udivmoddi4+0xa4>
 8000930:	4606      	mov	r6, r0
 8000932:	e6e3      	b.n	80006fc <__udivmoddi4+0x64>
 8000934:	4618      	mov	r0, r3
 8000936:	e6f8      	b.n	800072a <__udivmoddi4+0x92>
 8000938:	454b      	cmp	r3, r9
 800093a:	d2a9      	bcs.n	8000890 <__udivmoddi4+0x1f8>
 800093c:	ebb9 0802 	subs.w	r8, r9, r2
 8000940:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000944:	3801      	subs	r0, #1
 8000946:	e7a3      	b.n	8000890 <__udivmoddi4+0x1f8>
 8000948:	4646      	mov	r6, r8
 800094a:	e7ea      	b.n	8000922 <__udivmoddi4+0x28a>
 800094c:	4620      	mov	r0, r4
 800094e:	e794      	b.n	800087a <__udivmoddi4+0x1e2>
 8000950:	4640      	mov	r0, r8
 8000952:	e7d1      	b.n	80008f8 <__udivmoddi4+0x260>
 8000954:	46d0      	mov	r8, sl
 8000956:	e77b      	b.n	8000850 <__udivmoddi4+0x1b8>
 8000958:	3b02      	subs	r3, #2
 800095a:	4461      	add	r1, ip
 800095c:	e732      	b.n	80007c4 <__udivmoddi4+0x12c>
 800095e:	4630      	mov	r0, r6
 8000960:	e709      	b.n	8000776 <__udivmoddi4+0xde>
 8000962:	4464      	add	r4, ip
 8000964:	3802      	subs	r0, #2
 8000966:	e742      	b.n	80007ee <__udivmoddi4+0x156>

08000968 <__aeabi_idiv0>:
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <Delay_Init>:
#define SAMPLE_RATE 96000
#define PI 3.14159265359

DelayEffect delay;

void Delay_Init() {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	delay.delayBufferLength = 2*SAMPLE_RATE;
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <Delay_Init+0x90>)
 8000972:	4a23      	ldr	r2, [pc, #140]	; (8000a00 <Delay_Init+0x94>)
 8000974:	611a      	str	r2, [r3, #16]
	delay.delayLength = 0.75;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <Delay_Init+0x90>)
 8000978:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800097c:	60da      	str	r2, [r3, #12]
	delay.delayWritePtr = 0;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <Delay_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
	delay.delayReadPtr = (int)(delay.delayWritePtr - (delay.delayLength * SAMPLE_RATE) + delay.delayBufferLength) % delay.delayBufferLength;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <Delay_Init+0x90>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	ee07 3a90 	vmov	s15, r3
 800098c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <Delay_Init+0x90>)
 8000992:	edd3 7a03 	vldr	s15, [r3, #12]
 8000996:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000a04 <Delay_Init+0x98>
 800099a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800099e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <Delay_Init+0x90>)
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	ee07 3a90 	vmov	s15, r3
 80009aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009b6:	ee17 1a90 	vmov	r1, s15
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <Delay_Init+0x90>)
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	fb91 f2f3 	sdiv	r2, r1, r3
 80009c2:	fb02 f303 	mul.w	r3, r2, r3
 80009c6:	1acb      	subs	r3, r1, r3
 80009c8:	4a0c      	ldr	r2, [pc, #48]	; (80009fc <Delay_Init+0x90>)
 80009ca:	6093      	str	r3, [r2, #8]
	delay.delayData = (uint16_t*) malloc(delay.delayBufferLength * sizeof(uint16_t));
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <Delay_Init+0x90>)
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	4618      	mov	r0, r3
 80009d4:	f009 fce8 	bl	800a3a8 <malloc>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <Delay_Init+0x90>)
 80009de:	601a      	str	r2, [r3, #0]
	delay.feedback = 0.5;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <Delay_Init+0x90>)
 80009e2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80009e6:	615a      	str	r2, [r3, #20]
	delay.dryMix = 1;
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <Delay_Init+0x90>)
 80009ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80009ee:	619a      	str	r2, [r3, #24]
	delay.wetMix = 0.85;
 80009f0:	4b02      	ldr	r3, [pc, #8]	; (80009fc <Delay_Init+0x90>)
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <Delay_Init+0x9c>)
 80009f4:	61da      	str	r2, [r3, #28]
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	24000090 	.word	0x24000090
 8000a00:	0002ee00 	.word	0x0002ee00
 8000a04:	47bb8000 	.word	0x47bb8000
 8000a08:	3f59999a 	.word	0x3f59999a
 8000a0c:	00000000 	.word	0x00000000

08000a10 <lfo>:
#define PI 3.14159265359

TremoloEffect tremolo;

float lfo(float phase, int waveform)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a1a:	6038      	str	r0, [r7, #0]
	switch(waveform) {
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d04a      	beq.n	8000ab8 <lfo+0xa8>
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	f300 8082 	bgt.w	8000b2e <lfo+0x11e>
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d003      	beq.n	8000a38 <lfo+0x28>
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d031      	beq.n	8000a9a <lfo+0x8a>
 8000a36:	e07a      	b.n	8000b2e <lfo+0x11e>
		case Triangle:
			if(phase < 0.25f)
 8000a38:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a3c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a48:	d508      	bpl.n	8000a5c <lfo+0x4c>
				return 0.5f + 2.0f*phase;
 8000a4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000a56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a5a:	e080      	b.n	8000b5e <lfo+0x14e>
			else if(phase < 0.75f)
 8000a5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a60:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8000a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a6c:	d50c      	bpl.n	8000a88 <lfo+0x78>
				return 1.0f - 2.0f*(phase - 0.25f);
 8000a6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a72:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000a76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a86:	e06a      	b.n	8000b5e <lfo+0x14e>
			else
				return 2.0f*(phase-0.75f);
 8000a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a8c:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8000a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a94:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a98:	e061      	b.n	8000b5e <lfo+0x14e>
		case Square:
			if(phase < 0.5f)
 8000a9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aaa:	d502      	bpl.n	8000ab2 <lfo+0xa2>
				return 1.0f;
 8000aac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000ab0:	e055      	b.n	8000b5e <lfo+0x14e>
			else
				return 0.0f;
 8000ab2:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8000b70 <lfo+0x160>
 8000ab6:	e052      	b.n	8000b5e <lfo+0x14e>
		case SquareSlopedEdges:
			if(phase < 0.48f)
 8000ab8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000abc:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000b74 <lfo+0x164>
 8000ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac8:	d502      	bpl.n	8000ad0 <lfo+0xc0>
				return 1.0f;
 8000aca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000ace:	e046      	b.n	8000b5e <lfo+0x14e>
			else if(phase < 0.5f)
 8000ad0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ad4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae0:	d50e      	bpl.n	8000b00 <lfo+0xf0>
				return 1.0f - 50.0f*(phase - 0.48f);
 8000ae2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ae6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000b74 <lfo+0x164>
 8000aea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000aee:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000b78 <lfo+0x168>
 8000af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000afe:	e02e      	b.n	8000b5e <lfo+0x14e>
			else if(phase < 0.98f)
 8000b00:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b04:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000b7c <lfo+0x16c>
 8000b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b10:	d502      	bpl.n	8000b18 <lfo+0x108>
				return 0.0f;
 8000b12:	eddf 7a17 	vldr	s15, [pc, #92]	; 8000b70 <lfo+0x160>
 8000b16:	e022      	b.n	8000b5e <lfo+0x14e>
			else
				return 50.0f*(phase - 0.98f);
 8000b18:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b1c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000b7c <lfo+0x16c>
 8000b20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b24:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000b78 <lfo+0x168>
 8000b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2c:	e017      	b.n	8000b5e <lfo+0x14e>
		case Sine:
		default:
			return 0.5f + 0.5f*sinf(2.0 * PI * phase);
 8000b2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b36:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000b68 <lfo+0x158>
 8000b3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b42:	eeb0 0a67 	vmov.f32	s0, s15
 8000b46:	f009 fd1b 	bl	800a580 <sinf>
 8000b4a:	eef0 7a40 	vmov.f32	s15, s0
 8000b4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000b5a:	ee77 7a87 	vadd.f32	s15, s15, s14
		}
}
 8000b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	54442eea 	.word	0x54442eea
 8000b6c:	401921fb 	.word	0x401921fb
 8000b70:	00000000 	.word	0x00000000
 8000b74:	3ef5c28f 	.word	0x3ef5c28f
 8000b78:	42480000 	.word	0x42480000
 8000b7c:	3f7ae148 	.word	0x3f7ae148

08000b80 <Tremolo_Init>:

void Tremolo_Init() {
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	tremolo.phase = 0;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <Tremolo_Init+0x2c>)
 8000b86:	f04f 0200 	mov.w	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
	tremolo.inverseSampleRate = 1.0f/SAMPLE_RATE;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <Tremolo_Init+0x2c>)
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <Tremolo_Init+0x30>)
 8000b90:	605a      	str	r2, [r3, #4]
	tremolo.depth = 0.75;
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <Tremolo_Init+0x2c>)
 8000b94:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8000b98:	609a      	str	r2, [r3, #8]
	tremolo.frequency = 1.25;
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <Tremolo_Init+0x2c>)
 8000b9c:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <Tremolo_Init+0x34>)
 8000b9e:	60da      	str	r2, [r3, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	240000b0 	.word	0x240000b0
 8000bb0:	372ec33e 	.word	0x372ec33e
 8000bb4:	3fa00000 	.word	0x3fa00000

08000bb8 <calculateTremolo>:

uint16_t calculateTremolo(uint16_t in) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	ed2d 8b02 	vpush	{d8}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
	uint16_t out;
	out = in * (1.0f - tremolo.depth * lfo(tremolo.phase, Sine));
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	ee07 3a90 	vmov	s15, r3
 8000bcc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <calculateTremolo+0xa4>)
 8000bd2:	edd3 8a02 	vldr	s17, [r3, #8]
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <calculateTremolo+0xa4>)
 8000bd8:	edd3 7a00 	vldr	s15, [r3]
 8000bdc:	2003      	movs	r0, #3
 8000bde:	eeb0 0a67 	vmov.f32	s0, s15
 8000be2:	f7ff ff15 	bl	8000a10 <lfo>
 8000be6:	eef0 7a40 	vmov.f32	s15, s0
 8000bea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000bee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bf6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bfe:	ee17 3a90 	vmov	r3, s15
 8000c02:	81fb      	strh	r3, [r7, #14]

	tremolo.phase += tremolo.frequency*tremolo.inverseSampleRate;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <calculateTremolo+0xa4>)
 8000c06:	ed93 7a00 	vldr	s14, [r3]
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <calculateTremolo+0xa4>)
 8000c0c:	edd3 6a03 	vldr	s13, [r3, #12]
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <calculateTremolo+0xa4>)
 8000c12:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <calculateTremolo+0xa4>)
 8000c20:	edc3 7a00 	vstr	s15, [r3]
	if(tremolo.phase >= 1.0)
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <calculateTremolo+0xa4>)
 8000c26:	edd3 7a00 	vldr	s15, [r3]
 8000c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c36:	db09      	blt.n	8000c4c <calculateTremolo+0x94>
		tremolo.phase -= 1.0;
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <calculateTremolo+0xa4>)
 8000c3a:	edd3 7a00 	vldr	s15, [r3]
 8000c3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <calculateTremolo+0xa4>)
 8000c48:	edc3 7a00 	vstr	s15, [r3]

	return out;
 8000c4c:	89fb      	ldrh	r3, [r7, #14]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	ecbd 8b02 	vpop	{d8}
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	240000b0 	.word	0x240000b0

08000c60 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	615a      	str	r2, [r3, #20]
 8000c82:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c84:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000c86:	4a31      	ldr	r2, [pc, #196]	; (8000d4c <MX_ADC1_Init+0xec>)
 8000c88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c90:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000c92:	2208      	movs	r2, #8
 8000c94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c96:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000c9e:	2204      	movs	r2, #4
 8000ca0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ca2:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000cba:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000cbc:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000ccc:	2203      	movs	r2, #3
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ce4:	4818      	ldr	r0, [pc, #96]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000ce6:	f001 f881 	bl	8001dec <HAL_ADC_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000cf0:	f000 fb96 	bl	8001420 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4812      	ldr	r0, [pc, #72]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000d00:	f001 ff74 	bl	8002bec <HAL_ADCEx_MultiModeConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000d0a:	f000 fb89 	bl	8001420 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000d10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d12:	2306      	movs	r3, #6
 8000d14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d1a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d1e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d20:	2304      	movs	r3, #4
 8000d22:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000d32:	f001 fa73 	bl	800221c <HAL_ADC_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000d3c:	f000 fb70 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	; 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	240000c0 	.word	0x240000c0
 8000d4c:	40022000 	.word	0x40022000
 8000d50:	08600004 	.word	0x08600004

08000d54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0b8      	sub	sp, #224	; 0xe0
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	22b8      	movs	r2, #184	; 0xb8
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f009 fb1f 	bl	800a3b8 <memset>
  if(adcHandle->Instance==ADC1)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a43      	ldr	r2, [pc, #268]	; (8000e8c <HAL_ADC_MspInit+0x138>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d17e      	bne.n	8000e82 <HAL_ADC_MspInit+0x12e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000d8e:	2310      	movs	r3, #16
 8000d90:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000d92:	2301      	movs	r3, #1
 8000d94:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000d9e:	23c0      	movs	r3, #192	; 0xc0
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4618      	mov	r0, r3
 8000db6:	f005 febb 	bl	8006b30 <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000dc0:	f000 fb2e 	bl	8001420 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000dc4:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <HAL_ADC_MspInit+0x13c>)
 8000dc6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000dca:	4a31      	ldr	r2, [pc, #196]	; (8000e90 <HAL_ADC_MspInit+0x13c>)
 8000dcc:	f043 0320 	orr.w	r3, r3, #32
 8000dd0:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000dd4:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <HAL_ADC_MspInit+0x13c>)
 8000dd6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000dda:	f003 0320 	and.w	r3, r3, #32
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000de2:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <HAL_ADC_MspInit+0x13c>)
 8000de4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000de8:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <HAL_ADC_MspInit+0x13c>)
 8000dea:	f043 0320 	orr.w	r3, r3, #32
 8000dee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000df2:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <HAL_ADC_MspInit+0x13c>)
 8000df4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000df8:	f003 0320 	and.w	r3, r3, #32
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e18:	4619      	mov	r1, r3
 8000e1a:	481e      	ldr	r0, [pc, #120]	; (8000e94 <HAL_ADC_MspInit+0x140>)
 8000e1c:	f004 fcd4 	bl	80057c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <HAL_ADC_MspInit+0x144>)
 8000e22:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <HAL_ADC_MspInit+0x148>)
 8000e24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <HAL_ADC_MspInit+0x144>)
 8000e28:	2209      	movs	r2, #9
 8000e2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <HAL_ADC_MspInit+0x144>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <HAL_ADC_MspInit+0x144>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_ADC_MspInit+0x144>)
 8000e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_ADC_MspInit+0x144>)
 8000e42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HAL_ADC_MspInit+0x144>)
 8000e4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e4e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_ADC_MspInit+0x144>)
 8000e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e56:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_ADC_MspInit+0x144>)
 8000e5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e5e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_ADC_MspInit+0x144>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e66:	480c      	ldr	r0, [pc, #48]	; (8000e98 <HAL_ADC_MspInit+0x144>)
 8000e68:	f002 fb32 	bl	80034d0 <HAL_DMA_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 8000e72:	f000 fad5 	bl	8001420 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_ADC_MspInit+0x144>)
 8000e7a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_ADC_MspInit+0x144>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e82:	bf00      	nop
 8000e84:	37e0      	adds	r7, #224	; 0xe0
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40022000 	.word	0x40022000
 8000e90:	58024400 	.word	0x58024400
 8000e94:	58021400 	.word	0x58021400
 8000e98:	24000124 	.word	0x24000124
 8000e9c:	40020010 	.word	0x40020010

08000ea0 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2224      	movs	r2, #36	; 0x24
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f009 fa83 	bl	800a3b8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <MX_DAC1_Init+0x5c>)
 8000eb4:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <MX_DAC1_Init+0x60>)
 8000eb6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000eb8:	4810      	ldr	r0, [pc, #64]	; (8000efc <MX_DAC1_Init+0x5c>)
 8000eba:	f002 f842 	bl	8002f42 <HAL_DAC_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ec4:	f000 faac 	bl	8001420 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000ecc:	2316      	movs	r3, #22
 8000ece:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <MX_DAC1_Init+0x5c>)
 8000ee4:	f002 f93a 	bl	800315c <HAL_DAC_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000eee:	f000 fa97 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2400019c 	.word	0x2400019c
 8000f00:	40007400 	.word	0x40007400

08000f04 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a30      	ldr	r2, [pc, #192]	; (8000fe4 <HAL_DAC_MspInit+0xe0>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d15a      	bne.n	8000fdc <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000f26:	4b30      	ldr	r3, [pc, #192]	; (8000fe8 <HAL_DAC_MspInit+0xe4>)
 8000f28:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f2c:	4a2e      	ldr	r2, [pc, #184]	; (8000fe8 <HAL_DAC_MspInit+0xe4>)
 8000f2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f32:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f36:	4b2c      	ldr	r3, [pc, #176]	; (8000fe8 <HAL_DAC_MspInit+0xe4>)
 8000f38:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <HAL_DAC_MspInit+0xe4>)
 8000f46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f4a:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <HAL_DAC_MspInit+0xe4>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f54:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <HAL_DAC_MspInit+0xe4>)
 8000f56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f62:	2310      	movs	r3, #16
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f66:	2303      	movs	r3, #3
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	481d      	ldr	r0, [pc, #116]	; (8000fec <HAL_DAC_MspInit+0xe8>)
 8000f76:	f004 fc27 	bl	80057c8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <HAL_DAC_MspInit+0xec>)
 8000f7c:	4a1d      	ldr	r2, [pc, #116]	; (8000ff4 <HAL_DAC_MspInit+0xf0>)
 8000f7e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <HAL_DAC_MspInit+0xec>)
 8000f82:	2243      	movs	r2, #67	; 0x43
 8000f84:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <HAL_DAC_MspInit+0xec>)
 8000f88:	2240      	movs	r2, #64	; 0x40
 8000f8a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <HAL_DAC_MspInit+0xec>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_DAC_MspInit+0xec>)
 8000f94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f98:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_DAC_MspInit+0xec>)
 8000f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <HAL_DAC_MspInit+0xec>)
 8000fa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fa8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_DAC_MspInit+0xec>)
 8000fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb0:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_DAC_MspInit+0xec>)
 8000fb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fb8:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <HAL_DAC_MspInit+0xec>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000fc0:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <HAL_DAC_MspInit+0xec>)
 8000fc2:	f002 fa85 	bl	80034d0 <HAL_DMA_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8000fcc:	f000 fa28 	bl	8001420 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <HAL_DAC_MspInit+0xec>)
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <HAL_DAC_MspInit+0xec>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3728      	adds	r7, #40	; 0x28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40007400 	.word	0x40007400
 8000fe8:	58024400 	.word	0x58024400
 8000fec:	58020000 	.word	0x58020000
 8000ff0:	240001b0 	.word	0x240001b0
 8000ff4:	40020028 	.word	0x40020028

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffe:	4b11      	ldr	r3, [pc, #68]	; (8001044 <MX_DMA_Init+0x4c>)
 8001000:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001004:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <MX_DMA_Init+0x4c>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <MX_DMA_Init+0x4c>)
 8001010:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	200b      	movs	r0, #11
 8001022:	f001 ff5a 	bl	8002eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001026:	200b      	movs	r0, #11
 8001028:	f001 ff71 	bl	8002f0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	200c      	movs	r0, #12
 8001032:	f001 ff52 	bl	8002eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001036:	200c      	movs	r0, #12
 8001038:	f001 ff69 	bl	8002f0e <HAL_NVIC_EnableIRQ>

}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	58024400 	.word	0x58024400

08001048 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	4b56      	ldr	r3, [pc, #344]	; (80011b8 <MX_GPIO_Init+0x170>)
 8001060:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001064:	4a54      	ldr	r2, [pc, #336]	; (80011b8 <MX_GPIO_Init+0x170>)
 8001066:	f043 0304 	orr.w	r3, r3, #4
 800106a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800106e:	4b52      	ldr	r3, [pc, #328]	; (80011b8 <MX_GPIO_Init+0x170>)
 8001070:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
 800107a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107c:	4b4e      	ldr	r3, [pc, #312]	; (80011b8 <MX_GPIO_Init+0x170>)
 800107e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001082:	4a4d      	ldr	r2, [pc, #308]	; (80011b8 <MX_GPIO_Init+0x170>)
 8001084:	f043 0320 	orr.w	r3, r3, #32
 8001088:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800108c:	4b4a      	ldr	r3, [pc, #296]	; (80011b8 <MX_GPIO_Init+0x170>)
 800108e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001092:	f003 0320 	and.w	r3, r3, #32
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109a:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <MX_GPIO_Init+0x170>)
 800109c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010a0:	4a45      	ldr	r2, [pc, #276]	; (80011b8 <MX_GPIO_Init+0x170>)
 80010a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010aa:	4b43      	ldr	r3, [pc, #268]	; (80011b8 <MX_GPIO_Init+0x170>)
 80010ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b8:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <MX_GPIO_Init+0x170>)
 80010ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010be:	4a3e      	ldr	r2, [pc, #248]	; (80011b8 <MX_GPIO_Init+0x170>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010c8:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <MX_GPIO_Init+0x170>)
 80010ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d6:	4b38      	ldr	r3, [pc, #224]	; (80011b8 <MX_GPIO_Init+0x170>)
 80010d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010dc:	4a36      	ldr	r2, [pc, #216]	; (80011b8 <MX_GPIO_Init+0x170>)
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010e6:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <MX_GPIO_Init+0x170>)
 80010e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f4:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <MX_GPIO_Init+0x170>)
 80010f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010fa:	4a2f      	ldr	r2, [pc, #188]	; (80011b8 <MX_GPIO_Init+0x170>)
 80010fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001100:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001104:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <MX_GPIO_Init+0x170>)
 8001106:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800110a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001118:	4828      	ldr	r0, [pc, #160]	; (80011bc <MX_GPIO_Init+0x174>)
 800111a:	f004 fd05 	bl	8005b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800111e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	4821      	ldr	r0, [pc, #132]	; (80011bc <MX_GPIO_Init+0x174>)
 8001138:	f004 fb46 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001140:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	481b      	ldr	r0, [pc, #108]	; (80011c0 <MX_GPIO_Init+0x178>)
 8001152:	f004 fb39 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	4816      	ldr	r0, [pc, #88]	; (80011c4 <MX_GPIO_Init+0x17c>)
 800116c:	f004 fb2c 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001182:	230a      	movs	r3, #10
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <MX_GPIO_Init+0x17c>)
 800118e:	f004 fb1b 	bl	80057c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001192:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <MX_GPIO_Init+0x17c>)
 80011ac:	f004 fb0c 	bl	80057c8 <HAL_GPIO_Init>

}
 80011b0:	bf00      	nop
 80011b2:	3730      	adds	r7, #48	; 0x30
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	58024400 	.word	0x58024400
 80011bc:	58021400 	.word	0x58021400
 80011c0:	58021800 	.word	0x58021800
 80011c4:	58020000 	.word	0x58020000

080011c8 <HAL_ADC_ConvHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1) {
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d108      	bne.n	80011ea <HAL_ADC_ConvHalfCpltCallback+0x22>
		// when we enter this function, first half of the buffer is complete
		// so we set the input buffer pointer at the beginning
		inBuffPtr = &adcData[0];
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80011da:	4a09      	ldr	r2, [pc, #36]	; (8001200 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80011dc:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[DATA_SIZE];
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80011e0:	4a09      	ldr	r2, [pc, #36]	; (8001208 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 80011e2:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_ADC_ConvHalfCpltCallback+0x44>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
	}

}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	240000c0 	.word	0x240000c0
 80011fc:	24000628 	.word	0x24000628
 8001200:	24000228 	.word	0x24000228
 8001204:	2400062c 	.word	0x2400062c
 8001208:	24000528 	.word	0x24000528
 800120c:	24000630 	.word	0x24000630

08001210 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

	if(hadc == &hadc1) {
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a09      	ldr	r2, [pc, #36]	; (8001240 <HAL_ADC_ConvCpltCallback+0x30>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d108      	bne.n	8001232 <HAL_ADC_ConvCpltCallback+0x22>
		// when we enter this function, first half of the buffer is complete
		// so we set the input buffer pointer at the beginning

		inBuffPtr = &adcData[DATA_SIZE];
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_ADC_ConvCpltCallback+0x34>)
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <HAL_ADC_ConvCpltCallback+0x38>)
 8001224:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[0];
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_ADC_ConvCpltCallback+0x3c>)
 8001228:	4a09      	ldr	r2, [pc, #36]	; (8001250 <HAL_ADC_ConvCpltCallback+0x40>)
 800122a:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_ADC_ConvCpltCallback+0x44>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
	}

}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	240000c0 	.word	0x240000c0
 8001244:	24000628 	.word	0x24000628
 8001248:	24000328 	.word	0x24000328
 800124c:	2400062c 	.word	0x2400062c
 8001250:	24000428 	.word	0x24000428
 8001254:	24000630 	.word	0x24000630

08001258 <processData>:


void processData()
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
	for(int i = 0; i < DATA_SIZE; i++) {
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	e013      	b.n	800128c <processData+0x34>
		outBuffPtr[i] = calculateTremolo(inBuffPtr[i]);
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <processData+0x48>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	b299      	uxth	r1, r3
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <processData+0x4c>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	18d4      	adds	r4, r2, r3
 800127c:	4608      	mov	r0, r1
 800127e:	f7ff fc9b 	bl	8000bb8 <calculateTremolo>
 8001282:	4603      	mov	r3, r0
 8001284:	8023      	strh	r3, [r4, #0]
	for(int i = 0; i < DATA_SIZE; i++) {
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3301      	adds	r3, #1
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b7f      	cmp	r3, #127	; 0x7f
 8001290:	dde8      	ble.n	8001264 <processData+0xc>
	}


	dataReady = 0;
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <processData+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bd90      	pop	{r4, r7, pc}
 80012a0:	24000628 	.word	0x24000628
 80012a4:	2400062c 	.word	0x2400062c
 80012a8:	24000630 	.word	0x24000630

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b2:	f000 fafd 	bl	80018b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b6:	f000 f837 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ba:	f7ff fec5 	bl	8001048 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80012be:	f000 fa13 	bl	80016e8 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80012c2:	f7ff fe99 	bl	8000ff8 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 80012c6:	f000 fac1 	bl	800184c <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80012ca:	f7ff fcc9 	bl	8000c60 <MX_ADC1_Init>
  MX_TIM6_Init();
 80012ce:	f000 f9b3 	bl	8001638 <MX_TIM6_Init>
  MX_DAC1_Init();
 80012d2:	f7ff fde5 	bl	8000ea0 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <main+0x64>)
 80012d8:	f007 fd30 	bl	8008d3c <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcData, BUFFER_SIZE);
 80012dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e0:	490c      	ldr	r1, [pc, #48]	; (8001314 <main+0x68>)
 80012e2:	480d      	ldr	r0, [pc, #52]	; (8001318 <main+0x6c>)
 80012e4:	f000 fedc 	bl	80020a0 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) dacData, BUFFER_SIZE, DAC_ALIGN_12B_R);
 80012e8:	2300      	movs	r3, #0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f0:	4a0a      	ldr	r2, [pc, #40]	; (800131c <main+0x70>)
 80012f2:	2100      	movs	r1, #0
 80012f4:	480a      	ldr	r0, [pc, #40]	; (8001320 <main+0x74>)
 80012f6:	f001 fe47 	bl	8002f88 <HAL_DAC_Start_DMA>

  Delay_Init();
 80012fa:	f7ff fb37 	bl	800096c <Delay_Init>
  Tremolo_Init();
 80012fe:	f7ff fc3f 	bl	8000b80 <Tremolo_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(dataReady) {
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <main+0x78>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0fb      	beq.n	8001302 <main+0x56>
		  processData();
 800130a:	f7ff ffa5 	bl	8001258 <processData>
	  if(dataReady) {
 800130e:	e7f8      	b.n	8001302 <main+0x56>
 8001310:	24000638 	.word	0x24000638
 8001314:	24000228 	.word	0x24000228
 8001318:	240000c0 	.word	0x240000c0
 800131c:	24000428 	.word	0x24000428
 8001320:	2400019c 	.word	0x2400019c
 8001324:	24000630 	.word	0x24000630

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b09c      	sub	sp, #112	; 0x70
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001332:	224c      	movs	r2, #76	; 0x4c
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f009 f83e 	bl	800a3b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2220      	movs	r2, #32
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f009 f838 	bl	800a3b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001348:	2004      	movs	r0, #4
 800134a:	f004 fc07 	bl	8005b5c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <SystemClock_Config+0xf0>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	4a30      	ldr	r2, [pc, #192]	; (8001418 <SystemClock_Config+0xf0>)
 8001358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800135c:	6193      	str	r3, [r2, #24]
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <SystemClock_Config+0xf0>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800136a:	bf00      	nop
 800136c:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <SystemClock_Config+0xf0>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001378:	d1f8      	bne.n	800136c <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800137a:	4b28      	ldr	r3, [pc, #160]	; (800141c <SystemClock_Config+0xf4>)
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	f023 0303 	bic.w	r3, r3, #3
 8001382:	4a26      	ldr	r2, [pc, #152]	; (800141c <SystemClock_Config+0xf4>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 800138a:	2329      	movs	r3, #41	; 0x29
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800138e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001394:	2301      	movs	r3, #1
 8001396:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001398:	2301      	movs	r3, #1
 800139a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139c:	2302      	movs	r3, #2
 800139e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a0:	2302      	movs	r3, #2
 80013a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 80013a8:	2346      	movs	r3, #70	; 0x46
 80013aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013ac:	2302      	movs	r3, #2
 80013ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013b0:	2304      	movs	r3, #4
 80013b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013b8:	230c      	movs	r3, #12
 80013ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013bc:	2300      	movs	r3, #0
 80013be:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c8:	4618      	mov	r0, r3
 80013ca:	f004 fc21 	bl	8005c10 <HAL_RCC_OscConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80013d4:	f000 f824 	bl	8001420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d8:	233f      	movs	r3, #63	; 0x3f
 80013da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013dc:	2303      	movs	r3, #3
 80013de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013e8:	2340      	movs	r3, #64	; 0x40
 80013ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013ec:	2340      	movs	r3, #64	; 0x40
 80013ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013f6:	2340      	movs	r3, #64	; 0x40
 80013f8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2107      	movs	r1, #7
 80013fe:	4618      	mov	r0, r3
 8001400:	f005 f80a 	bl	8006418 <HAL_RCC_ClockConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800140a:	f000 f809 	bl	8001420 <Error_Handler>
  }
}
 800140e:	bf00      	nop
 8001410:	3770      	adds	r7, #112	; 0x70
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	58024800 	.word	0x58024800
 800141c:	58024400 	.word	0x58024400

08001420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001424:	b672      	cpsid	i
}
 8001426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001428:	e7fe      	b.n	8001428 <Error_Handler+0x8>
	...

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_MspInit+0x30>)
 8001434:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001438:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_MspInit+0x30>)
 800143a:	f043 0302 	orr.w	r3, r3, #2
 800143e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_MspInit+0x30>)
 8001444:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	58024400 	.word	0x58024400

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <NMI_Handler+0x4>

08001466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <MemManage_Handler+0x4>

08001472 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <UsageFault_Handler+0x4>

0800147e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ac:	f000 fa72 	bl	8001994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <DMA1_Stream0_IRQHandler+0x10>)
 80014ba:	f002 fe03 	bl	80040c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	24000124 	.word	0x24000124

080014c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <DMA1_Stream1_IRQHandler+0x10>)
 80014ce:	f002 fdf9 	bl	80040c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	240001b0 	.word	0x240001b0

080014dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e4:	4a14      	ldr	r2, [pc, #80]	; (8001538 <_sbrk+0x5c>)
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <_sbrk+0x60>)
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <_sbrk+0x64>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <_sbrk+0x68>)
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	429a      	cmp	r2, r3
 800150a:	d207      	bcs.n	800151c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800150c:	f008 ff22 	bl	800a354 <__errno>
 8001510:	4603      	mov	r3, r0
 8001512:	220c      	movs	r2, #12
 8001514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	e009      	b.n	8001530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <_sbrk+0x64>)
 800152c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152e:	68fb      	ldr	r3, [r7, #12]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	24100000 	.word	0x24100000
 800153c:	00000400 	.word	0x00000400
 8001540:	24000634 	.word	0x24000634
 8001544:	24000728 	.word	0x24000728

08001548 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800154c:	4b32      	ldr	r3, [pc, #200]	; (8001618 <SystemInit+0xd0>)
 800154e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001552:	4a31      	ldr	r2, [pc, #196]	; (8001618 <SystemInit+0xd0>)
 8001554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800155c:	4b2f      	ldr	r3, [pc, #188]	; (800161c <SystemInit+0xd4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	2b02      	cmp	r3, #2
 8001566:	d807      	bhi.n	8001578 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001568:	4b2c      	ldr	r3, [pc, #176]	; (800161c <SystemInit+0xd4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f023 030f 	bic.w	r3, r3, #15
 8001570:	4a2a      	ldr	r2, [pc, #168]	; (800161c <SystemInit+0xd4>)
 8001572:	f043 0303 	orr.w	r3, r3, #3
 8001576:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <SystemInit+0xd8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a28      	ldr	r2, [pc, #160]	; (8001620 <SystemInit+0xd8>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001584:	4b26      	ldr	r3, [pc, #152]	; (8001620 <SystemInit+0xd8>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800158a:	4b25      	ldr	r3, [pc, #148]	; (8001620 <SystemInit+0xd8>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4924      	ldr	r1, [pc, #144]	; (8001620 <SystemInit+0xd8>)
 8001590:	4b24      	ldr	r3, [pc, #144]	; (8001624 <SystemInit+0xdc>)
 8001592:	4013      	ands	r3, r2
 8001594:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001596:	4b21      	ldr	r3, [pc, #132]	; (800161c <SystemInit+0xd4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <SystemInit+0xd4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 030f 	bic.w	r3, r3, #15
 80015aa:	4a1c      	ldr	r2, [pc, #112]	; (800161c <SystemInit+0xd4>)
 80015ac:	f043 0303 	orr.w	r3, r3, #3
 80015b0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <SystemInit+0xd8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <SystemInit+0xd8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <SystemInit+0xd8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <SystemInit+0xd8>)
 80015c6:	4a18      	ldr	r2, [pc, #96]	; (8001628 <SystemInit+0xe0>)
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <SystemInit+0xd8>)
 80015cc:	4a17      	ldr	r2, [pc, #92]	; (800162c <SystemInit+0xe4>)
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <SystemInit+0xd8>)
 80015d2:	4a17      	ldr	r2, [pc, #92]	; (8001630 <SystemInit+0xe8>)
 80015d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <SystemInit+0xd8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <SystemInit+0xd8>)
 80015de:	4a14      	ldr	r2, [pc, #80]	; (8001630 <SystemInit+0xe8>)
 80015e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <SystemInit+0xd8>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <SystemInit+0xd8>)
 80015ea:	4a11      	ldr	r2, [pc, #68]	; (8001630 <SystemInit+0xe8>)
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <SystemInit+0xd8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <SystemInit+0xd8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a09      	ldr	r2, [pc, #36]	; (8001620 <SystemInit+0xd8>)
 80015fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <SystemInit+0xd8>)
 8001602:	2200      	movs	r2, #0
 8001604:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <SystemInit+0xec>)
 8001608:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800160c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00
 800161c:	52002000 	.word	0x52002000
 8001620:	58024400 	.word	0x58024400
 8001624:	eaf6ed7f 	.word	0xeaf6ed7f
 8001628:	02020200 	.word	0x02020200
 800162c:	01ff0000 	.word	0x01ff0000
 8001630:	01010280 	.word	0x01010280
 8001634:	52004000 	.word	0x52004000

08001638 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <MX_TIM6_Init+0x64>)
 800164a:	4a15      	ldr	r2, [pc, #84]	; (80016a0 <MX_TIM6_Init+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <MX_TIM6_Init+0x64>)
 8001650:	2200      	movs	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_TIM6_Init+0x64>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <MX_TIM6_Init+0x64>)
 800165c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001660:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_TIM6_Init+0x64>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <MX_TIM6_Init+0x64>)
 800166a:	f007 fb0f 	bl	8008c8c <HAL_TIM_Base_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001674:	f7ff fed4 	bl	8001420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001678:	2320      	movs	r3, #32
 800167a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_TIM6_Init+0x64>)
 8001686:	f007 fc63 	bl	8008f50 <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001690:	f7ff fec6 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	24000638 	.word	0x24000638
 80016a0:	40001000 	.word	0x40001000

080016a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <HAL_TIM_Base_MspInit+0x3c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d10e      	bne.n	80016d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_TIM_Base_MspInit+0x40>)
 80016b8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80016bc:	4a09      	ldr	r2, [pc, #36]	; (80016e4 <HAL_TIM_Base_MspInit+0x40>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <HAL_TIM_Base_MspInit+0x40>)
 80016c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80016cc:	f003 0310 	and.w	r3, r3, #16
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	40001000 	.word	0x40001000
 80016e4:	58024400 	.word	0x58024400

080016e8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <MX_USART3_UART_Init+0x90>)
 80016ee:	4a23      	ldr	r2, [pc, #140]	; (800177c <MX_USART3_UART_Init+0x94>)
 80016f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016f2:	4b21      	ldr	r3, [pc, #132]	; (8001778 <MX_USART3_UART_Init+0x90>)
 80016f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <MX_USART3_UART_Init+0x90>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <MX_USART3_UART_Init+0x90>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <MX_USART3_UART_Init+0x90>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_USART3_UART_Init+0x90>)
 800170e:	220c      	movs	r2, #12
 8001710:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <MX_USART3_UART_Init+0x90>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_USART3_UART_Init+0x90>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <MX_USART3_UART_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_USART3_UART_Init+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <MX_USART3_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001730:	4811      	ldr	r0, [pc, #68]	; (8001778 <MX_USART3_UART_Init+0x90>)
 8001732:	f007 fc9b 	bl	800906c <HAL_UART_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800173c:	f7ff fe70 	bl	8001420 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001740:	2100      	movs	r1, #0
 8001742:	480d      	ldr	r0, [pc, #52]	; (8001778 <MX_USART3_UART_Init+0x90>)
 8001744:	f008 fd3c 	bl	800a1c0 <HAL_UARTEx_SetTxFifoThreshold>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800174e:	f7ff fe67 	bl	8001420 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001752:	2100      	movs	r1, #0
 8001754:	4808      	ldr	r0, [pc, #32]	; (8001778 <MX_USART3_UART_Init+0x90>)
 8001756:	f008 fd71 	bl	800a23c <HAL_UARTEx_SetRxFifoThreshold>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001760:	f7ff fe5e 	bl	8001420 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <MX_USART3_UART_Init+0x90>)
 8001766:	f008 fcf2 	bl	800a14e <HAL_UARTEx_DisableFifoMode>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001770:	f7ff fe56 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	24000684 	.word	0x24000684
 800177c:	40004800 	.word	0x40004800

08001780 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0b8      	sub	sp, #224	; 0xe0
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	22b8      	movs	r2, #184	; 0xb8
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f008 fe09 	bl	800a3b8 <memset>
  if(uartHandle->Instance==USART3)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a25      	ldr	r2, [pc, #148]	; (8001840 <HAL_UART_MspInit+0xc0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d142      	bne.n	8001836 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017b0:	2302      	movs	r3, #2
 80017b2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4618      	mov	r0, r3
 80017c0:	f005 f9b6 	bl	8006b30 <HAL_RCCEx_PeriphCLKConfig>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017ca:	f7ff fe29 	bl	8001420 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_UART_MspInit+0xc4>)
 80017d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017d4:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <HAL_UART_MspInit+0xc4>)
 80017d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017da:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_UART_MspInit+0xc4>)
 80017e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80017e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_UART_MspInit+0xc4>)
 80017ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017f2:	4a14      	ldr	r2, [pc, #80]	; (8001844 <HAL_UART_MspInit+0xc4>)
 80017f4:	f043 0308 	orr.w	r3, r3, #8
 80017f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_UART_MspInit+0xc4>)
 80017fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800180a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800180e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001824:	2307      	movs	r3, #7
 8001826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800182a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800182e:	4619      	mov	r1, r3
 8001830:	4805      	ldr	r0, [pc, #20]	; (8001848 <HAL_UART_MspInit+0xc8>)
 8001832:	f003 ffc9 	bl	80057c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001836:	bf00      	nop
 8001838:	37e0      	adds	r7, #224	; 0xe0
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40004800 	.word	0x40004800
 8001844:	58024400 	.word	0x58024400
 8001848:	58020c00 	.word	0x58020c00

0800184c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800185c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001894 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001860:	f7ff fe72 	bl	8001548 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001864:	480c      	ldr	r0, [pc, #48]	; (8001898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001866:	490d      	ldr	r1, [pc, #52]	; (800189c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001868:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800186c:	e002      	b.n	8001874 <LoopCopyDataInit>

0800186e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001872:	3304      	adds	r3, #4

08001874 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001878:	d3f9      	bcc.n	800186e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800187c:	4c0a      	ldr	r4, [pc, #40]	; (80018a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001880:	e001      	b.n	8001886 <LoopFillZerobss>

08001882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001884:	3204      	adds	r2, #4

08001886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001888:	d3fb      	bcc.n	8001882 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800188a:	f008 fd69 	bl	800a360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188e:	f7ff fd0d 	bl	80012ac <main>
  bx  lr
 8001892:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001894:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001898:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800189c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80018a0:	0800a890 	.word	0x0800a890
  ldr r2, =_sbss
 80018a4:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80018a8:	24000728 	.word	0x24000728

080018ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC_IRQHandler>
	...

080018b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b6:	2003      	movs	r0, #3
 80018b8:	f001 fb04 	bl	8002ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80018bc:	f004 ff62 	bl	8006784 <HAL_RCC_GetSysClockFreq>
 80018c0:	4602      	mov	r2, r0
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_Init+0x68>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	0a1b      	lsrs	r3, r3, #8
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	4913      	ldr	r1, [pc, #76]	; (800191c <HAL_Init+0x6c>)
 80018ce:	5ccb      	ldrb	r3, [r1, r3]
 80018d0:	f003 031f 	and.w	r3, r3, #31
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
 80018d8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_Init+0x68>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <HAL_Init+0x6c>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	f003 031f 	and.w	r3, r3, #31
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
 80018f0:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <HAL_Init+0x70>)
 80018f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018f4:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <HAL_Init+0x74>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018fa:	2000      	movs	r0, #0
 80018fc:	f000 f814 	bl	8001928 <HAL_InitTick>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e002      	b.n	8001910 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800190a:	f7ff fd8f 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	58024400 	.word	0x58024400
 800191c:	0800a700 	.word	0x0800a700
 8001920:	24000004 	.word	0x24000004
 8001924:	24000000 	.word	0x24000000

08001928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <HAL_InitTick+0x60>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e021      	b.n	8001980 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <HAL_InitTick+0x64>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_InitTick+0x60>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	fbb3 f3f1 	udiv	r3, r3, r1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f001 fae9 	bl	8002f2a <HAL_SYSTICK_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e00e      	b.n	8001980 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d80a      	bhi.n	800197e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f001 fab3 	bl	8002eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001974:	4a06      	ldr	r2, [pc, #24]	; (8001990 <HAL_InitTick+0x68>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	2400000c 	.word	0x2400000c
 800198c:	24000000 	.word	0x24000000
 8001990:	24000008 	.word	0x24000008

08001994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_IncTick+0x20>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x24>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <HAL_IncTick+0x24>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	2400000c 	.word	0x2400000c
 80019b8:	24000714 	.word	0x24000714

080019bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return uwTick;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_GetTick+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	24000714 	.word	0x24000714

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff ffee 	bl	80019bc <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d005      	beq.n	80019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_Delay+0x44>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019fa:	bf00      	nop
 80019fc:	f7ff ffde 	bl	80019bc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d8f7      	bhi.n	80019fc <HAL_Delay+0x28>
  {
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2400000c 	.word	0x2400000c

08001a1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	609a      	str	r2, [r3, #8]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3360      	adds	r3, #96	; 0x60
 8001a96:	461a      	mov	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ab8:	bf00      	nop
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b087      	sub	sp, #28
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3360      	adds	r3, #96	; 0x60
 8001b06:	461a      	mov	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	601a      	str	r2, [r3, #0]
  }
}
 8001b20:	bf00      	nop
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b087      	sub	sp, #28
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3330      	adds	r3, #48	; 0x30
 8001b62:	461a      	mov	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	4413      	add	r3, r2
 8001b70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	211f      	movs	r1, #31
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	401a      	ands	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	0e9b      	lsrs	r3, r3, #26
 8001b8a:	f003 011f 	and.w	r1, r3, #31
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b9e:	bf00      	nop
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f023 0203 	bic.w	r2, r3, #3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	60da      	str	r2, [r3, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3314      	adds	r3, #20
 8001be0:	461a      	mov	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	0e5b      	lsrs	r3, r3, #25
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	4413      	add	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	0d1b      	lsrs	r3, r3, #20
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	2107      	movs	r1, #7
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	401a      	ands	r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	0d1b      	lsrs	r3, r3, #20
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	431a      	orrs	r2, r3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c1a:	bf00      	nop
 8001c1c:	371c      	adds	r7, #28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c40:	43db      	mvns	r3, r3
 8001c42:	401a      	ands	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0318 	and.w	r3, r3, #24
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c4c:	40d9      	lsrs	r1, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	400b      	ands	r3, r1
 8001c52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c56:	431a      	orrs	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	000fffff 	.word	0x000fffff

08001c70 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <LL_ADC_DisableDeepPowerDown+0x20>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6093      	str	r3, [r2, #8]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	5fffffc0 	.word	0x5fffffc0

08001cb0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cc4:	d101      	bne.n	8001cca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <LL_ADC_EnableInternalRegulator+0x24>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	6fffffc0 	.word	0x6fffffc0

08001d00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d14:	d101      	bne.n	8001d1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <LL_ADC_Enable+0x24>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	f043 0201 	orr.w	r2, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	7fffffc0 	.word	0x7fffffc0

08001d50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <LL_ADC_IsEnabled+0x18>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <LL_ADC_IsEnabled+0x1a>
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <LL_ADC_REG_StartConversion+0x24>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	f043 0204 	orr.w	r2, r3, #4
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	7fffffc0 	.word	0x7fffffc0

08001da0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d101      	bne.n	8001db8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d101      	bne.n	8001dde <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e138      	b.n	8002078 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d109      	bne.n	8001e28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7fe ff9d 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff3f 	bl	8001cb0 <LL_ADC_IsDeepPowerDownEnabled>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d004      	beq.n	8001e42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff25 	bl	8001c8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff5a 	bl	8001d00 <LL_ADC_IsInternalRegulatorEnabled>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d114      	bne.n	8001e7c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff3e 	bl	8001cd8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e5c:	4b88      	ldr	r3, [pc, #544]	; (8002080 <HAL_ADC_Init+0x294>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	099b      	lsrs	r3, r3, #6
 8001e62:	4a88      	ldr	r2, [pc, #544]	; (8002084 <HAL_ADC_Init+0x298>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	099b      	lsrs	r3, r3, #6
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e6e:	e002      	b.n	8001e76 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f9      	bne.n	8001e70 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff3d 	bl	8001d00 <LL_ADC_IsInternalRegulatorEnabled>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10d      	bne.n	8001ea8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e90:	f043 0210 	orr.w	r2, r3, #16
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff77 	bl	8001da0 <LL_ADC_REG_IsConversionOngoing>
 8001eb2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f040 80d2 	bne.w	8002066 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f040 80ce 	bne.w	8002066 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ece:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ed2:	f043 0202 	orr.w	r2, r3, #2
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ff36 	bl	8001d50 <LL_ADC_IsEnabled>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d110      	bne.n	8001f0c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eea:	4867      	ldr	r0, [pc, #412]	; (8002088 <HAL_ADC_Init+0x29c>)
 8001eec:	f7ff ff30 	bl	8001d50 <LL_ADC_IsEnabled>
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	4866      	ldr	r0, [pc, #408]	; (800208c <HAL_ADC_Init+0x2a0>)
 8001ef4:	f7ff ff2c 	bl	8001d50 <LL_ADC_IsEnabled>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4323      	orrs	r3, r4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4619      	mov	r1, r3
 8001f06:	4862      	ldr	r0, [pc, #392]	; (8002090 <HAL_ADC_Init+0x2a4>)
 8001f08:	f7ff fd88 	bl	8001a1c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7d5b      	ldrb	r3, [r3, #21]
 8001f10:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f16:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001f1c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7f1b      	ldrb	r3, [r3, #28]
 8001f22:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7f1b      	ldrb	r3, [r3, #28]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d106      	bne.n	8001f3e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	045b      	lsls	r3, r3, #17
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	4b4c      	ldr	r3, [pc, #304]	; (8002094 <HAL_ADC_Init+0x2a8>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	69b9      	ldr	r1, [r7, #24]
 8001f6a:	430b      	orrs	r3, r1
 8001f6c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ff14 	bl	8001da0 <LL_ADC_REG_IsConversionOngoing>
 8001f78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff21 	bl	8001dc6 <LL_ADC_INJ_IsConversionOngoing>
 8001f84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d14a      	bne.n	8002022 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d147      	bne.n	8002022 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7d1b      	ldrb	r3, [r3, #20]
 8001f96:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	4b3c      	ldr	r3, [pc, #240]	; (8002098 <HAL_ADC_Init+0x2ac>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	69b9      	ldr	r1, [r7, #24]
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d11b      	bne.n	8001ff6 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	4b34      	ldr	r3, [pc, #208]	; (800209c <HAL_ADC_Init+0x2b0>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fd2:	3a01      	subs	r2, #1
 8001fd4:	0411      	lsls	r1, r2, #16
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fda:	4311      	orrs	r1, r2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fe0:	4311      	orrs	r1, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	611a      	str	r2, [r3, #16]
 8001ff4:	e007      	b.n	8002006 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0201 	bic.w	r2, r2, #1
 8002004:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fcf3 	bl	8002a08 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d10c      	bne.n	8002044 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	f023 010f 	bic.w	r1, r3, #15
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	1e5a      	subs	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	631a      	str	r2, [r3, #48]	; 0x30
 8002042:	e007      	b.n	8002054 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 020f 	bic.w	r2, r2, #15
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002058:	f023 0303 	bic.w	r3, r3, #3
 800205c:	f043 0201 	orr.w	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	655a      	str	r2, [r3, #84]	; 0x54
 8002064:	e007      	b.n	8002076 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206a:	f043 0210 	orr.w	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002076:	7ffb      	ldrb	r3, [r7, #31]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3724      	adds	r7, #36	; 0x24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd90      	pop	{r4, r7, pc}
 8002080:	24000000 	.word	0x24000000
 8002084:	053e2d63 	.word	0x053e2d63
 8002088:	40022000 	.word	0x40022000
 800208c:	40022100 	.word	0x40022100
 8002090:	40022300 	.word	0x40022300
 8002094:	fff0c003 	.word	0xfff0c003
 8002098:	ffffbffc 	.word	0xffffbffc
 800209c:	fc00f81e 	.word	0xfc00f81e

080020a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020ac:	484f      	ldr	r0, [pc, #316]	; (80021ec <HAL_ADC_Start_DMA+0x14c>)
 80020ae:	f7ff fddf 	bl	8001c70 <LL_ADC_GetMultimode>
 80020b2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fe71 	bl	8001da0 <LL_ADC_REG_IsConversionOngoing>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f040 808c 	bne.w	80021de <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_ADC_Start_DMA+0x34>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e087      	b.n	80021e4 <HAL_ADC_Start_DMA+0x144>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d002      	beq.n	80020ee <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	2b09      	cmp	r3, #9
 80020ec:	d170      	bne.n	80021d0 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 fb7a 	bl	80027e8 <ADC_Enable>
 80020f4:	4603      	mov	r3, r0
 80020f6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d163      	bne.n	80021c6 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002102:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_ADC_Start_DMA+0x150>)
 8002104:	4013      	ands	r3, r2
 8002106:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a38      	ldr	r2, [pc, #224]	; (80021f4 <HAL_ADC_Start_DMA+0x154>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d002      	beq.n	800211e <HAL_ADC_Start_DMA+0x7e>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	e000      	b.n	8002120 <HAL_ADC_Start_DMA+0x80>
 800211e:	4b36      	ldr	r3, [pc, #216]	; (80021f8 <HAL_ADC_Start_DMA+0x158>)
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	4293      	cmp	r3, r2
 8002126:	d002      	beq.n	800212e <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d105      	bne.n	800213a <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002132:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d006      	beq.n	8002154 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214a:	f023 0206 	bic.w	r2, r3, #6
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	659a      	str	r2, [r3, #88]	; 0x58
 8002152:	e002      	b.n	800215a <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215e:	4a27      	ldr	r2, [pc, #156]	; (80021fc <HAL_ADC_Start_DMA+0x15c>)
 8002160:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002166:	4a26      	ldr	r2, [pc, #152]	; (8002200 <HAL_ADC_Start_DMA+0x160>)
 8002168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	4a25      	ldr	r2, [pc, #148]	; (8002204 <HAL_ADC_Start_DMA+0x164>)
 8002170:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	221c      	movs	r2, #28
 8002178:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0210 	orr.w	r2, r2, #16
 8002190:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	4619      	mov	r1, r3
 800219c:	4610      	mov	r0, r2
 800219e:	f7ff fd04 	bl	8001baa <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	3340      	adds	r3, #64	; 0x40
 80021ac:	4619      	mov	r1, r3
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f001 fd1d 	bl	8003bf0 <HAL_DMA_Start_IT>
 80021b6:	4603      	mov	r3, r0
 80021b8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fdda 	bl	8001d78 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80021c4:	e00d      	b.n	80021e2 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80021ce:	e008      	b.n	80021e2 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80021dc:	e001      	b.n	80021e2 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021de:	2302      	movs	r3, #2
 80021e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40022300 	.word	0x40022300
 80021f0:	fffff0fe 	.word	0xfffff0fe
 80021f4:	40022100 	.word	0x40022100
 80021f8:	40022000 	.word	0x40022000
 80021fc:	080028e1 	.word	0x080028e1
 8002200:	080029b9 	.word	0x080029b9
 8002204:	080029d5 	.word	0x080029d5

08002208 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b0a1      	sub	sp, #132	; 0x84
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a9a      	ldr	r2, [pc, #616]	; (80024a0 <HAL_ADC_ConfigChannel+0x284>)
 8002236:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x2a>
 8002242:	2302      	movs	r3, #2
 8002244:	e2bc      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x5a4>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fda4 	bl	8001da0 <LL_ADC_REG_IsConversionOngoing>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	f040 82a1 	bne.w	80027a2 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002268:	2b00      	cmp	r3, #0
 800226a:	d108      	bne.n	800227e <HAL_ADC_ConfigChannel+0x62>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0e9b      	lsrs	r3, r3, #26
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2201      	movs	r2, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	e016      	b.n	80022ac <HAL_ADC_ConfigChannel+0x90>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800228c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800228e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002290:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002296:	2320      	movs	r3, #32
 8002298:	e003      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800229a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	2201      	movs	r2, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	69d1      	ldr	r1, [r2, #28]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	430b      	orrs	r3, r1
 80022b8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	6859      	ldr	r1, [r3, #4]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	f7ff fc43 	bl	8001b52 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fd65 	bl	8001da0 <LL_ADC_REG_IsConversionOngoing>
 80022d6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fd72 	bl	8001dc6 <LL_ADC_INJ_IsConversionOngoing>
 80022e2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 80a0 	bne.w	800242c <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f040 809c 	bne.w	800242c <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6819      	ldr	r1, [r3, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	461a      	mov	r2, r3
 8002302:	f7ff fc65 	bl	8001bd0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10b      	bne.n	800232c <HAL_ADC_ConfigChannel+0x110>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	e00a      	b.n	8002342 <HAL_ADC_ConfigChannel+0x126>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d027      	beq.n	800239c <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6919      	ldr	r1, [r3, #16]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800235a:	f7ff fb93 	bl	8001a84 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6919      	ldr	r1, [r3, #16]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	7e5b      	ldrb	r3, [r3, #25]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d102      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x158>
 800236e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002372:	e000      	b.n	8002376 <HAL_ADC_ConfigChannel+0x15a>
 8002374:	2300      	movs	r3, #0
 8002376:	461a      	mov	r2, r3
 8002378:	f7ff fbbd 	bl	8001af6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	6919      	ldr	r1, [r3, #16]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	7e1b      	ldrb	r3, [r3, #24]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d102      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x176>
 800238c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002390:	e000      	b.n	8002394 <HAL_ADC_ConfigChannel+0x178>
 8002392:	2300      	movs	r3, #0
 8002394:	461a      	mov	r2, r3
 8002396:	f7ff fb95 	bl	8001ac4 <LL_ADC_SetDataRightShift>
 800239a:	e047      	b.n	800242c <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	069b      	lsls	r3, r3, #26
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d107      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023be:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	069b      	lsls	r3, r3, #26
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d107      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023e2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	069b      	lsls	r3, r3, #26
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d107      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002406:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800240e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	069b      	lsls	r3, r3, #26
 8002418:	429a      	cmp	r2, r3
 800241a:	d107      	bne.n	800242c <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800242a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fc8d 	bl	8001d50 <LL_ADC_IsEnabled>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	f040 81bb 	bne.w	80027b4 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6819      	ldr	r1, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	461a      	mov	r2, r3
 800244c:	f7ff fbec 	bl	8001c28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <HAL_ADC_ConfigChannel+0x284>)
 8002456:	4293      	cmp	r3, r2
 8002458:	f040 8130 	bne.w	80026bc <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10b      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x268>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0e9b      	lsrs	r3, r3, #26
 8002472:	3301      	adds	r3, #1
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	2b09      	cmp	r3, #9
 800247a:	bf94      	ite	ls
 800247c:	2301      	movls	r3, #1
 800247e:	2300      	movhi	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	e01b      	b.n	80024bc <HAL_ADC_ConfigChannel+0x2a0>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002494:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002498:	2b00      	cmp	r3, #0
 800249a:	d103      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 800249c:	2320      	movs	r3, #32
 800249e:	e005      	b.n	80024ac <HAL_ADC_ConfigChannel+0x290>
 80024a0:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80024a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	3301      	adds	r3, #1
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	2b09      	cmp	r3, #9
 80024b4:	bf94      	ite	ls
 80024b6:	2301      	movls	r3, #1
 80024b8:	2300      	movhi	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d079      	beq.n	80025b4 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d107      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x2c0>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	3301      	adds	r3, #1
 80024d4:	069b      	lsls	r3, r3, #26
 80024d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024da:	e015      	b.n	8002508 <HAL_ADC_ConfigChannel+0x2ec>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80024ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ec:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80024ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80024f4:	2320      	movs	r3, #32
 80024f6:	e003      	b.n	8002500 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80024f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	3301      	adds	r3, #1
 8002502:	069b      	lsls	r3, r3, #26
 8002504:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x30c>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	0e9b      	lsrs	r3, r3, #26
 800251a:	3301      	adds	r3, #1
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	2101      	movs	r1, #1
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	e017      	b.n	8002558 <HAL_ADC_ConfigChannel+0x33c>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002538:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800253a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002540:	2320      	movs	r3, #32
 8002542:	e003      	b.n	800254c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002546:	fab3 f383 	clz	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	3301      	adds	r3, #1
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	2101      	movs	r1, #1
 8002554:	fa01 f303 	lsl.w	r3, r1, r3
 8002558:	ea42 0103 	orr.w	r1, r2, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10a      	bne.n	800257e <HAL_ADC_ConfigChannel+0x362>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	3301      	adds	r3, #1
 8002570:	f003 021f 	and.w	r2, r3, #31
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	051b      	lsls	r3, r3, #20
 800257c:	e018      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x394>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002596:	2320      	movs	r3, #32
 8002598:	e003      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b0:	430b      	orrs	r3, r1
 80025b2:	e07e      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d107      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x3b4>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	0e9b      	lsrs	r3, r3, #26
 80025c6:	3301      	adds	r3, #1
 80025c8:	069b      	lsls	r3, r3, #26
 80025ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ce:	e015      	b.n	80025fc <HAL_ADC_ConfigChannel+0x3e0>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80025e8:	2320      	movs	r3, #32
 80025ea:	e003      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ee:	fab3 f383 	clz	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	069b      	lsls	r3, r3, #26
 80025f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002604:	2b00      	cmp	r3, #0
 8002606:	d109      	bne.n	800261c <HAL_ADC_ConfigChannel+0x400>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0e9b      	lsrs	r3, r3, #26
 800260e:	3301      	adds	r3, #1
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	2101      	movs	r1, #1
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	e017      	b.n	800264c <HAL_ADC_ConfigChannel+0x430>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	61bb      	str	r3, [r7, #24]
  return result;
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002634:	2320      	movs	r3, #32
 8002636:	e003      	b.n	8002640 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	3301      	adds	r3, #1
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	2101      	movs	r1, #1
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	ea42 0103 	orr.w	r1, r2, r3
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10d      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x45c>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0e9b      	lsrs	r3, r3, #26
 8002662:	3301      	adds	r3, #1
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	3b1e      	subs	r3, #30
 8002670:	051b      	lsls	r3, r3, #20
 8002672:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002676:	e01b      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x494>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	60fb      	str	r3, [r7, #12]
  return result;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002690:	2320      	movs	r3, #32
 8002692:	e003      	b.n	800269c <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fab3 f383 	clz	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	3301      	adds	r3, #1
 800269e:	f003 021f 	and.w	r2, r3, #31
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	3b1e      	subs	r3, #30
 80026aa:	051b      	lsls	r3, r3, #20
 80026ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b0:	430b      	orrs	r3, r1
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	6892      	ldr	r2, [r2, #8]
 80026b6:	4619      	mov	r1, r3
 80026b8:	f7ff fa8a 	bl	8001bd0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	da77      	bge.n	80027b4 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026c4:	4840      	ldr	r0, [pc, #256]	; (80027c8 <HAL_ADC_ConfigChannel+0x5ac>)
 80026c6:	f7ff f9cf 	bl	8001a68 <LL_ADC_GetCommonPathInternalCh>
 80026ca:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026cc:	483f      	ldr	r0, [pc, #252]	; (80027cc <HAL_ADC_ConfigChannel+0x5b0>)
 80026ce:	f7ff fb3f 	bl	8001d50 <LL_ADC_IsEnabled>
 80026d2:	4604      	mov	r4, r0
 80026d4:	483e      	ldr	r0, [pc, #248]	; (80027d0 <HAL_ADC_ConfigChannel+0x5b4>)
 80026d6:	f7ff fb3b 	bl	8001d50 <LL_ADC_IsEnabled>
 80026da:	4603      	mov	r3, r0
 80026dc:	4323      	orrs	r3, r4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d155      	bne.n	800278e <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a3b      	ldr	r2, [pc, #236]	; (80027d4 <HAL_ADC_ConfigChannel+0x5b8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d122      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x516>
 80026ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d11d      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a35      	ldr	r2, [pc, #212]	; (80027d0 <HAL_ADC_ConfigChannel+0x5b4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d159      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002702:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002706:	4619      	mov	r1, r3
 8002708:	482f      	ldr	r0, [pc, #188]	; (80027c8 <HAL_ADC_ConfigChannel+0x5ac>)
 800270a:	f7ff f99a 	bl	8001a42 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800270e:	4b32      	ldr	r3, [pc, #200]	; (80027d8 <HAL_ADC_ConfigChannel+0x5bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	099b      	lsrs	r3, r3, #6
 8002714:	4a31      	ldr	r2, [pc, #196]	; (80027dc <HAL_ADC_ConfigChannel+0x5c0>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	3301      	adds	r3, #1
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002722:	e002      	b.n	800272a <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	3b01      	subs	r3, #1
 8002728:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f9      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002730:	e040      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2a      	ldr	r2, [pc, #168]	; (80027e0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d111      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x544>
 800273c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10c      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a21      	ldr	r2, [pc, #132]	; (80027d0 <HAL_ADC_ConfigChannel+0x5b4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d131      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002756:	4619      	mov	r1, r3
 8002758:	481b      	ldr	r0, [pc, #108]	; (80027c8 <HAL_ADC_ConfigChannel+0x5ac>)
 800275a:	f7ff f972 	bl	8001a42 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800275e:	e029      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1f      	ldr	r2, [pc, #124]	; (80027e4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d124      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x598>
 800276a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d11f      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <HAL_ADC_ConfigChannel+0x5b4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d11a      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800277e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002780:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002784:	4619      	mov	r1, r3
 8002786:	4810      	ldr	r0, [pc, #64]	; (80027c8 <HAL_ADC_ConfigChannel+0x5ac>)
 8002788:	f7ff f95b 	bl	8001a42 <LL_ADC_SetCommonPathInternalCh>
 800278c:	e012      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	f043 0220 	orr.w	r2, r3, #32
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80027a0:	e008      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a6:	f043 0220 	orr.w	r2, r3, #32
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027bc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3784      	adds	r7, #132	; 0x84
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd90      	pop	{r4, r7, pc}
 80027c8:	40022300 	.word	0x40022300
 80027cc:	40022000 	.word	0x40022000
 80027d0:	40022100 	.word	0x40022100
 80027d4:	cb840000 	.word	0xcb840000
 80027d8:	24000000 	.word	0x24000000
 80027dc:	053e2d63 	.word	0x053e2d63
 80027e0:	bac04000 	.word	0xbac04000
 80027e4:	cfb80000 	.word	0xcfb80000

080027e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff faab 	bl	8001d50 <LL_ADC_IsEnabled>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d161      	bne.n	80028c4 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	4b32      	ldr	r3, [pc, #200]	; (80028d0 <ADC_Enable+0xe8>)
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00d      	beq.n	800282a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f043 0210 	orr.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e04d      	b.n	80028c6 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fa7a 	bl	8001d28 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002834:	f7ff f8c2 	bl	80019bc <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800283a:	4826      	ldr	r0, [pc, #152]	; (80028d4 <ADC_Enable+0xec>)
 800283c:	f7ff fa18 	bl	8001c70 <LL_ADC_GetMultimode>
 8002840:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a24      	ldr	r2, [pc, #144]	; (80028d8 <ADC_Enable+0xf0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d002      	beq.n	8002852 <ADC_Enable+0x6a>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	e000      	b.n	8002854 <ADC_Enable+0x6c>
 8002852:	4b22      	ldr	r3, [pc, #136]	; (80028dc <ADC_Enable+0xf4>)
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	4293      	cmp	r3, r2
 800285a:	d02c      	beq.n	80028b6 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d130      	bne.n	80028c4 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002862:	e028      	b.n	80028b6 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fa71 	bl	8001d50 <LL_ADC_IsEnabled>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d104      	bne.n	800287e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fa55 	bl	8001d28 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800287e:	f7ff f89d 	bl	80019bc <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d914      	bls.n	80028b6 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b01      	cmp	r3, #1
 8002898:	d00d      	beq.n	80028b6 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f043 0210 	orr.w	r2, r3, #16
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e007      	b.n	80028c6 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d1cf      	bne.n	8002864 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	8000003f 	.word	0x8000003f
 80028d4:	40022300 	.word	0x40022300
 80028d8:	40022100 	.word	0x40022100
 80028dc:	40022000 	.word	0x40022000

080028e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d14b      	bne.n	8002992 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d021      	beq.n	8002958 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff f907 	bl	8001b2c <LL_ADC_REG_IsTriggerSourceSWStart>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d032      	beq.n	800298a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d12b      	bne.n	800298a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002936:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d11f      	bne.n	800298a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294e:	f043 0201 	orr.w	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	655a      	str	r2, [r3, #84]	; 0x54
 8002956:	e018      	b.n	800298a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d111      	bne.n	800298a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f7fe fc40 	bl	8001210 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002990:	e00e      	b.n	80029b0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff fc32 	bl	8002208 <HAL_ADC_ErrorCallback>
}
 80029a4:	e004      	b.n	80029b0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7fe fbfe 	bl	80011c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f2:	f043 0204 	orr.w	r2, r3, #4
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f7ff fc04 	bl	8002208 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002a10:	4b5f      	ldr	r3, [pc, #380]	; (8002b90 <ADC_ConfigureBoostMode+0x188>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01c      	beq.n	8002a56 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002a1c:	f004 f82c 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 8002a20:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a2a:	d010      	beq.n	8002a4e <ADC_ConfigureBoostMode+0x46>
 8002a2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a30:	d871      	bhi.n	8002b16 <ADC_ConfigureBoostMode+0x10e>
 8002a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a36:	d002      	beq.n	8002a3e <ADC_ConfigureBoostMode+0x36>
 8002a38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a3c:	d16b      	bne.n	8002b16 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4a:	60fb      	str	r3, [r7, #12]
        break;
 8002a4c:	e066      	b.n	8002b1c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	60fb      	str	r3, [r7, #12]
        break;
 8002a54:	e062      	b.n	8002b1c <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002a56:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002a5a:	f004 ff75 	bl	8007948 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a5e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002a68:	d051      	beq.n	8002b0e <ADC_ConfigureBoostMode+0x106>
 8002a6a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002a6e:	d854      	bhi.n	8002b1a <ADC_ConfigureBoostMode+0x112>
 8002a70:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002a74:	d047      	beq.n	8002b06 <ADC_ConfigureBoostMode+0xfe>
 8002a76:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002a7a:	d84e      	bhi.n	8002b1a <ADC_ConfigureBoostMode+0x112>
 8002a7c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a80:	d03d      	beq.n	8002afe <ADC_ConfigureBoostMode+0xf6>
 8002a82:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a86:	d848      	bhi.n	8002b1a <ADC_ConfigureBoostMode+0x112>
 8002a88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a8c:	d033      	beq.n	8002af6 <ADC_ConfigureBoostMode+0xee>
 8002a8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a92:	d842      	bhi.n	8002b1a <ADC_ConfigureBoostMode+0x112>
 8002a94:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a98:	d029      	beq.n	8002aee <ADC_ConfigureBoostMode+0xe6>
 8002a9a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a9e:	d83c      	bhi.n	8002b1a <ADC_ConfigureBoostMode+0x112>
 8002aa0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002aa4:	d01a      	beq.n	8002adc <ADC_ConfigureBoostMode+0xd4>
 8002aa6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002aaa:	d836      	bhi.n	8002b1a <ADC_ConfigureBoostMode+0x112>
 8002aac:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ab0:	d014      	beq.n	8002adc <ADC_ConfigureBoostMode+0xd4>
 8002ab2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ab6:	d830      	bhi.n	8002b1a <ADC_ConfigureBoostMode+0x112>
 8002ab8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002abc:	d00e      	beq.n	8002adc <ADC_ConfigureBoostMode+0xd4>
 8002abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ac2:	d82a      	bhi.n	8002b1a <ADC_ConfigureBoostMode+0x112>
 8002ac4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ac8:	d008      	beq.n	8002adc <ADC_ConfigureBoostMode+0xd4>
 8002aca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ace:	d824      	bhi.n	8002b1a <ADC_ConfigureBoostMode+0x112>
 8002ad0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ad4:	d002      	beq.n	8002adc <ADC_ConfigureBoostMode+0xd4>
 8002ad6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ada:	d11e      	bne.n	8002b1a <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	0c9b      	lsrs	r3, r3, #18
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	60fb      	str	r3, [r7, #12]
        break;
 8002aec:	e016      	b.n	8002b1c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	60fb      	str	r3, [r7, #12]
        break;
 8002af4:	e012      	b.n	8002b1c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	095b      	lsrs	r3, r3, #5
 8002afa:	60fb      	str	r3, [r7, #12]
        break;
 8002afc:	e00e      	b.n	8002b1c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	099b      	lsrs	r3, r3, #6
 8002b02:	60fb      	str	r3, [r7, #12]
        break;
 8002b04:	e00a      	b.n	8002b1c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	09db      	lsrs	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]
        break;
 8002b0c:	e006      	b.n	8002b1c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	60fb      	str	r3, [r7, #12]
        break;
 8002b14:	e002      	b.n	8002b1c <ADC_ConfigureBoostMode+0x114>
        break;
 8002b16:	bf00      	nop
 8002b18:	e000      	b.n	8002b1c <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8002b1a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4a1b      	ldr	r2, [pc, #108]	; (8002b94 <ADC_ConfigureBoostMode+0x18c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d808      	bhi.n	8002b3c <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002b38:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002b3a:	e025      	b.n	8002b88 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <ADC_ConfigureBoostMode+0x190>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d80a      	bhi.n	8002b5a <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b56:	609a      	str	r2, [r3, #8]
}
 8002b58:	e016      	b.n	8002b88 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4a0f      	ldr	r2, [pc, #60]	; (8002b9c <ADC_ConfigureBoostMode+0x194>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d80a      	bhi.n	8002b78 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b74:	609a      	str	r2, [r3, #8]
}
 8002b76:	e007      	b.n	8002b88 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002b86:	609a      	str	r2, [r3, #8]
}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40022300 	.word	0x40022300
 8002b94:	005f5e10 	.word	0x005f5e10
 8002b98:	00bebc20 	.word	0x00bebc20
 8002b9c:	017d7840 	.word	0x017d7840

08002ba0 <LL_ADC_IsEnabled>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <LL_ADC_IsEnabled+0x18>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <LL_ADC_IsEnabled+0x1a>
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d101      	bne.n	8002bde <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b09f      	sub	sp, #124	; 0x7c
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e080      	b.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a3d      	ldr	r2, [pc, #244]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d102      	bne.n	8002c2a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c24:	4b3c      	ldr	r3, [pc, #240]	; (8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	e001      	b.n	8002c2e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10b      	bne.n	8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e05f      	b.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff ffb9 	bl	8002bc6 <LL_ADC_REG_IsConversionOngoing>
 8002c54:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ffb3 	bl	8002bc6 <LL_ADC_REG_IsConversionOngoing>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d141      	bne.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d13e      	bne.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002c6e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d020      	beq.n	8002cba <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c88:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c8a:	4822      	ldr	r0, [pc, #136]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002c8c:	f7ff ff88 	bl	8002ba0 <LL_ADC_IsEnabled>
 8002c90:	4604      	mov	r4, r0
 8002c92:	4821      	ldr	r0, [pc, #132]	; (8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002c94:	f7ff ff84 	bl	8002ba0 <LL_ADC_IsEnabled>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4323      	orrs	r3, r4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d12e      	bne.n	8002cfe <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	6811      	ldr	r1, [r2, #0]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	6892      	ldr	r2, [r2, #8]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cb8:	e021      	b.n	8002cfe <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cc6:	4813      	ldr	r0, [pc, #76]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002cc8:	f7ff ff6a 	bl	8002ba0 <LL_ADC_IsEnabled>
 8002ccc:	4604      	mov	r4, r0
 8002cce:	4812      	ldr	r0, [pc, #72]	; (8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002cd0:	f7ff ff66 	bl	8002ba0 <LL_ADC_IsEnabled>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4323      	orrs	r3, r4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d110      	bne.n	8002cfe <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ce6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce8:	e009      	b.n	8002cfe <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	f043 0220 	orr.w	r2, r3, #32
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002cfc:	e000      	b.n	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cfe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d08:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	377c      	adds	r7, #124	; 0x7c
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd90      	pop	{r4, r7, pc}
 8002d14:	40022000 	.word	0x40022000
 8002d18:	40022100 	.word	0x40022100
 8002d1c:	40022300 	.word	0x40022300
 8002d20:	fffff0e0 	.word	0xfffff0e0

08002d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <__NVIC_SetPriorityGrouping+0x40>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d40:	4013      	ands	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d52:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <__NVIC_SetPriorityGrouping+0x40>)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	60d3      	str	r3, [r2, #12]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00
 8002d68:	05fa0000 	.word	0x05fa0000

08002d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <__NVIC_GetPriorityGrouping+0x18>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	f003 0307 	and.w	r3, r3, #7
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	db0b      	blt.n	8002db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	4907      	ldr	r1, [pc, #28]	; (8002dc0 <__NVIC_EnableIRQ+0x38>)
 8002da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2001      	movs	r0, #1
 8002daa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000e100 	.word	0xe000e100

08002dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	6039      	str	r1, [r7, #0]
 8002dce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	db0a      	blt.n	8002dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	490c      	ldr	r1, [pc, #48]	; (8002e10 <__NVIC_SetPriority+0x4c>)
 8002dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002de2:	0112      	lsls	r2, r2, #4
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	440b      	add	r3, r1
 8002de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dec:	e00a      	b.n	8002e04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	4908      	ldr	r1, [pc, #32]	; (8002e14 <__NVIC_SetPriority+0x50>)
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	3b04      	subs	r3, #4
 8002dfc:	0112      	lsls	r2, r2, #4
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	440b      	add	r3, r1
 8002e02:	761a      	strb	r2, [r3, #24]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000e100 	.word	0xe000e100
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	; 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f1c3 0307 	rsb	r3, r3, #7
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	bf28      	it	cs
 8002e36:	2304      	movcs	r3, #4
 8002e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d902      	bls.n	8002e48 <NVIC_EncodePriority+0x30>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3b03      	subs	r3, #3
 8002e46:	e000      	b.n	8002e4a <NVIC_EncodePriority+0x32>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e60:	f04f 31ff 	mov.w	r1, #4294967295
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	43d9      	mvns	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e70:	4313      	orrs	r3, r2
         );
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3724      	adds	r7, #36	; 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e90:	d301      	bcc.n	8002e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e92:	2301      	movs	r3, #1
 8002e94:	e00f      	b.n	8002eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <SysTick_Config+0x40>)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e9e:	210f      	movs	r1, #15
 8002ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea4:	f7ff ff8e 	bl	8002dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <SysTick_Config+0x40>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eae:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <SysTick_Config+0x40>)
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	e000e010 	.word	0xe000e010

08002ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff ff29 	bl	8002d24 <__NVIC_SetPriorityGrouping>
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b086      	sub	sp, #24
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee8:	f7ff ff40 	bl	8002d6c <__NVIC_GetPriorityGrouping>
 8002eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	6978      	ldr	r0, [r7, #20]
 8002ef4:	f7ff ff90 	bl	8002e18 <NVIC_EncodePriority>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002efe:	4611      	mov	r1, r2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff5f 	bl	8002dc4 <__NVIC_SetPriority>
}
 8002f06:	bf00      	nop
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	4603      	mov	r3, r0
 8002f16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff33 	bl	8002d88 <__NVIC_EnableIRQ>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff ffa4 	bl	8002e80 <SysTick_Config>
 8002f38:	4603      	mov	r3, r0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e014      	b.n	8002f7e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	791b      	ldrb	r3, [r3, #4]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d105      	bne.n	8002f6a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7fd ffcd 	bl	8000f04 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	795b      	ldrb	r3, [r3, #5]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_DAC_Start_DMA+0x1e>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e0ab      	b.n	80030fe <HAL_DAC_Start_DMA+0x176>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d12f      	bne.n	8003018 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	4a52      	ldr	r2, [pc, #328]	; (8003108 <HAL_DAC_Start_DMA+0x180>)
 8002fbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a51      	ldr	r2, [pc, #324]	; (800310c <HAL_DAC_Start_DMA+0x184>)
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4a50      	ldr	r2, [pc, #320]	; (8003110 <HAL_DAC_Start_DMA+0x188>)
 8002fce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fde:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d013      	beq.n	800300e <HAL_DAC_Start_DMA+0x86>
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d845      	bhi.n	8003078 <HAL_DAC_Start_DMA+0xf0>
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_DAC_Start_DMA+0x72>
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d005      	beq.n	8003004 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002ff8:	e03e      	b.n	8003078 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3308      	adds	r3, #8
 8003000:	613b      	str	r3, [r7, #16]
        break;
 8003002:	e03c      	b.n	800307e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	330c      	adds	r3, #12
 800300a:	613b      	str	r3, [r7, #16]
        break;
 800300c:	e037      	b.n	800307e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3310      	adds	r3, #16
 8003014:	613b      	str	r3, [r7, #16]
        break;
 8003016:	e032      	b.n	800307e <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4a3d      	ldr	r2, [pc, #244]	; (8003114 <HAL_DAC_Start_DMA+0x18c>)
 800301e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4a3c      	ldr	r2, [pc, #240]	; (8003118 <HAL_DAC_Start_DMA+0x190>)
 8003026:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4a3b      	ldr	r2, [pc, #236]	; (800311c <HAL_DAC_Start_DMA+0x194>)
 800302e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800303e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	2b08      	cmp	r3, #8
 8003044:	d013      	beq.n	800306e <HAL_DAC_Start_DMA+0xe6>
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	2b08      	cmp	r3, #8
 800304a:	d817      	bhi.n	800307c <HAL_DAC_Start_DMA+0xf4>
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_DAC_Start_DMA+0xd2>
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	2b04      	cmp	r3, #4
 8003056:	d005      	beq.n	8003064 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003058:	e010      	b.n	800307c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3314      	adds	r3, #20
 8003060:	613b      	str	r3, [r7, #16]
        break;
 8003062:	e00c      	b.n	800307e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3318      	adds	r3, #24
 800306a:	613b      	str	r3, [r7, #16]
        break;
 800306c:	e007      	b.n	800307e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	331c      	adds	r3, #28
 8003074:	613b      	str	r3, [r7, #16]
        break;
 8003076:	e002      	b.n	800307e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003078:	bf00      	nop
 800307a:	e000      	b.n	800307e <HAL_DAC_Start_DMA+0xf6>
        break;
 800307c:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d111      	bne.n	80030a8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003092:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6898      	ldr	r0, [r3, #8]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	f000 fda7 	bl	8003bf0 <HAL_DMA_Start_IT>
 80030a2:	4603      	mov	r3, r0
 80030a4:	75fb      	strb	r3, [r7, #23]
 80030a6:	e010      	b.n	80030ca <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80030b6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	68d8      	ldr	r0, [r3, #12]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	f000 fd95 	bl	8003bf0 <HAL_DMA_Start_IT>
 80030c6:	4603      	mov	r3, r0
 80030c8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80030d0:	7dfb      	ldrb	r3, [r7, #23]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10c      	bne.n	80030f0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6819      	ldr	r1, [r3, #0]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2201      	movs	r2, #1
 80030e4:	409a      	lsls	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	e005      	b.n	80030fc <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f043 0204 	orr.w	r2, r3, #4
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	080033bd 	.word	0x080033bd
 800310c:	080033df 	.word	0x080033df
 8003110:	080033fb 	.word	0x080033fb
 8003114:	08003465 	.word	0x08003465
 8003118:	08003487 	.word	0x08003487
 800311c:	080034a3 	.word	0x080034a3

08003120 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	795b      	ldrb	r3, [r3, #5]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_DAC_ConfigChannel+0x18>
 8003170:	2302      	movs	r3, #2
 8003172:	e11d      	b.n	80033b0 <HAL_DAC_ConfigChannel+0x254>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2202      	movs	r2, #2
 800317e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d174      	bne.n	8003272 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003188:	f7fe fc18 	bl	80019bc <HAL_GetTick>
 800318c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d134      	bne.n	80031fe <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003194:	e011      	b.n	80031ba <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003196:	f7fe fc11 	bl	80019bc <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d90a      	bls.n	80031ba <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f043 0208 	orr.w	r2, r3, #8
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2203      	movs	r2, #3
 80031b4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e0fa      	b.n	80033b0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c0:	4b7d      	ldr	r3, [pc, #500]	; (80033b8 <HAL_DAC_ConfigChannel+0x25c>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e6      	bne.n	8003196 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80031c8:	2001      	movs	r0, #1
 80031ca:	f7fe fc03 	bl	80019d4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	6992      	ldr	r2, [r2, #24]
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40
 80031d8:	e01e      	b.n	8003218 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031da:	f7fe fbef 	bl	80019bc <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d90a      	bls.n	80031fe <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f043 0208 	orr.w	r2, r3, #8
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2203      	movs	r2, #3
 80031f8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0d8      	b.n	80033b0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003204:	2b00      	cmp	r3, #0
 8003206:	dbe8      	blt.n	80031da <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003208:	2001      	movs	r0, #1
 800320a:	f7fe fbe3 	bl	80019d4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	6992      	ldr	r2, [r2, #24]
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	ea02 0103 	and.w	r1, r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	409a      	lsls	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	21ff      	movs	r1, #255	; 0xff
 8003254:	fa01 f303 	lsl.w	r3, r1, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	ea02 0103 	and.w	r1, r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6a1a      	ldr	r2, [r3, #32]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	409a      	lsls	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d11d      	bne.n	80032b6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	221f      	movs	r2, #31
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4013      	ands	r3, r2
 8003294:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032bc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2207      	movs	r2, #7
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4013      	ands	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d102      	bne.n	80032e0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	e00f      	b.n	8003300 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d102      	bne.n	80032ee <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80032e8:	2301      	movs	r3, #1
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	e008      	b.n	8003300 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80032f6:	2301      	movs	r3, #1
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	e001      	b.n	8003300 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4313      	orrs	r3, r2
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	400a      	ands	r2, r1
 8003346:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	f640 72fe 	movw	r2, #4094	; 0xffe
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4013      	ands	r3, r2
 8003364:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6819      	ldr	r1, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	22c0      	movs	r2, #192	; 0xc0
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43da      	mvns	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	400a      	ands	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3720      	adds	r7, #32
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20008000 	.word	0x20008000

080033bc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f7ff fea8 	bl	8003120 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	711a      	strb	r2, [r3, #4]
}
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7ff fea1 	bl	8003134 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80033f2:	bf00      	nop
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f043 0204 	orr.w	r2, r3, #4
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f7ff fe97 	bl	8003148 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	711a      	strb	r2, [r3, #4]
}
 8003420:	bf00      	nop
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f7ff ffd8 	bl	8003428 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	711a      	strb	r2, [r3, #4]
}
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f7ff ffd1 	bl	800343c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f043 0204 	orr.w	r2, r3, #4
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f7ff ffc7 	bl	8003450 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	711a      	strb	r2, [r3, #4]
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80034d8:	f7fe fa70 	bl	80019bc <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e37f      	b.n	8003be8 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a66      	ldr	r2, [pc, #408]	; (8003688 <HAL_DMA_Init+0x1b8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d04a      	beq.n	8003588 <HAL_DMA_Init+0xb8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a65      	ldr	r2, [pc, #404]	; (800368c <HAL_DMA_Init+0x1bc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d045      	beq.n	8003588 <HAL_DMA_Init+0xb8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a63      	ldr	r2, [pc, #396]	; (8003690 <HAL_DMA_Init+0x1c0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d040      	beq.n	8003588 <HAL_DMA_Init+0xb8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a62      	ldr	r2, [pc, #392]	; (8003694 <HAL_DMA_Init+0x1c4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d03b      	beq.n	8003588 <HAL_DMA_Init+0xb8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a60      	ldr	r2, [pc, #384]	; (8003698 <HAL_DMA_Init+0x1c8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d036      	beq.n	8003588 <HAL_DMA_Init+0xb8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a5f      	ldr	r2, [pc, #380]	; (800369c <HAL_DMA_Init+0x1cc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d031      	beq.n	8003588 <HAL_DMA_Init+0xb8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a5d      	ldr	r2, [pc, #372]	; (80036a0 <HAL_DMA_Init+0x1d0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d02c      	beq.n	8003588 <HAL_DMA_Init+0xb8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a5c      	ldr	r2, [pc, #368]	; (80036a4 <HAL_DMA_Init+0x1d4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d027      	beq.n	8003588 <HAL_DMA_Init+0xb8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a5a      	ldr	r2, [pc, #360]	; (80036a8 <HAL_DMA_Init+0x1d8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d022      	beq.n	8003588 <HAL_DMA_Init+0xb8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a59      	ldr	r2, [pc, #356]	; (80036ac <HAL_DMA_Init+0x1dc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d01d      	beq.n	8003588 <HAL_DMA_Init+0xb8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a57      	ldr	r2, [pc, #348]	; (80036b0 <HAL_DMA_Init+0x1e0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d018      	beq.n	8003588 <HAL_DMA_Init+0xb8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a56      	ldr	r2, [pc, #344]	; (80036b4 <HAL_DMA_Init+0x1e4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d013      	beq.n	8003588 <HAL_DMA_Init+0xb8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a54      	ldr	r2, [pc, #336]	; (80036b8 <HAL_DMA_Init+0x1e8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00e      	beq.n	8003588 <HAL_DMA_Init+0xb8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a53      	ldr	r2, [pc, #332]	; (80036bc <HAL_DMA_Init+0x1ec>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d009      	beq.n	8003588 <HAL_DMA_Init+0xb8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a51      	ldr	r2, [pc, #324]	; (80036c0 <HAL_DMA_Init+0x1f0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_DMA_Init+0xb8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a50      	ldr	r2, [pc, #320]	; (80036c4 <HAL_DMA_Init+0x1f4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d101      	bne.n	800358c <HAL_DMA_Init+0xbc>
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <HAL_DMA_Init+0xbe>
 800358c:	2300      	movs	r3, #0
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 813c 	beq.w	800380c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a37      	ldr	r2, [pc, #220]	; (8003688 <HAL_DMA_Init+0x1b8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d04a      	beq.n	8003644 <HAL_DMA_Init+0x174>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a36      	ldr	r2, [pc, #216]	; (800368c <HAL_DMA_Init+0x1bc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d045      	beq.n	8003644 <HAL_DMA_Init+0x174>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a34      	ldr	r2, [pc, #208]	; (8003690 <HAL_DMA_Init+0x1c0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d040      	beq.n	8003644 <HAL_DMA_Init+0x174>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a33      	ldr	r2, [pc, #204]	; (8003694 <HAL_DMA_Init+0x1c4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d03b      	beq.n	8003644 <HAL_DMA_Init+0x174>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a31      	ldr	r2, [pc, #196]	; (8003698 <HAL_DMA_Init+0x1c8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d036      	beq.n	8003644 <HAL_DMA_Init+0x174>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a30      	ldr	r2, [pc, #192]	; (800369c <HAL_DMA_Init+0x1cc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d031      	beq.n	8003644 <HAL_DMA_Init+0x174>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a2e      	ldr	r2, [pc, #184]	; (80036a0 <HAL_DMA_Init+0x1d0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d02c      	beq.n	8003644 <HAL_DMA_Init+0x174>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a2d      	ldr	r2, [pc, #180]	; (80036a4 <HAL_DMA_Init+0x1d4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d027      	beq.n	8003644 <HAL_DMA_Init+0x174>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2b      	ldr	r2, [pc, #172]	; (80036a8 <HAL_DMA_Init+0x1d8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d022      	beq.n	8003644 <HAL_DMA_Init+0x174>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a2a      	ldr	r2, [pc, #168]	; (80036ac <HAL_DMA_Init+0x1dc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d01d      	beq.n	8003644 <HAL_DMA_Init+0x174>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <HAL_DMA_Init+0x1e0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d018      	beq.n	8003644 <HAL_DMA_Init+0x174>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a27      	ldr	r2, [pc, #156]	; (80036b4 <HAL_DMA_Init+0x1e4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d013      	beq.n	8003644 <HAL_DMA_Init+0x174>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a25      	ldr	r2, [pc, #148]	; (80036b8 <HAL_DMA_Init+0x1e8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00e      	beq.n	8003644 <HAL_DMA_Init+0x174>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a24      	ldr	r2, [pc, #144]	; (80036bc <HAL_DMA_Init+0x1ec>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d009      	beq.n	8003644 <HAL_DMA_Init+0x174>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a22      	ldr	r2, [pc, #136]	; (80036c0 <HAL_DMA_Init+0x1f0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_DMA_Init+0x174>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <HAL_DMA_Init+0x1f4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d108      	bne.n	8003656 <HAL_DMA_Init+0x186>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0201 	bic.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e007      	b.n	8003666 <HAL_DMA_Init+0x196>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003666:	e02f      	b.n	80036c8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003668:	f7fe f9a8 	bl	80019bc <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b05      	cmp	r3, #5
 8003674:	d928      	bls.n	80036c8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2203      	movs	r2, #3
 8003680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e2af      	b.n	8003be8 <HAL_DMA_Init+0x718>
 8003688:	40020010 	.word	0x40020010
 800368c:	40020028 	.word	0x40020028
 8003690:	40020040 	.word	0x40020040
 8003694:	40020058 	.word	0x40020058
 8003698:	40020070 	.word	0x40020070
 800369c:	40020088 	.word	0x40020088
 80036a0:	400200a0 	.word	0x400200a0
 80036a4:	400200b8 	.word	0x400200b8
 80036a8:	40020410 	.word	0x40020410
 80036ac:	40020428 	.word	0x40020428
 80036b0:	40020440 	.word	0x40020440
 80036b4:	40020458 	.word	0x40020458
 80036b8:	40020470 	.word	0x40020470
 80036bc:	40020488 	.word	0x40020488
 80036c0:	400204a0 	.word	0x400204a0
 80036c4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1c8      	bne.n	8003668 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4b73      	ldr	r3, [pc, #460]	; (80038b0 <HAL_DMA_Init+0x3e0>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80036ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003706:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	2b04      	cmp	r3, #4
 800371a:	d107      	bne.n	800372c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	4313      	orrs	r3, r2
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b28      	cmp	r3, #40	; 0x28
 8003732:	d903      	bls.n	800373c <HAL_DMA_Init+0x26c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b2e      	cmp	r3, #46	; 0x2e
 800373a:	d91f      	bls.n	800377c <HAL_DMA_Init+0x2ac>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b3e      	cmp	r3, #62	; 0x3e
 8003742:	d903      	bls.n	800374c <HAL_DMA_Init+0x27c>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b42      	cmp	r3, #66	; 0x42
 800374a:	d917      	bls.n	800377c <HAL_DMA_Init+0x2ac>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b46      	cmp	r3, #70	; 0x46
 8003752:	d903      	bls.n	800375c <HAL_DMA_Init+0x28c>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b48      	cmp	r3, #72	; 0x48
 800375a:	d90f      	bls.n	800377c <HAL_DMA_Init+0x2ac>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b4e      	cmp	r3, #78	; 0x4e
 8003762:	d903      	bls.n	800376c <HAL_DMA_Init+0x29c>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b52      	cmp	r3, #82	; 0x52
 800376a:	d907      	bls.n	800377c <HAL_DMA_Init+0x2ac>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b73      	cmp	r3, #115	; 0x73
 8003772:	d905      	bls.n	8003780 <HAL_DMA_Init+0x2b0>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b77      	cmp	r3, #119	; 0x77
 800377a:	d801      	bhi.n	8003780 <HAL_DMA_Init+0x2b0>
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <HAL_DMA_Init+0x2b2>
 8003780:	2300      	movs	r3, #0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800378c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f023 0307 	bic.w	r3, r3, #7
 80037a4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d117      	bne.n	80037e8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00e      	beq.n	80037e8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f001 fe72 	bl	80054b4 <DMA_CheckFifoParam>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d008      	beq.n	80037e8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2240      	movs	r2, #64	; 0x40
 80037da:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e1ff      	b.n	8003be8 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f001 fdad 	bl	8005350 <DMA_CalcBaseAndBitshift>
 80037f6:	4603      	mov	r3, r0
 80037f8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	223f      	movs	r2, #63	; 0x3f
 8003804:	409a      	lsls	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	e0fe      	b.n	8003a0a <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a28      	ldr	r2, [pc, #160]	; (80038b4 <HAL_DMA_Init+0x3e4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d04a      	beq.n	80038ac <HAL_DMA_Init+0x3dc>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a27      	ldr	r2, [pc, #156]	; (80038b8 <HAL_DMA_Init+0x3e8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d045      	beq.n	80038ac <HAL_DMA_Init+0x3dc>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a25      	ldr	r2, [pc, #148]	; (80038bc <HAL_DMA_Init+0x3ec>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d040      	beq.n	80038ac <HAL_DMA_Init+0x3dc>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a24      	ldr	r2, [pc, #144]	; (80038c0 <HAL_DMA_Init+0x3f0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d03b      	beq.n	80038ac <HAL_DMA_Init+0x3dc>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a22      	ldr	r2, [pc, #136]	; (80038c4 <HAL_DMA_Init+0x3f4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d036      	beq.n	80038ac <HAL_DMA_Init+0x3dc>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a21      	ldr	r2, [pc, #132]	; (80038c8 <HAL_DMA_Init+0x3f8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d031      	beq.n	80038ac <HAL_DMA_Init+0x3dc>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <HAL_DMA_Init+0x3fc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d02c      	beq.n	80038ac <HAL_DMA_Init+0x3dc>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <HAL_DMA_Init+0x400>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d027      	beq.n	80038ac <HAL_DMA_Init+0x3dc>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <HAL_DMA_Init+0x404>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d022      	beq.n	80038ac <HAL_DMA_Init+0x3dc>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1b      	ldr	r2, [pc, #108]	; (80038d8 <HAL_DMA_Init+0x408>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d01d      	beq.n	80038ac <HAL_DMA_Init+0x3dc>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a19      	ldr	r2, [pc, #100]	; (80038dc <HAL_DMA_Init+0x40c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d018      	beq.n	80038ac <HAL_DMA_Init+0x3dc>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <HAL_DMA_Init+0x410>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d013      	beq.n	80038ac <HAL_DMA_Init+0x3dc>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <HAL_DMA_Init+0x414>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00e      	beq.n	80038ac <HAL_DMA_Init+0x3dc>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <HAL_DMA_Init+0x418>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d009      	beq.n	80038ac <HAL_DMA_Init+0x3dc>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a13      	ldr	r2, [pc, #76]	; (80038ec <HAL_DMA_Init+0x41c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <HAL_DMA_Init+0x3dc>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a12      	ldr	r2, [pc, #72]	; (80038f0 <HAL_DMA_Init+0x420>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d123      	bne.n	80038f4 <HAL_DMA_Init+0x424>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e022      	b.n	80038f6 <HAL_DMA_Init+0x426>
 80038b0:	fe10803f 	.word	0xfe10803f
 80038b4:	48022c08 	.word	0x48022c08
 80038b8:	48022c1c 	.word	0x48022c1c
 80038bc:	48022c30 	.word	0x48022c30
 80038c0:	48022c44 	.word	0x48022c44
 80038c4:	48022c58 	.word	0x48022c58
 80038c8:	48022c6c 	.word	0x48022c6c
 80038cc:	48022c80 	.word	0x48022c80
 80038d0:	48022c94 	.word	0x48022c94
 80038d4:	58025408 	.word	0x58025408
 80038d8:	5802541c 	.word	0x5802541c
 80038dc:	58025430 	.word	0x58025430
 80038e0:	58025444 	.word	0x58025444
 80038e4:	58025458 	.word	0x58025458
 80038e8:	5802546c 	.word	0x5802546c
 80038ec:	58025480 	.word	0x58025480
 80038f0:	58025494 	.word	0x58025494
 80038f4:	2300      	movs	r3, #0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d07e      	beq.n	80039f8 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a80      	ldr	r2, [pc, #512]	; (8003b00 <HAL_DMA_Init+0x630>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d021      	beq.n	8003948 <HAL_DMA_Init+0x478>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a7e      	ldr	r2, [pc, #504]	; (8003b04 <HAL_DMA_Init+0x634>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d01c      	beq.n	8003948 <HAL_DMA_Init+0x478>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a7d      	ldr	r2, [pc, #500]	; (8003b08 <HAL_DMA_Init+0x638>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d017      	beq.n	8003948 <HAL_DMA_Init+0x478>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a7b      	ldr	r2, [pc, #492]	; (8003b0c <HAL_DMA_Init+0x63c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d012      	beq.n	8003948 <HAL_DMA_Init+0x478>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a7a      	ldr	r2, [pc, #488]	; (8003b10 <HAL_DMA_Init+0x640>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00d      	beq.n	8003948 <HAL_DMA_Init+0x478>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a78      	ldr	r2, [pc, #480]	; (8003b14 <HAL_DMA_Init+0x644>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d008      	beq.n	8003948 <HAL_DMA_Init+0x478>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a77      	ldr	r2, [pc, #476]	; (8003b18 <HAL_DMA_Init+0x648>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d003      	beq.n	8003948 <HAL_DMA_Init+0x478>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a75      	ldr	r2, [pc, #468]	; (8003b1c <HAL_DMA_Init+0x64c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4b6e      	ldr	r3, [pc, #440]	; (8003b20 <HAL_DMA_Init+0x650>)
 8003966:	4013      	ands	r3, r2
 8003968:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b40      	cmp	r3, #64	; 0x40
 8003970:	d008      	beq.n	8003984 <HAL_DMA_Init+0x4b4>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b80      	cmp	r3, #128	; 0x80
 8003978:	d102      	bne.n	8003980 <HAL_DMA_Init+0x4b0>
 800397a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800397e:	e002      	b.n	8003986 <HAL_DMA_Init+0x4b6>
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_DMA_Init+0x4b6>
 8003984:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68d2      	ldr	r2, [r2, #12]
 800398a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800398c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003994:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800399c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	4b56      	ldr	r3, [pc, #344]	; (8003b24 <HAL_DMA_Init+0x654>)
 80039cc:	4413      	add	r3, r2
 80039ce:	4a56      	ldr	r2, [pc, #344]	; (8003b28 <HAL_DMA_Init+0x658>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	009a      	lsls	r2, r3, #2
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f001 fcb7 	bl	8005350 <DMA_CalcBaseAndBitshift>
 80039e2:	4603      	mov	r3, r0
 80039e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2201      	movs	r2, #1
 80039f0:	409a      	lsls	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	e008      	b.n	8003a0a <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2240      	movs	r2, #64	; 0x40
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2203      	movs	r2, #3
 8003a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e0ee      	b.n	8003be8 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a47      	ldr	r2, [pc, #284]	; (8003b2c <HAL_DMA_Init+0x65c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d072      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a45      	ldr	r2, [pc, #276]	; (8003b30 <HAL_DMA_Init+0x660>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d06d      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a44      	ldr	r2, [pc, #272]	; (8003b34 <HAL_DMA_Init+0x664>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d068      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a42      	ldr	r2, [pc, #264]	; (8003b38 <HAL_DMA_Init+0x668>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d063      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a41      	ldr	r2, [pc, #260]	; (8003b3c <HAL_DMA_Init+0x66c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d05e      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a3f      	ldr	r2, [pc, #252]	; (8003b40 <HAL_DMA_Init+0x670>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d059      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a3e      	ldr	r2, [pc, #248]	; (8003b44 <HAL_DMA_Init+0x674>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d054      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a3c      	ldr	r2, [pc, #240]	; (8003b48 <HAL_DMA_Init+0x678>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d04f      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a3b      	ldr	r2, [pc, #236]	; (8003b4c <HAL_DMA_Init+0x67c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d04a      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a39      	ldr	r2, [pc, #228]	; (8003b50 <HAL_DMA_Init+0x680>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d045      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a38      	ldr	r2, [pc, #224]	; (8003b54 <HAL_DMA_Init+0x684>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d040      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a36      	ldr	r2, [pc, #216]	; (8003b58 <HAL_DMA_Init+0x688>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d03b      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a35      	ldr	r2, [pc, #212]	; (8003b5c <HAL_DMA_Init+0x68c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d036      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a33      	ldr	r2, [pc, #204]	; (8003b60 <HAL_DMA_Init+0x690>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d031      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a32      	ldr	r2, [pc, #200]	; (8003b64 <HAL_DMA_Init+0x694>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d02c      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a30      	ldr	r2, [pc, #192]	; (8003b68 <HAL_DMA_Init+0x698>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d027      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <HAL_DMA_Init+0x630>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d022      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a12      	ldr	r2, [pc, #72]	; (8003b04 <HAL_DMA_Init+0x634>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d01d      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a11      	ldr	r2, [pc, #68]	; (8003b08 <HAL_DMA_Init+0x638>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d018      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a0f      	ldr	r2, [pc, #60]	; (8003b0c <HAL_DMA_Init+0x63c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a0e      	ldr	r2, [pc, #56]	; (8003b10 <HAL_DMA_Init+0x640>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00e      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a0c      	ldr	r2, [pc, #48]	; (8003b14 <HAL_DMA_Init+0x644>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d009      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a0b      	ldr	r2, [pc, #44]	; (8003b18 <HAL_DMA_Init+0x648>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d004      	beq.n	8003afa <HAL_DMA_Init+0x62a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <HAL_DMA_Init+0x64c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d138      	bne.n	8003b6c <HAL_DMA_Init+0x69c>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e037      	b.n	8003b6e <HAL_DMA_Init+0x69e>
 8003afe:	bf00      	nop
 8003b00:	58025408 	.word	0x58025408
 8003b04:	5802541c 	.word	0x5802541c
 8003b08:	58025430 	.word	0x58025430
 8003b0c:	58025444 	.word	0x58025444
 8003b10:	58025458 	.word	0x58025458
 8003b14:	5802546c 	.word	0x5802546c
 8003b18:	58025480 	.word	0x58025480
 8003b1c:	58025494 	.word	0x58025494
 8003b20:	fffe000f 	.word	0xfffe000f
 8003b24:	a7fdabf8 	.word	0xa7fdabf8
 8003b28:	cccccccd 	.word	0xcccccccd
 8003b2c:	40020010 	.word	0x40020010
 8003b30:	40020028 	.word	0x40020028
 8003b34:	40020040 	.word	0x40020040
 8003b38:	40020058 	.word	0x40020058
 8003b3c:	40020070 	.word	0x40020070
 8003b40:	40020088 	.word	0x40020088
 8003b44:	400200a0 	.word	0x400200a0
 8003b48:	400200b8 	.word	0x400200b8
 8003b4c:	40020410 	.word	0x40020410
 8003b50:	40020428 	.word	0x40020428
 8003b54:	40020440 	.word	0x40020440
 8003b58:	40020458 	.word	0x40020458
 8003b5c:	40020470 	.word	0x40020470
 8003b60:	40020488 	.word	0x40020488
 8003b64:	400204a0 	.word	0x400204a0
 8003b68:	400204b8 	.word	0x400204b8
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d032      	beq.n	8003bd8 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f001 fd1a 	bl	80055ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b80      	cmp	r3, #128	; 0x80
 8003b7e:	d102      	bne.n	8003b86 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b9a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d010      	beq.n	8003bc6 <HAL_DMA_Init+0x6f6>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d80c      	bhi.n	8003bc6 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f001 fd97 	bl	80056e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003bc2:	605a      	str	r2, [r3, #4]
 8003bc4:	e008      	b.n	8003bd8 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e226      	b.n	800405a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_DMA_Start_IT+0x2a>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e21f      	b.n	800405a <HAL_DMA_Start_IT+0x46a>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	f040 820a 	bne.w	8004044 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a68      	ldr	r2, [pc, #416]	; (8003de4 <HAL_DMA_Start_IT+0x1f4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d04a      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a66      	ldr	r2, [pc, #408]	; (8003de8 <HAL_DMA_Start_IT+0x1f8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d045      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a65      	ldr	r2, [pc, #404]	; (8003dec <HAL_DMA_Start_IT+0x1fc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d040      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a63      	ldr	r2, [pc, #396]	; (8003df0 <HAL_DMA_Start_IT+0x200>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d03b      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a62      	ldr	r2, [pc, #392]	; (8003df4 <HAL_DMA_Start_IT+0x204>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d036      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a60      	ldr	r2, [pc, #384]	; (8003df8 <HAL_DMA_Start_IT+0x208>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d031      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a5f      	ldr	r2, [pc, #380]	; (8003dfc <HAL_DMA_Start_IT+0x20c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d02c      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a5d      	ldr	r2, [pc, #372]	; (8003e00 <HAL_DMA_Start_IT+0x210>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d027      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a5c      	ldr	r2, [pc, #368]	; (8003e04 <HAL_DMA_Start_IT+0x214>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d022      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a5a      	ldr	r2, [pc, #360]	; (8003e08 <HAL_DMA_Start_IT+0x218>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01d      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a59      	ldr	r2, [pc, #356]	; (8003e0c <HAL_DMA_Start_IT+0x21c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d018      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a57      	ldr	r2, [pc, #348]	; (8003e10 <HAL_DMA_Start_IT+0x220>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a56      	ldr	r2, [pc, #344]	; (8003e14 <HAL_DMA_Start_IT+0x224>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00e      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a54      	ldr	r2, [pc, #336]	; (8003e18 <HAL_DMA_Start_IT+0x228>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a53      	ldr	r2, [pc, #332]	; (8003e1c <HAL_DMA_Start_IT+0x22c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a51      	ldr	r2, [pc, #324]	; (8003e20 <HAL_DMA_Start_IT+0x230>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d108      	bne.n	8003cf0 <HAL_DMA_Start_IT+0x100>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0201 	bic.w	r2, r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e007      	b.n	8003d00 <HAL_DMA_Start_IT+0x110>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f001 f93e 	bl	8004f88 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a34      	ldr	r2, [pc, #208]	; (8003de4 <HAL_DMA_Start_IT+0x1f4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d04a      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a33      	ldr	r2, [pc, #204]	; (8003de8 <HAL_DMA_Start_IT+0x1f8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d045      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a31      	ldr	r2, [pc, #196]	; (8003dec <HAL_DMA_Start_IT+0x1fc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d040      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a30      	ldr	r2, [pc, #192]	; (8003df0 <HAL_DMA_Start_IT+0x200>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d03b      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a2e      	ldr	r2, [pc, #184]	; (8003df4 <HAL_DMA_Start_IT+0x204>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d036      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a2d      	ldr	r2, [pc, #180]	; (8003df8 <HAL_DMA_Start_IT+0x208>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d031      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a2b      	ldr	r2, [pc, #172]	; (8003dfc <HAL_DMA_Start_IT+0x20c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d02c      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2a      	ldr	r2, [pc, #168]	; (8003e00 <HAL_DMA_Start_IT+0x210>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d027      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a28      	ldr	r2, [pc, #160]	; (8003e04 <HAL_DMA_Start_IT+0x214>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d022      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a27      	ldr	r2, [pc, #156]	; (8003e08 <HAL_DMA_Start_IT+0x218>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d01d      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a25      	ldr	r2, [pc, #148]	; (8003e0c <HAL_DMA_Start_IT+0x21c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d018      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a24      	ldr	r2, [pc, #144]	; (8003e10 <HAL_DMA_Start_IT+0x220>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d013      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a22      	ldr	r2, [pc, #136]	; (8003e14 <HAL_DMA_Start_IT+0x224>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00e      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a21      	ldr	r2, [pc, #132]	; (8003e18 <HAL_DMA_Start_IT+0x228>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d009      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1f      	ldr	r2, [pc, #124]	; (8003e1c <HAL_DMA_Start_IT+0x22c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d004      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1e      	ldr	r2, [pc, #120]	; (8003e20 <HAL_DMA_Start_IT+0x230>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d101      	bne.n	8003db0 <HAL_DMA_Start_IT+0x1c0>
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <HAL_DMA_Start_IT+0x1c2>
 8003db0:	2300      	movs	r3, #0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d036      	beq.n	8003e24 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f023 021e 	bic.w	r2, r3, #30
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0216 	orr.w	r2, r2, #22
 8003dc8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d03e      	beq.n	8003e50 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0208 	orr.w	r2, r2, #8
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e035      	b.n	8003e50 <HAL_DMA_Start_IT+0x260>
 8003de4:	40020010 	.word	0x40020010
 8003de8:	40020028 	.word	0x40020028
 8003dec:	40020040 	.word	0x40020040
 8003df0:	40020058 	.word	0x40020058
 8003df4:	40020070 	.word	0x40020070
 8003df8:	40020088 	.word	0x40020088
 8003dfc:	400200a0 	.word	0x400200a0
 8003e00:	400200b8 	.word	0x400200b8
 8003e04:	40020410 	.word	0x40020410
 8003e08:	40020428 	.word	0x40020428
 8003e0c:	40020440 	.word	0x40020440
 8003e10:	40020458 	.word	0x40020458
 8003e14:	40020470 	.word	0x40020470
 8003e18:	40020488 	.word	0x40020488
 8003e1c:	400204a0 	.word	0x400204a0
 8003e20:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 020e 	bic.w	r2, r3, #14
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 020a 	orr.w	r2, r2, #10
 8003e36:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d007      	beq.n	8003e50 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0204 	orr.w	r2, r2, #4
 8003e4e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a83      	ldr	r2, [pc, #524]	; (8004064 <HAL_DMA_Start_IT+0x474>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d072      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a82      	ldr	r2, [pc, #520]	; (8004068 <HAL_DMA_Start_IT+0x478>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d06d      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a80      	ldr	r2, [pc, #512]	; (800406c <HAL_DMA_Start_IT+0x47c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d068      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a7f      	ldr	r2, [pc, #508]	; (8004070 <HAL_DMA_Start_IT+0x480>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d063      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a7d      	ldr	r2, [pc, #500]	; (8004074 <HAL_DMA_Start_IT+0x484>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d05e      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a7c      	ldr	r2, [pc, #496]	; (8004078 <HAL_DMA_Start_IT+0x488>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d059      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a7a      	ldr	r2, [pc, #488]	; (800407c <HAL_DMA_Start_IT+0x48c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d054      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a79      	ldr	r2, [pc, #484]	; (8004080 <HAL_DMA_Start_IT+0x490>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d04f      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a77      	ldr	r2, [pc, #476]	; (8004084 <HAL_DMA_Start_IT+0x494>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d04a      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a76      	ldr	r2, [pc, #472]	; (8004088 <HAL_DMA_Start_IT+0x498>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d045      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a74      	ldr	r2, [pc, #464]	; (800408c <HAL_DMA_Start_IT+0x49c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d040      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a73      	ldr	r2, [pc, #460]	; (8004090 <HAL_DMA_Start_IT+0x4a0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d03b      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a71      	ldr	r2, [pc, #452]	; (8004094 <HAL_DMA_Start_IT+0x4a4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d036      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a70      	ldr	r2, [pc, #448]	; (8004098 <HAL_DMA_Start_IT+0x4a8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d031      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a6e      	ldr	r2, [pc, #440]	; (800409c <HAL_DMA_Start_IT+0x4ac>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d02c      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a6d      	ldr	r2, [pc, #436]	; (80040a0 <HAL_DMA_Start_IT+0x4b0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d027      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a6b      	ldr	r2, [pc, #428]	; (80040a4 <HAL_DMA_Start_IT+0x4b4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d022      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a6a      	ldr	r2, [pc, #424]	; (80040a8 <HAL_DMA_Start_IT+0x4b8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d01d      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a68      	ldr	r2, [pc, #416]	; (80040ac <HAL_DMA_Start_IT+0x4bc>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d018      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a67      	ldr	r2, [pc, #412]	; (80040b0 <HAL_DMA_Start_IT+0x4c0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d013      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a65      	ldr	r2, [pc, #404]	; (80040b4 <HAL_DMA_Start_IT+0x4c4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00e      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a64      	ldr	r2, [pc, #400]	; (80040b8 <HAL_DMA_Start_IT+0x4c8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d009      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a62      	ldr	r2, [pc, #392]	; (80040bc <HAL_DMA_Start_IT+0x4cc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a61      	ldr	r2, [pc, #388]	; (80040c0 <HAL_DMA_Start_IT+0x4d0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d101      	bne.n	8003f44 <HAL_DMA_Start_IT+0x354>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <HAL_DMA_Start_IT+0x356>
 8003f44:	2300      	movs	r3, #0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01a      	beq.n	8003f80 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f66:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f7e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a37      	ldr	r2, [pc, #220]	; (8004064 <HAL_DMA_Start_IT+0x474>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d04a      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a36      	ldr	r2, [pc, #216]	; (8004068 <HAL_DMA_Start_IT+0x478>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d045      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a34      	ldr	r2, [pc, #208]	; (800406c <HAL_DMA_Start_IT+0x47c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d040      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a33      	ldr	r2, [pc, #204]	; (8004070 <HAL_DMA_Start_IT+0x480>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d03b      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a31      	ldr	r2, [pc, #196]	; (8004074 <HAL_DMA_Start_IT+0x484>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d036      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a30      	ldr	r2, [pc, #192]	; (8004078 <HAL_DMA_Start_IT+0x488>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d031      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a2e      	ldr	r2, [pc, #184]	; (800407c <HAL_DMA_Start_IT+0x48c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d02c      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2d      	ldr	r2, [pc, #180]	; (8004080 <HAL_DMA_Start_IT+0x490>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d027      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a2b      	ldr	r2, [pc, #172]	; (8004084 <HAL_DMA_Start_IT+0x494>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d022      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a2a      	ldr	r2, [pc, #168]	; (8004088 <HAL_DMA_Start_IT+0x498>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d01d      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a28      	ldr	r2, [pc, #160]	; (800408c <HAL_DMA_Start_IT+0x49c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d018      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a27      	ldr	r2, [pc, #156]	; (8004090 <HAL_DMA_Start_IT+0x4a0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d013      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a25      	ldr	r2, [pc, #148]	; (8004094 <HAL_DMA_Start_IT+0x4a4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00e      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a24      	ldr	r2, [pc, #144]	; (8004098 <HAL_DMA_Start_IT+0x4a8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d009      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a22      	ldr	r2, [pc, #136]	; (800409c <HAL_DMA_Start_IT+0x4ac>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d004      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a21      	ldr	r2, [pc, #132]	; (80040a0 <HAL_DMA_Start_IT+0x4b0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d108      	bne.n	8004032 <HAL_DMA_Start_IT+0x442>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e012      	b.n	8004058 <HAL_DMA_Start_IT+0x468>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e009      	b.n	8004058 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800404a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004058:	7dfb      	ldrb	r3, [r7, #23]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40020010 	.word	0x40020010
 8004068:	40020028 	.word	0x40020028
 800406c:	40020040 	.word	0x40020040
 8004070:	40020058 	.word	0x40020058
 8004074:	40020070 	.word	0x40020070
 8004078:	40020088 	.word	0x40020088
 800407c:	400200a0 	.word	0x400200a0
 8004080:	400200b8 	.word	0x400200b8
 8004084:	40020410 	.word	0x40020410
 8004088:	40020428 	.word	0x40020428
 800408c:	40020440 	.word	0x40020440
 8004090:	40020458 	.word	0x40020458
 8004094:	40020470 	.word	0x40020470
 8004098:	40020488 	.word	0x40020488
 800409c:	400204a0 	.word	0x400204a0
 80040a0:	400204b8 	.word	0x400204b8
 80040a4:	58025408 	.word	0x58025408
 80040a8:	5802541c 	.word	0x5802541c
 80040ac:	58025430 	.word	0x58025430
 80040b0:	58025444 	.word	0x58025444
 80040b4:	58025458 	.word	0x58025458
 80040b8:	5802546c 	.word	0x5802546c
 80040bc:	58025480 	.word	0x58025480
 80040c0:	58025494 	.word	0x58025494

080040c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08a      	sub	sp, #40	; 0x28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040d0:	4b67      	ldr	r3, [pc, #412]	; (8004270 <HAL_DMA_IRQHandler+0x1ac>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a67      	ldr	r2, [pc, #412]	; (8004274 <HAL_DMA_IRQHandler+0x1b0>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	0a9b      	lsrs	r3, r3, #10
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a5f      	ldr	r2, [pc, #380]	; (8004278 <HAL_DMA_IRQHandler+0x1b4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d04a      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5d      	ldr	r2, [pc, #372]	; (800427c <HAL_DMA_IRQHandler+0x1b8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d045      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a5c      	ldr	r2, [pc, #368]	; (8004280 <HAL_DMA_IRQHandler+0x1bc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d040      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a5a      	ldr	r2, [pc, #360]	; (8004284 <HAL_DMA_IRQHandler+0x1c0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d03b      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a59      	ldr	r2, [pc, #356]	; (8004288 <HAL_DMA_IRQHandler+0x1c4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d036      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a57      	ldr	r2, [pc, #348]	; (800428c <HAL_DMA_IRQHandler+0x1c8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d031      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a56      	ldr	r2, [pc, #344]	; (8004290 <HAL_DMA_IRQHandler+0x1cc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d02c      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a54      	ldr	r2, [pc, #336]	; (8004294 <HAL_DMA_IRQHandler+0x1d0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d027      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a53      	ldr	r2, [pc, #332]	; (8004298 <HAL_DMA_IRQHandler+0x1d4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d022      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a51      	ldr	r2, [pc, #324]	; (800429c <HAL_DMA_IRQHandler+0x1d8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01d      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a50      	ldr	r2, [pc, #320]	; (80042a0 <HAL_DMA_IRQHandler+0x1dc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d018      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a4e      	ldr	r2, [pc, #312]	; (80042a4 <HAL_DMA_IRQHandler+0x1e0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a4d      	ldr	r2, [pc, #308]	; (80042a8 <HAL_DMA_IRQHandler+0x1e4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00e      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a4b      	ldr	r2, [pc, #300]	; (80042ac <HAL_DMA_IRQHandler+0x1e8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d009      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a4a      	ldr	r2, [pc, #296]	; (80042b0 <HAL_DMA_IRQHandler+0x1ec>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d004      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a48      	ldr	r2, [pc, #288]	; (80042b4 <HAL_DMA_IRQHandler+0x1f0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <HAL_DMA_IRQHandler+0xd6>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <HAL_DMA_IRQHandler+0xd8>
 800419a:	2300      	movs	r3, #0
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 842b 	beq.w	80049f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a6:	f003 031f 	and.w	r3, r3, #31
 80041aa:	2208      	movs	r2, #8
 80041ac:	409a      	lsls	r2, r3
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 80a2 	beq.w	80042fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a2e      	ldr	r2, [pc, #184]	; (8004278 <HAL_DMA_IRQHandler+0x1b4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d04a      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a2d      	ldr	r2, [pc, #180]	; (800427c <HAL_DMA_IRQHandler+0x1b8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d045      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a2b      	ldr	r2, [pc, #172]	; (8004280 <HAL_DMA_IRQHandler+0x1bc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d040      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <HAL_DMA_IRQHandler+0x1c0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d03b      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a28      	ldr	r2, [pc, #160]	; (8004288 <HAL_DMA_IRQHandler+0x1c4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d036      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a27      	ldr	r2, [pc, #156]	; (800428c <HAL_DMA_IRQHandler+0x1c8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d031      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a25      	ldr	r2, [pc, #148]	; (8004290 <HAL_DMA_IRQHandler+0x1cc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d02c      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a24      	ldr	r2, [pc, #144]	; (8004294 <HAL_DMA_IRQHandler+0x1d0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d027      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a22      	ldr	r2, [pc, #136]	; (8004298 <HAL_DMA_IRQHandler+0x1d4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d022      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a21      	ldr	r2, [pc, #132]	; (800429c <HAL_DMA_IRQHandler+0x1d8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d01d      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1f      	ldr	r2, [pc, #124]	; (80042a0 <HAL_DMA_IRQHandler+0x1dc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d018      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <HAL_DMA_IRQHandler+0x1e0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d013      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <HAL_DMA_IRQHandler+0x1e4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00e      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a1b      	ldr	r2, [pc, #108]	; (80042ac <HAL_DMA_IRQHandler+0x1e8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d009      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a19      	ldr	r2, [pc, #100]	; (80042b0 <HAL_DMA_IRQHandler+0x1ec>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d004      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a18      	ldr	r2, [pc, #96]	; (80042b4 <HAL_DMA_IRQHandler+0x1f0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d12f      	bne.n	80042b8 <HAL_DMA_IRQHandler+0x1f4>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b00      	cmp	r3, #0
 8004264:	bf14      	ite	ne
 8004266:	2301      	movne	r3, #1
 8004268:	2300      	moveq	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	e02e      	b.n	80042cc <HAL_DMA_IRQHandler+0x208>
 800426e:	bf00      	nop
 8004270:	24000000 	.word	0x24000000
 8004274:	1b4e81b5 	.word	0x1b4e81b5
 8004278:	40020010 	.word	0x40020010
 800427c:	40020028 	.word	0x40020028
 8004280:	40020040 	.word	0x40020040
 8004284:	40020058 	.word	0x40020058
 8004288:	40020070 	.word	0x40020070
 800428c:	40020088 	.word	0x40020088
 8004290:	400200a0 	.word	0x400200a0
 8004294:	400200b8 	.word	0x400200b8
 8004298:	40020410 	.word	0x40020410
 800429c:	40020428 	.word	0x40020428
 80042a0:	40020440 	.word	0x40020440
 80042a4:	40020458 	.word	0x40020458
 80042a8:	40020470 	.word	0x40020470
 80042ac:	40020488 	.word	0x40020488
 80042b0:	400204a0 	.word	0x400204a0
 80042b4:	400204b8 	.word	0x400204b8
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	bf14      	ite	ne
 80042c6:	2301      	movne	r3, #1
 80042c8:	2300      	moveq	r3, #0
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d015      	beq.n	80042fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0204 	bic.w	r2, r2, #4
 80042de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e4:	f003 031f 	and.w	r3, r3, #31
 80042e8:	2208      	movs	r2, #8
 80042ea:	409a      	lsls	r2, r3
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f4:	f043 0201 	orr.w	r2, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	fa22 f303 	lsr.w	r3, r2, r3
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d06e      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a69      	ldr	r2, [pc, #420]	; (80044bc <HAL_DMA_IRQHandler+0x3f8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d04a      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a67      	ldr	r2, [pc, #412]	; (80044c0 <HAL_DMA_IRQHandler+0x3fc>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d045      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a66      	ldr	r2, [pc, #408]	; (80044c4 <HAL_DMA_IRQHandler+0x400>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d040      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a64      	ldr	r2, [pc, #400]	; (80044c8 <HAL_DMA_IRQHandler+0x404>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d03b      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a63      	ldr	r2, [pc, #396]	; (80044cc <HAL_DMA_IRQHandler+0x408>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d036      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a61      	ldr	r2, [pc, #388]	; (80044d0 <HAL_DMA_IRQHandler+0x40c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d031      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a60      	ldr	r2, [pc, #384]	; (80044d4 <HAL_DMA_IRQHandler+0x410>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d02c      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a5e      	ldr	r2, [pc, #376]	; (80044d8 <HAL_DMA_IRQHandler+0x414>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d027      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a5d      	ldr	r2, [pc, #372]	; (80044dc <HAL_DMA_IRQHandler+0x418>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d022      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a5b      	ldr	r2, [pc, #364]	; (80044e0 <HAL_DMA_IRQHandler+0x41c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d01d      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a5a      	ldr	r2, [pc, #360]	; (80044e4 <HAL_DMA_IRQHandler+0x420>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d018      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a58      	ldr	r2, [pc, #352]	; (80044e8 <HAL_DMA_IRQHandler+0x424>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d013      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a57      	ldr	r2, [pc, #348]	; (80044ec <HAL_DMA_IRQHandler+0x428>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00e      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a55      	ldr	r2, [pc, #340]	; (80044f0 <HAL_DMA_IRQHandler+0x42c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d009      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a54      	ldr	r2, [pc, #336]	; (80044f4 <HAL_DMA_IRQHandler+0x430>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d004      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a52      	ldr	r2, [pc, #328]	; (80044f8 <HAL_DMA_IRQHandler+0x434>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d10a      	bne.n	80043c8 <HAL_DMA_IRQHandler+0x304>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf14      	ite	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	2300      	moveq	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e003      	b.n	80043d0 <HAL_DMA_IRQHandler+0x30c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2300      	movs	r3, #0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00d      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	2201      	movs	r2, #1
 80043de:	409a      	lsls	r2, r3
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e8:	f043 0202 	orr.w	r2, r3, #2
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	2204      	movs	r2, #4
 80043fa:	409a      	lsls	r2, r3
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	4013      	ands	r3, r2
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 808f 	beq.w	8004524 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a2c      	ldr	r2, [pc, #176]	; (80044bc <HAL_DMA_IRQHandler+0x3f8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d04a      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a2a      	ldr	r2, [pc, #168]	; (80044c0 <HAL_DMA_IRQHandler+0x3fc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d045      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a29      	ldr	r2, [pc, #164]	; (80044c4 <HAL_DMA_IRQHandler+0x400>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d040      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a27      	ldr	r2, [pc, #156]	; (80044c8 <HAL_DMA_IRQHandler+0x404>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d03b      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a26      	ldr	r2, [pc, #152]	; (80044cc <HAL_DMA_IRQHandler+0x408>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d036      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a24      	ldr	r2, [pc, #144]	; (80044d0 <HAL_DMA_IRQHandler+0x40c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d031      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a23      	ldr	r2, [pc, #140]	; (80044d4 <HAL_DMA_IRQHandler+0x410>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d02c      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a21      	ldr	r2, [pc, #132]	; (80044d8 <HAL_DMA_IRQHandler+0x414>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d027      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a20      	ldr	r2, [pc, #128]	; (80044dc <HAL_DMA_IRQHandler+0x418>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d022      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1e      	ldr	r2, [pc, #120]	; (80044e0 <HAL_DMA_IRQHandler+0x41c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d01d      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1d      	ldr	r2, [pc, #116]	; (80044e4 <HAL_DMA_IRQHandler+0x420>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d018      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1b      	ldr	r2, [pc, #108]	; (80044e8 <HAL_DMA_IRQHandler+0x424>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d013      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1a      	ldr	r2, [pc, #104]	; (80044ec <HAL_DMA_IRQHandler+0x428>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00e      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a18      	ldr	r2, [pc, #96]	; (80044f0 <HAL_DMA_IRQHandler+0x42c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d009      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a17      	ldr	r2, [pc, #92]	; (80044f4 <HAL_DMA_IRQHandler+0x430>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d004      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a15      	ldr	r2, [pc, #84]	; (80044f8 <HAL_DMA_IRQHandler+0x434>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d12a      	bne.n	80044fc <HAL_DMA_IRQHandler+0x438>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	e023      	b.n	8004504 <HAL_DMA_IRQHandler+0x440>
 80044bc:	40020010 	.word	0x40020010
 80044c0:	40020028 	.word	0x40020028
 80044c4:	40020040 	.word	0x40020040
 80044c8:	40020058 	.word	0x40020058
 80044cc:	40020070 	.word	0x40020070
 80044d0:	40020088 	.word	0x40020088
 80044d4:	400200a0 	.word	0x400200a0
 80044d8:	400200b8 	.word	0x400200b8
 80044dc:	40020410 	.word	0x40020410
 80044e0:	40020428 	.word	0x40020428
 80044e4:	40020440 	.word	0x40020440
 80044e8:	40020458 	.word	0x40020458
 80044ec:	40020470 	.word	0x40020470
 80044f0:	40020488 	.word	0x40020488
 80044f4:	400204a0 	.word	0x400204a0
 80044f8:	400204b8 	.word	0x400204b8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2300      	movs	r3, #0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00d      	beq.n	8004524 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	2204      	movs	r2, #4
 8004512:	409a      	lsls	r2, r3
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451c:	f043 0204 	orr.w	r2, r3, #4
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004528:	f003 031f 	and.w	r3, r3, #31
 800452c:	2210      	movs	r2, #16
 800452e:	409a      	lsls	r2, r3
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	4013      	ands	r3, r2
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80a6 	beq.w	8004686 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a85      	ldr	r2, [pc, #532]	; (8004754 <HAL_DMA_IRQHandler+0x690>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d04a      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a83      	ldr	r2, [pc, #524]	; (8004758 <HAL_DMA_IRQHandler+0x694>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d045      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a82      	ldr	r2, [pc, #520]	; (800475c <HAL_DMA_IRQHandler+0x698>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d040      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a80      	ldr	r2, [pc, #512]	; (8004760 <HAL_DMA_IRQHandler+0x69c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d03b      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a7f      	ldr	r2, [pc, #508]	; (8004764 <HAL_DMA_IRQHandler+0x6a0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d036      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a7d      	ldr	r2, [pc, #500]	; (8004768 <HAL_DMA_IRQHandler+0x6a4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d031      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a7c      	ldr	r2, [pc, #496]	; (800476c <HAL_DMA_IRQHandler+0x6a8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d02c      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a7a      	ldr	r2, [pc, #488]	; (8004770 <HAL_DMA_IRQHandler+0x6ac>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d027      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a79      	ldr	r2, [pc, #484]	; (8004774 <HAL_DMA_IRQHandler+0x6b0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d022      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a77      	ldr	r2, [pc, #476]	; (8004778 <HAL_DMA_IRQHandler+0x6b4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d01d      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a76      	ldr	r2, [pc, #472]	; (800477c <HAL_DMA_IRQHandler+0x6b8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d018      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a74      	ldr	r2, [pc, #464]	; (8004780 <HAL_DMA_IRQHandler+0x6bc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a73      	ldr	r2, [pc, #460]	; (8004784 <HAL_DMA_IRQHandler+0x6c0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00e      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a71      	ldr	r2, [pc, #452]	; (8004788 <HAL_DMA_IRQHandler+0x6c4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d009      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a70      	ldr	r2, [pc, #448]	; (800478c <HAL_DMA_IRQHandler+0x6c8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a6e      	ldr	r2, [pc, #440]	; (8004790 <HAL_DMA_IRQHandler+0x6cc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d10a      	bne.n	80045f0 <HAL_DMA_IRQHandler+0x52c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf14      	ite	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	2300      	moveq	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	e009      	b.n	8004604 <HAL_DMA_IRQHandler+0x540>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf14      	ite	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	2300      	moveq	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d03e      	beq.n	8004686 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2210      	movs	r2, #16
 8004612:	409a      	lsls	r2, r3
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d018      	beq.n	8004658 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d108      	bne.n	8004646 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	d024      	beq.n	8004686 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
 8004644:	e01f      	b.n	8004686 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01b      	beq.n	8004686 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	4798      	blx	r3
 8004656:	e016      	b.n	8004686 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004662:	2b00      	cmp	r3, #0
 8004664:	d107      	bne.n	8004676 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0208 	bic.w	r2, r2, #8
 8004674:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468a:	f003 031f 	and.w	r3, r3, #31
 800468e:	2220      	movs	r2, #32
 8004690:	409a      	lsls	r2, r3
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 8110 	beq.w	80048bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a2c      	ldr	r2, [pc, #176]	; (8004754 <HAL_DMA_IRQHandler+0x690>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d04a      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a2b      	ldr	r2, [pc, #172]	; (8004758 <HAL_DMA_IRQHandler+0x694>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d045      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a29      	ldr	r2, [pc, #164]	; (800475c <HAL_DMA_IRQHandler+0x698>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d040      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a28      	ldr	r2, [pc, #160]	; (8004760 <HAL_DMA_IRQHandler+0x69c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d03b      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a26      	ldr	r2, [pc, #152]	; (8004764 <HAL_DMA_IRQHandler+0x6a0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d036      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a25      	ldr	r2, [pc, #148]	; (8004768 <HAL_DMA_IRQHandler+0x6a4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d031      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a23      	ldr	r2, [pc, #140]	; (800476c <HAL_DMA_IRQHandler+0x6a8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d02c      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a22      	ldr	r2, [pc, #136]	; (8004770 <HAL_DMA_IRQHandler+0x6ac>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d027      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a20      	ldr	r2, [pc, #128]	; (8004774 <HAL_DMA_IRQHandler+0x6b0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d022      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <HAL_DMA_IRQHandler+0x6b4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d01d      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1d      	ldr	r2, [pc, #116]	; (800477c <HAL_DMA_IRQHandler+0x6b8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d018      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1c      	ldr	r2, [pc, #112]	; (8004780 <HAL_DMA_IRQHandler+0x6bc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d013      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1a      	ldr	r2, [pc, #104]	; (8004784 <HAL_DMA_IRQHandler+0x6c0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00e      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a19      	ldr	r2, [pc, #100]	; (8004788 <HAL_DMA_IRQHandler+0x6c4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d009      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a17      	ldr	r2, [pc, #92]	; (800478c <HAL_DMA_IRQHandler+0x6c8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d004      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a16      	ldr	r2, [pc, #88]	; (8004790 <HAL_DMA_IRQHandler+0x6cc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d12b      	bne.n	8004794 <HAL_DMA_IRQHandler+0x6d0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0310 	and.w	r3, r3, #16
 8004746:	2b00      	cmp	r3, #0
 8004748:	bf14      	ite	ne
 800474a:	2301      	movne	r3, #1
 800474c:	2300      	moveq	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	e02a      	b.n	80047a8 <HAL_DMA_IRQHandler+0x6e4>
 8004752:	bf00      	nop
 8004754:	40020010 	.word	0x40020010
 8004758:	40020028 	.word	0x40020028
 800475c:	40020040 	.word	0x40020040
 8004760:	40020058 	.word	0x40020058
 8004764:	40020070 	.word	0x40020070
 8004768:	40020088 	.word	0x40020088
 800476c:	400200a0 	.word	0x400200a0
 8004770:	400200b8 	.word	0x400200b8
 8004774:	40020410 	.word	0x40020410
 8004778:	40020428 	.word	0x40020428
 800477c:	40020440 	.word	0x40020440
 8004780:	40020458 	.word	0x40020458
 8004784:	40020470 	.word	0x40020470
 8004788:	40020488 	.word	0x40020488
 800478c:	400204a0 	.word	0x400204a0
 8004790:	400204b8 	.word	0x400204b8
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bf14      	ite	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	2300      	moveq	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8087 	beq.w	80048bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	2220      	movs	r2, #32
 80047b8:	409a      	lsls	r2, r3
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d139      	bne.n	800483e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0216 	bic.w	r2, r2, #22
 80047d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d103      	bne.n	80047fa <HAL_DMA_IRQHandler+0x736>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0208 	bic.w	r2, r2, #8
 8004808:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480e:	f003 031f 	and.w	r3, r3, #31
 8004812:	223f      	movs	r2, #63	; 0x3f
 8004814:	409a      	lsls	r2, r3
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8382 	beq.w	8004f38 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	4798      	blx	r3
          }
          return;
 800483c:	e37c      	b.n	8004f38 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d018      	beq.n	800487e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d108      	bne.n	800486c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	2b00      	cmp	r3, #0
 8004860:	d02c      	beq.n	80048bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	4798      	blx	r3
 800486a:	e027      	b.n	80048bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d023      	beq.n	80048bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	4798      	blx	r3
 800487c:	e01e      	b.n	80048bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10f      	bne.n	80048ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0210 	bic.w	r2, r2, #16
 800489a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 833e 	beq.w	8004f42 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8088 	beq.w	80049e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2204      	movs	r2, #4
 80048d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a89      	ldr	r2, [pc, #548]	; (8004b08 <HAL_DMA_IRQHandler+0xa44>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d04a      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a88      	ldr	r2, [pc, #544]	; (8004b0c <HAL_DMA_IRQHandler+0xa48>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d045      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a86      	ldr	r2, [pc, #536]	; (8004b10 <HAL_DMA_IRQHandler+0xa4c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d040      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a85      	ldr	r2, [pc, #532]	; (8004b14 <HAL_DMA_IRQHandler+0xa50>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d03b      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a83      	ldr	r2, [pc, #524]	; (8004b18 <HAL_DMA_IRQHandler+0xa54>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d036      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a82      	ldr	r2, [pc, #520]	; (8004b1c <HAL_DMA_IRQHandler+0xa58>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d031      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a80      	ldr	r2, [pc, #512]	; (8004b20 <HAL_DMA_IRQHandler+0xa5c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d02c      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7f      	ldr	r2, [pc, #508]	; (8004b24 <HAL_DMA_IRQHandler+0xa60>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d027      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a7d      	ldr	r2, [pc, #500]	; (8004b28 <HAL_DMA_IRQHandler+0xa64>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d022      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a7c      	ldr	r2, [pc, #496]	; (8004b2c <HAL_DMA_IRQHandler+0xa68>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d01d      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a7a      	ldr	r2, [pc, #488]	; (8004b30 <HAL_DMA_IRQHandler+0xa6c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d018      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a79      	ldr	r2, [pc, #484]	; (8004b34 <HAL_DMA_IRQHandler+0xa70>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d013      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a77      	ldr	r2, [pc, #476]	; (8004b38 <HAL_DMA_IRQHandler+0xa74>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00e      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a76      	ldr	r2, [pc, #472]	; (8004b3c <HAL_DMA_IRQHandler+0xa78>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d009      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a74      	ldr	r2, [pc, #464]	; (8004b40 <HAL_DMA_IRQHandler+0xa7c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d004      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a73      	ldr	r2, [pc, #460]	; (8004b44 <HAL_DMA_IRQHandler+0xa80>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d108      	bne.n	800498e <HAL_DMA_IRQHandler+0x8ca>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e007      	b.n	800499e <HAL_DMA_IRQHandler+0x8da>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0201 	bic.w	r2, r2, #1
 800499c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3301      	adds	r3, #1
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d307      	bcc.n	80049ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f2      	bne.n	800499e <HAL_DMA_IRQHandler+0x8da>
 80049b8:	e000      	b.n	80049bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80049ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d004      	beq.n	80049d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2203      	movs	r2, #3
 80049ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80049d2:	e003      	b.n	80049dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 82aa 	beq.w	8004f42 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	4798      	blx	r3
 80049f6:	e2a4      	b.n	8004f42 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a52      	ldr	r2, [pc, #328]	; (8004b48 <HAL_DMA_IRQHandler+0xa84>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d04a      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x9d4>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a51      	ldr	r2, [pc, #324]	; (8004b4c <HAL_DMA_IRQHandler+0xa88>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d045      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x9d4>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a4f      	ldr	r2, [pc, #316]	; (8004b50 <HAL_DMA_IRQHandler+0xa8c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d040      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x9d4>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a4e      	ldr	r2, [pc, #312]	; (8004b54 <HAL_DMA_IRQHandler+0xa90>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d03b      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x9d4>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a4c      	ldr	r2, [pc, #304]	; (8004b58 <HAL_DMA_IRQHandler+0xa94>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d036      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x9d4>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a4b      	ldr	r2, [pc, #300]	; (8004b5c <HAL_DMA_IRQHandler+0xa98>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d031      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x9d4>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a49      	ldr	r2, [pc, #292]	; (8004b60 <HAL_DMA_IRQHandler+0xa9c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d02c      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x9d4>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a48      	ldr	r2, [pc, #288]	; (8004b64 <HAL_DMA_IRQHandler+0xaa0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d027      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x9d4>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a46      	ldr	r2, [pc, #280]	; (8004b68 <HAL_DMA_IRQHandler+0xaa4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d022      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x9d4>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a45      	ldr	r2, [pc, #276]	; (8004b6c <HAL_DMA_IRQHandler+0xaa8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d01d      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x9d4>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a43      	ldr	r2, [pc, #268]	; (8004b70 <HAL_DMA_IRQHandler+0xaac>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d018      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x9d4>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a42      	ldr	r2, [pc, #264]	; (8004b74 <HAL_DMA_IRQHandler+0xab0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d013      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x9d4>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a40      	ldr	r2, [pc, #256]	; (8004b78 <HAL_DMA_IRQHandler+0xab4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00e      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x9d4>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a3f      	ldr	r2, [pc, #252]	; (8004b7c <HAL_DMA_IRQHandler+0xab8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d009      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x9d4>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a3d      	ldr	r2, [pc, #244]	; (8004b80 <HAL_DMA_IRQHandler+0xabc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d004      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x9d4>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a3c      	ldr	r2, [pc, #240]	; (8004b84 <HAL_DMA_IRQHandler+0xac0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d101      	bne.n	8004a9c <HAL_DMA_IRQHandler+0x9d8>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <HAL_DMA_IRQHandler+0x9da>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 824f 	beq.w	8004f42 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab0:	f003 031f 	and.w	r3, r3, #31
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	409a      	lsls	r2, r3
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80dd 	beq.w	8004c7c <HAL_DMA_IRQHandler+0xbb8>
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80d7 	beq.w	8004c7c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d059      	beq.n	8004b9c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d14a      	bne.n	8004b88 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 8220 	beq.w	8004f3c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b04:	e21a      	b.n	8004f3c <HAL_DMA_IRQHandler+0xe78>
 8004b06:	bf00      	nop
 8004b08:	40020010 	.word	0x40020010
 8004b0c:	40020028 	.word	0x40020028
 8004b10:	40020040 	.word	0x40020040
 8004b14:	40020058 	.word	0x40020058
 8004b18:	40020070 	.word	0x40020070
 8004b1c:	40020088 	.word	0x40020088
 8004b20:	400200a0 	.word	0x400200a0
 8004b24:	400200b8 	.word	0x400200b8
 8004b28:	40020410 	.word	0x40020410
 8004b2c:	40020428 	.word	0x40020428
 8004b30:	40020440 	.word	0x40020440
 8004b34:	40020458 	.word	0x40020458
 8004b38:	40020470 	.word	0x40020470
 8004b3c:	40020488 	.word	0x40020488
 8004b40:	400204a0 	.word	0x400204a0
 8004b44:	400204b8 	.word	0x400204b8
 8004b48:	48022c08 	.word	0x48022c08
 8004b4c:	48022c1c 	.word	0x48022c1c
 8004b50:	48022c30 	.word	0x48022c30
 8004b54:	48022c44 	.word	0x48022c44
 8004b58:	48022c58 	.word	0x48022c58
 8004b5c:	48022c6c 	.word	0x48022c6c
 8004b60:	48022c80 	.word	0x48022c80
 8004b64:	48022c94 	.word	0x48022c94
 8004b68:	58025408 	.word	0x58025408
 8004b6c:	5802541c 	.word	0x5802541c
 8004b70:	58025430 	.word	0x58025430
 8004b74:	58025444 	.word	0x58025444
 8004b78:	58025458 	.word	0x58025458
 8004b7c:	5802546c 	.word	0x5802546c
 8004b80:	58025480 	.word	0x58025480
 8004b84:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 81d5 	beq.w	8004f3c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b9a:	e1cf      	b.n	8004f3c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d160      	bne.n	8004c68 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a7f      	ldr	r2, [pc, #508]	; (8004da8 <HAL_DMA_IRQHandler+0xce4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d04a      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb82>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a7d      	ldr	r2, [pc, #500]	; (8004dac <HAL_DMA_IRQHandler+0xce8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d045      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb82>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a7c      	ldr	r2, [pc, #496]	; (8004db0 <HAL_DMA_IRQHandler+0xcec>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d040      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb82>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a7a      	ldr	r2, [pc, #488]	; (8004db4 <HAL_DMA_IRQHandler+0xcf0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d03b      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb82>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a79      	ldr	r2, [pc, #484]	; (8004db8 <HAL_DMA_IRQHandler+0xcf4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d036      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb82>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a77      	ldr	r2, [pc, #476]	; (8004dbc <HAL_DMA_IRQHandler+0xcf8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d031      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb82>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a76      	ldr	r2, [pc, #472]	; (8004dc0 <HAL_DMA_IRQHandler+0xcfc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d02c      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb82>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a74      	ldr	r2, [pc, #464]	; (8004dc4 <HAL_DMA_IRQHandler+0xd00>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d027      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb82>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a73      	ldr	r2, [pc, #460]	; (8004dc8 <HAL_DMA_IRQHandler+0xd04>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d022      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb82>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a71      	ldr	r2, [pc, #452]	; (8004dcc <HAL_DMA_IRQHandler+0xd08>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d01d      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb82>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a70      	ldr	r2, [pc, #448]	; (8004dd0 <HAL_DMA_IRQHandler+0xd0c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d018      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb82>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a6e      	ldr	r2, [pc, #440]	; (8004dd4 <HAL_DMA_IRQHandler+0xd10>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb82>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a6d      	ldr	r2, [pc, #436]	; (8004dd8 <HAL_DMA_IRQHandler+0xd14>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00e      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb82>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a6b      	ldr	r2, [pc, #428]	; (8004ddc <HAL_DMA_IRQHandler+0xd18>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d009      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb82>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a6a      	ldr	r2, [pc, #424]	; (8004de0 <HAL_DMA_IRQHandler+0xd1c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xb82>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a68      	ldr	r2, [pc, #416]	; (8004de4 <HAL_DMA_IRQHandler+0xd20>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d108      	bne.n	8004c58 <HAL_DMA_IRQHandler+0xb94>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0208 	bic.w	r2, r2, #8
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	e007      	b.n	8004c68 <HAL_DMA_IRQHandler+0xba4>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0204 	bic.w	r2, r2, #4
 8004c66:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8165 	beq.w	8004f3c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c7a:	e15f      	b.n	8004f3c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	2202      	movs	r2, #2
 8004c86:	409a      	lsls	r2, r3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80c5 	beq.w	8004e1c <HAL_DMA_IRQHandler+0xd58>
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 80bf 	beq.w	8004e1c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	409a      	lsls	r2, r3
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d018      	beq.n	8004cea <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 813a 	beq.w	8004f40 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cd4:	e134      	b.n	8004f40 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 8130 	beq.w	8004f40 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ce8:	e12a      	b.n	8004f40 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f003 0320 	and.w	r3, r3, #32
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f040 8089 	bne.w	8004e08 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a2b      	ldr	r2, [pc, #172]	; (8004da8 <HAL_DMA_IRQHandler+0xce4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d04a      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xcd2>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a29      	ldr	r2, [pc, #164]	; (8004dac <HAL_DMA_IRQHandler+0xce8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d045      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xcd2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a28      	ldr	r2, [pc, #160]	; (8004db0 <HAL_DMA_IRQHandler+0xcec>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d040      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xcd2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a26      	ldr	r2, [pc, #152]	; (8004db4 <HAL_DMA_IRQHandler+0xcf0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d03b      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xcd2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a25      	ldr	r2, [pc, #148]	; (8004db8 <HAL_DMA_IRQHandler+0xcf4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d036      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xcd2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a23      	ldr	r2, [pc, #140]	; (8004dbc <HAL_DMA_IRQHandler+0xcf8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d031      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xcd2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a22      	ldr	r2, [pc, #136]	; (8004dc0 <HAL_DMA_IRQHandler+0xcfc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d02c      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xcd2>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a20      	ldr	r2, [pc, #128]	; (8004dc4 <HAL_DMA_IRQHandler+0xd00>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d027      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xcd2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a1f      	ldr	r2, [pc, #124]	; (8004dc8 <HAL_DMA_IRQHandler+0xd04>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d022      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xcd2>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1d      	ldr	r2, [pc, #116]	; (8004dcc <HAL_DMA_IRQHandler+0xd08>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d01d      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xcd2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1c      	ldr	r2, [pc, #112]	; (8004dd0 <HAL_DMA_IRQHandler+0xd0c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d018      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xcd2>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1a      	ldr	r2, [pc, #104]	; (8004dd4 <HAL_DMA_IRQHandler+0xd10>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xcd2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a19      	ldr	r2, [pc, #100]	; (8004dd8 <HAL_DMA_IRQHandler+0xd14>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00e      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xcd2>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <HAL_DMA_IRQHandler+0xd18>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d009      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xcd2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a16      	ldr	r2, [pc, #88]	; (8004de0 <HAL_DMA_IRQHandler+0xd1c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <HAL_DMA_IRQHandler+0xcd2>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a14      	ldr	r2, [pc, #80]	; (8004de4 <HAL_DMA_IRQHandler+0xd20>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d128      	bne.n	8004de8 <HAL_DMA_IRQHandler+0xd24>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0214 	bic.w	r2, r2, #20
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e027      	b.n	8004df8 <HAL_DMA_IRQHandler+0xd34>
 8004da8:	40020010 	.word	0x40020010
 8004dac:	40020028 	.word	0x40020028
 8004db0:	40020040 	.word	0x40020040
 8004db4:	40020058 	.word	0x40020058
 8004db8:	40020070 	.word	0x40020070
 8004dbc:	40020088 	.word	0x40020088
 8004dc0:	400200a0 	.word	0x400200a0
 8004dc4:	400200b8 	.word	0x400200b8
 8004dc8:	40020410 	.word	0x40020410
 8004dcc:	40020428 	.word	0x40020428
 8004dd0:	40020440 	.word	0x40020440
 8004dd4:	40020458 	.word	0x40020458
 8004dd8:	40020470 	.word	0x40020470
 8004ddc:	40020488 	.word	0x40020488
 8004de0:	400204a0 	.word	0x400204a0
 8004de4:	400204b8 	.word	0x400204b8
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 020a 	bic.w	r2, r2, #10
 8004df6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8097 	beq.w	8004f40 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e1a:	e091      	b.n	8004f40 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e20:	f003 031f 	and.w	r3, r3, #31
 8004e24:	2208      	movs	r2, #8
 8004e26:	409a      	lsls	r2, r3
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 8088 	beq.w	8004f42 <HAL_DMA_IRQHandler+0xe7e>
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f003 0308 	and.w	r3, r3, #8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8082 	beq.w	8004f42 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a41      	ldr	r2, [pc, #260]	; (8004f48 <HAL_DMA_IRQHandler+0xe84>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d04a      	beq.n	8004ede <HAL_DMA_IRQHandler+0xe1a>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a3f      	ldr	r2, [pc, #252]	; (8004f4c <HAL_DMA_IRQHandler+0xe88>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d045      	beq.n	8004ede <HAL_DMA_IRQHandler+0xe1a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a3e      	ldr	r2, [pc, #248]	; (8004f50 <HAL_DMA_IRQHandler+0xe8c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d040      	beq.n	8004ede <HAL_DMA_IRQHandler+0xe1a>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a3c      	ldr	r2, [pc, #240]	; (8004f54 <HAL_DMA_IRQHandler+0xe90>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d03b      	beq.n	8004ede <HAL_DMA_IRQHandler+0xe1a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a3b      	ldr	r2, [pc, #236]	; (8004f58 <HAL_DMA_IRQHandler+0xe94>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d036      	beq.n	8004ede <HAL_DMA_IRQHandler+0xe1a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a39      	ldr	r2, [pc, #228]	; (8004f5c <HAL_DMA_IRQHandler+0xe98>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d031      	beq.n	8004ede <HAL_DMA_IRQHandler+0xe1a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a38      	ldr	r2, [pc, #224]	; (8004f60 <HAL_DMA_IRQHandler+0xe9c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d02c      	beq.n	8004ede <HAL_DMA_IRQHandler+0xe1a>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a36      	ldr	r2, [pc, #216]	; (8004f64 <HAL_DMA_IRQHandler+0xea0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d027      	beq.n	8004ede <HAL_DMA_IRQHandler+0xe1a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a35      	ldr	r2, [pc, #212]	; (8004f68 <HAL_DMA_IRQHandler+0xea4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d022      	beq.n	8004ede <HAL_DMA_IRQHandler+0xe1a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a33      	ldr	r2, [pc, #204]	; (8004f6c <HAL_DMA_IRQHandler+0xea8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d01d      	beq.n	8004ede <HAL_DMA_IRQHandler+0xe1a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a32      	ldr	r2, [pc, #200]	; (8004f70 <HAL_DMA_IRQHandler+0xeac>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d018      	beq.n	8004ede <HAL_DMA_IRQHandler+0xe1a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a30      	ldr	r2, [pc, #192]	; (8004f74 <HAL_DMA_IRQHandler+0xeb0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d013      	beq.n	8004ede <HAL_DMA_IRQHandler+0xe1a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a2f      	ldr	r2, [pc, #188]	; (8004f78 <HAL_DMA_IRQHandler+0xeb4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00e      	beq.n	8004ede <HAL_DMA_IRQHandler+0xe1a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a2d      	ldr	r2, [pc, #180]	; (8004f7c <HAL_DMA_IRQHandler+0xeb8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d009      	beq.n	8004ede <HAL_DMA_IRQHandler+0xe1a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a2c      	ldr	r2, [pc, #176]	; (8004f80 <HAL_DMA_IRQHandler+0xebc>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_DMA_IRQHandler+0xe1a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a2a      	ldr	r2, [pc, #168]	; (8004f84 <HAL_DMA_IRQHandler+0xec0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d108      	bne.n	8004ef0 <HAL_DMA_IRQHandler+0xe2c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 021c 	bic.w	r2, r2, #28
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e007      	b.n	8004f00 <HAL_DMA_IRQHandler+0xe3c>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 020e 	bic.w	r2, r2, #14
 8004efe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	2201      	movs	r2, #1
 8004f0a:	409a      	lsls	r2, r3
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	4798      	blx	r3
 8004f36:	e004      	b.n	8004f42 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004f38:	bf00      	nop
 8004f3a:	e002      	b.n	8004f42 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f3c:	bf00      	nop
 8004f3e:	e000      	b.n	8004f42 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f40:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f42:	3728      	adds	r7, #40	; 0x28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40020010 	.word	0x40020010
 8004f4c:	40020028 	.word	0x40020028
 8004f50:	40020040 	.word	0x40020040
 8004f54:	40020058 	.word	0x40020058
 8004f58:	40020070 	.word	0x40020070
 8004f5c:	40020088 	.word	0x40020088
 8004f60:	400200a0 	.word	0x400200a0
 8004f64:	400200b8 	.word	0x400200b8
 8004f68:	40020410 	.word	0x40020410
 8004f6c:	40020428 	.word	0x40020428
 8004f70:	40020440 	.word	0x40020440
 8004f74:	40020458 	.word	0x40020458
 8004f78:	40020470 	.word	0x40020470
 8004f7c:	40020488 	.word	0x40020488
 8004f80:	400204a0 	.word	0x400204a0
 8004f84:	400204b8 	.word	0x400204b8

08004f88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a7f      	ldr	r2, [pc, #508]	; (80051a4 <DMA_SetConfig+0x21c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d072      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a7d      	ldr	r2, [pc, #500]	; (80051a8 <DMA_SetConfig+0x220>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d06d      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a7c      	ldr	r2, [pc, #496]	; (80051ac <DMA_SetConfig+0x224>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d068      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a7a      	ldr	r2, [pc, #488]	; (80051b0 <DMA_SetConfig+0x228>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d063      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a79      	ldr	r2, [pc, #484]	; (80051b4 <DMA_SetConfig+0x22c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d05e      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a77      	ldr	r2, [pc, #476]	; (80051b8 <DMA_SetConfig+0x230>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d059      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a76      	ldr	r2, [pc, #472]	; (80051bc <DMA_SetConfig+0x234>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d054      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a74      	ldr	r2, [pc, #464]	; (80051c0 <DMA_SetConfig+0x238>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d04f      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a73      	ldr	r2, [pc, #460]	; (80051c4 <DMA_SetConfig+0x23c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d04a      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a71      	ldr	r2, [pc, #452]	; (80051c8 <DMA_SetConfig+0x240>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d045      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a70      	ldr	r2, [pc, #448]	; (80051cc <DMA_SetConfig+0x244>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d040      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a6e      	ldr	r2, [pc, #440]	; (80051d0 <DMA_SetConfig+0x248>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d03b      	beq.n	8005092 <DMA_SetConfig+0x10a>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a6d      	ldr	r2, [pc, #436]	; (80051d4 <DMA_SetConfig+0x24c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d036      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a6b      	ldr	r2, [pc, #428]	; (80051d8 <DMA_SetConfig+0x250>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d031      	beq.n	8005092 <DMA_SetConfig+0x10a>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a6a      	ldr	r2, [pc, #424]	; (80051dc <DMA_SetConfig+0x254>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d02c      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a68      	ldr	r2, [pc, #416]	; (80051e0 <DMA_SetConfig+0x258>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d027      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a67      	ldr	r2, [pc, #412]	; (80051e4 <DMA_SetConfig+0x25c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d022      	beq.n	8005092 <DMA_SetConfig+0x10a>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a65      	ldr	r2, [pc, #404]	; (80051e8 <DMA_SetConfig+0x260>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d01d      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a64      	ldr	r2, [pc, #400]	; (80051ec <DMA_SetConfig+0x264>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d018      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a62      	ldr	r2, [pc, #392]	; (80051f0 <DMA_SetConfig+0x268>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d013      	beq.n	8005092 <DMA_SetConfig+0x10a>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a61      	ldr	r2, [pc, #388]	; (80051f4 <DMA_SetConfig+0x26c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00e      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a5f      	ldr	r2, [pc, #380]	; (80051f8 <DMA_SetConfig+0x270>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d009      	beq.n	8005092 <DMA_SetConfig+0x10a>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a5e      	ldr	r2, [pc, #376]	; (80051fc <DMA_SetConfig+0x274>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d004      	beq.n	8005092 <DMA_SetConfig+0x10a>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a5c      	ldr	r2, [pc, #368]	; (8005200 <DMA_SetConfig+0x278>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d101      	bne.n	8005096 <DMA_SetConfig+0x10e>
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <DMA_SetConfig+0x110>
 8005096:	2300      	movs	r3, #0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00d      	beq.n	80050b8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050a4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d004      	beq.n	80050b8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050b6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a39      	ldr	r2, [pc, #228]	; (80051a4 <DMA_SetConfig+0x21c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d04a      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a38      	ldr	r2, [pc, #224]	; (80051a8 <DMA_SetConfig+0x220>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d045      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a36      	ldr	r2, [pc, #216]	; (80051ac <DMA_SetConfig+0x224>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d040      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a35      	ldr	r2, [pc, #212]	; (80051b0 <DMA_SetConfig+0x228>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d03b      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a33      	ldr	r2, [pc, #204]	; (80051b4 <DMA_SetConfig+0x22c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d036      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a32      	ldr	r2, [pc, #200]	; (80051b8 <DMA_SetConfig+0x230>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d031      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a30      	ldr	r2, [pc, #192]	; (80051bc <DMA_SetConfig+0x234>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d02c      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a2f      	ldr	r2, [pc, #188]	; (80051c0 <DMA_SetConfig+0x238>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d027      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a2d      	ldr	r2, [pc, #180]	; (80051c4 <DMA_SetConfig+0x23c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d022      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a2c      	ldr	r2, [pc, #176]	; (80051c8 <DMA_SetConfig+0x240>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d01d      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a2a      	ldr	r2, [pc, #168]	; (80051cc <DMA_SetConfig+0x244>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d018      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a29      	ldr	r2, [pc, #164]	; (80051d0 <DMA_SetConfig+0x248>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d013      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a27      	ldr	r2, [pc, #156]	; (80051d4 <DMA_SetConfig+0x24c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00e      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a26      	ldr	r2, [pc, #152]	; (80051d8 <DMA_SetConfig+0x250>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d009      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a24      	ldr	r2, [pc, #144]	; (80051dc <DMA_SetConfig+0x254>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d004      	beq.n	8005158 <DMA_SetConfig+0x1d0>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a23      	ldr	r2, [pc, #140]	; (80051e0 <DMA_SetConfig+0x258>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d101      	bne.n	800515c <DMA_SetConfig+0x1d4>
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <DMA_SetConfig+0x1d6>
 800515c:	2300      	movs	r3, #0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d059      	beq.n	8005216 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005166:	f003 031f 	and.w	r3, r3, #31
 800516a:	223f      	movs	r2, #63	; 0x3f
 800516c:	409a      	lsls	r2, r3
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005180:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b40      	cmp	r3, #64	; 0x40
 8005190:	d138      	bne.n	8005204 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051a2:	e0ae      	b.n	8005302 <DMA_SetConfig+0x37a>
 80051a4:	40020010 	.word	0x40020010
 80051a8:	40020028 	.word	0x40020028
 80051ac:	40020040 	.word	0x40020040
 80051b0:	40020058 	.word	0x40020058
 80051b4:	40020070 	.word	0x40020070
 80051b8:	40020088 	.word	0x40020088
 80051bc:	400200a0 	.word	0x400200a0
 80051c0:	400200b8 	.word	0x400200b8
 80051c4:	40020410 	.word	0x40020410
 80051c8:	40020428 	.word	0x40020428
 80051cc:	40020440 	.word	0x40020440
 80051d0:	40020458 	.word	0x40020458
 80051d4:	40020470 	.word	0x40020470
 80051d8:	40020488 	.word	0x40020488
 80051dc:	400204a0 	.word	0x400204a0
 80051e0:	400204b8 	.word	0x400204b8
 80051e4:	58025408 	.word	0x58025408
 80051e8:	5802541c 	.word	0x5802541c
 80051ec:	58025430 	.word	0x58025430
 80051f0:	58025444 	.word	0x58025444
 80051f4:	58025458 	.word	0x58025458
 80051f8:	5802546c 	.word	0x5802546c
 80051fc:	58025480 	.word	0x58025480
 8005200:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	60da      	str	r2, [r3, #12]
}
 8005214:	e075      	b.n	8005302 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a3d      	ldr	r2, [pc, #244]	; (8005310 <DMA_SetConfig+0x388>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d04a      	beq.n	80052b6 <DMA_SetConfig+0x32e>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a3b      	ldr	r2, [pc, #236]	; (8005314 <DMA_SetConfig+0x38c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d045      	beq.n	80052b6 <DMA_SetConfig+0x32e>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a3a      	ldr	r2, [pc, #232]	; (8005318 <DMA_SetConfig+0x390>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d040      	beq.n	80052b6 <DMA_SetConfig+0x32e>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a38      	ldr	r2, [pc, #224]	; (800531c <DMA_SetConfig+0x394>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d03b      	beq.n	80052b6 <DMA_SetConfig+0x32e>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a37      	ldr	r2, [pc, #220]	; (8005320 <DMA_SetConfig+0x398>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d036      	beq.n	80052b6 <DMA_SetConfig+0x32e>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a35      	ldr	r2, [pc, #212]	; (8005324 <DMA_SetConfig+0x39c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d031      	beq.n	80052b6 <DMA_SetConfig+0x32e>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a34      	ldr	r2, [pc, #208]	; (8005328 <DMA_SetConfig+0x3a0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d02c      	beq.n	80052b6 <DMA_SetConfig+0x32e>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a32      	ldr	r2, [pc, #200]	; (800532c <DMA_SetConfig+0x3a4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d027      	beq.n	80052b6 <DMA_SetConfig+0x32e>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a31      	ldr	r2, [pc, #196]	; (8005330 <DMA_SetConfig+0x3a8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d022      	beq.n	80052b6 <DMA_SetConfig+0x32e>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a2f      	ldr	r2, [pc, #188]	; (8005334 <DMA_SetConfig+0x3ac>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d01d      	beq.n	80052b6 <DMA_SetConfig+0x32e>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a2e      	ldr	r2, [pc, #184]	; (8005338 <DMA_SetConfig+0x3b0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d018      	beq.n	80052b6 <DMA_SetConfig+0x32e>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a2c      	ldr	r2, [pc, #176]	; (800533c <DMA_SetConfig+0x3b4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <DMA_SetConfig+0x32e>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a2b      	ldr	r2, [pc, #172]	; (8005340 <DMA_SetConfig+0x3b8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00e      	beq.n	80052b6 <DMA_SetConfig+0x32e>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a29      	ldr	r2, [pc, #164]	; (8005344 <DMA_SetConfig+0x3bc>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d009      	beq.n	80052b6 <DMA_SetConfig+0x32e>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a28      	ldr	r2, [pc, #160]	; (8005348 <DMA_SetConfig+0x3c0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d004      	beq.n	80052b6 <DMA_SetConfig+0x32e>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a26      	ldr	r2, [pc, #152]	; (800534c <DMA_SetConfig+0x3c4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d101      	bne.n	80052ba <DMA_SetConfig+0x332>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <DMA_SetConfig+0x334>
 80052ba:	2300      	movs	r3, #0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d020      	beq.n	8005302 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	2201      	movs	r2, #1
 80052ca:	409a      	lsls	r2, r3
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	2b40      	cmp	r3, #64	; 0x40
 80052de:	d108      	bne.n	80052f2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	60da      	str	r2, [r3, #12]
}
 80052f0:	e007      	b.n	8005302 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	60da      	str	r2, [r3, #12]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	48022c08 	.word	0x48022c08
 8005314:	48022c1c 	.word	0x48022c1c
 8005318:	48022c30 	.word	0x48022c30
 800531c:	48022c44 	.word	0x48022c44
 8005320:	48022c58 	.word	0x48022c58
 8005324:	48022c6c 	.word	0x48022c6c
 8005328:	48022c80 	.word	0x48022c80
 800532c:	48022c94 	.word	0x48022c94
 8005330:	58025408 	.word	0x58025408
 8005334:	5802541c 	.word	0x5802541c
 8005338:	58025430 	.word	0x58025430
 800533c:	58025444 	.word	0x58025444
 8005340:	58025458 	.word	0x58025458
 8005344:	5802546c 	.word	0x5802546c
 8005348:	58025480 	.word	0x58025480
 800534c:	58025494 	.word	0x58025494

08005350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a42      	ldr	r2, [pc, #264]	; (8005468 <DMA_CalcBaseAndBitshift+0x118>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d04a      	beq.n	80053f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a41      	ldr	r2, [pc, #260]	; (800546c <DMA_CalcBaseAndBitshift+0x11c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d045      	beq.n	80053f8 <DMA_CalcBaseAndBitshift+0xa8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a3f      	ldr	r2, [pc, #252]	; (8005470 <DMA_CalcBaseAndBitshift+0x120>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d040      	beq.n	80053f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a3e      	ldr	r2, [pc, #248]	; (8005474 <DMA_CalcBaseAndBitshift+0x124>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d03b      	beq.n	80053f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a3c      	ldr	r2, [pc, #240]	; (8005478 <DMA_CalcBaseAndBitshift+0x128>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d036      	beq.n	80053f8 <DMA_CalcBaseAndBitshift+0xa8>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a3b      	ldr	r2, [pc, #236]	; (800547c <DMA_CalcBaseAndBitshift+0x12c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d031      	beq.n	80053f8 <DMA_CalcBaseAndBitshift+0xa8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a39      	ldr	r2, [pc, #228]	; (8005480 <DMA_CalcBaseAndBitshift+0x130>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d02c      	beq.n	80053f8 <DMA_CalcBaseAndBitshift+0xa8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a38      	ldr	r2, [pc, #224]	; (8005484 <DMA_CalcBaseAndBitshift+0x134>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d027      	beq.n	80053f8 <DMA_CalcBaseAndBitshift+0xa8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a36      	ldr	r2, [pc, #216]	; (8005488 <DMA_CalcBaseAndBitshift+0x138>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d022      	beq.n	80053f8 <DMA_CalcBaseAndBitshift+0xa8>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a35      	ldr	r2, [pc, #212]	; (800548c <DMA_CalcBaseAndBitshift+0x13c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d01d      	beq.n	80053f8 <DMA_CalcBaseAndBitshift+0xa8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a33      	ldr	r2, [pc, #204]	; (8005490 <DMA_CalcBaseAndBitshift+0x140>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d018      	beq.n	80053f8 <DMA_CalcBaseAndBitshift+0xa8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a32      	ldr	r2, [pc, #200]	; (8005494 <DMA_CalcBaseAndBitshift+0x144>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d013      	beq.n	80053f8 <DMA_CalcBaseAndBitshift+0xa8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a30      	ldr	r2, [pc, #192]	; (8005498 <DMA_CalcBaseAndBitshift+0x148>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00e      	beq.n	80053f8 <DMA_CalcBaseAndBitshift+0xa8>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a2f      	ldr	r2, [pc, #188]	; (800549c <DMA_CalcBaseAndBitshift+0x14c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d009      	beq.n	80053f8 <DMA_CalcBaseAndBitshift+0xa8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a2d      	ldr	r2, [pc, #180]	; (80054a0 <DMA_CalcBaseAndBitshift+0x150>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d004      	beq.n	80053f8 <DMA_CalcBaseAndBitshift+0xa8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a2c      	ldr	r2, [pc, #176]	; (80054a4 <DMA_CalcBaseAndBitshift+0x154>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d101      	bne.n	80053fc <DMA_CalcBaseAndBitshift+0xac>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <DMA_CalcBaseAndBitshift+0xae>
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d024      	beq.n	800544c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	b2db      	uxtb	r3, r3
 8005408:	3b10      	subs	r3, #16
 800540a:	4a27      	ldr	r2, [pc, #156]	; (80054a8 <DMA_CalcBaseAndBitshift+0x158>)
 800540c:	fba2 2303 	umull	r2, r3, r2, r3
 8005410:	091b      	lsrs	r3, r3, #4
 8005412:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	4a24      	ldr	r2, [pc, #144]	; (80054ac <DMA_CalcBaseAndBitshift+0x15c>)
 800541c:	5cd3      	ldrb	r3, [r2, r3]
 800541e:	461a      	mov	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b03      	cmp	r3, #3
 8005428:	d908      	bls.n	800543c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	4b1f      	ldr	r3, [pc, #124]	; (80054b0 <DMA_CalcBaseAndBitshift+0x160>)
 8005432:	4013      	ands	r3, r2
 8005434:	1d1a      	adds	r2, r3, #4
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	659a      	str	r2, [r3, #88]	; 0x58
 800543a:	e00d      	b.n	8005458 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	461a      	mov	r2, r3
 8005442:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <DMA_CalcBaseAndBitshift+0x160>)
 8005444:	4013      	ands	r3, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6593      	str	r3, [r2, #88]	; 0x58
 800544a:	e005      	b.n	8005458 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40020010 	.word	0x40020010
 800546c:	40020028 	.word	0x40020028
 8005470:	40020040 	.word	0x40020040
 8005474:	40020058 	.word	0x40020058
 8005478:	40020070 	.word	0x40020070
 800547c:	40020088 	.word	0x40020088
 8005480:	400200a0 	.word	0x400200a0
 8005484:	400200b8 	.word	0x400200b8
 8005488:	40020410 	.word	0x40020410
 800548c:	40020428 	.word	0x40020428
 8005490:	40020440 	.word	0x40020440
 8005494:	40020458 	.word	0x40020458
 8005498:	40020470 	.word	0x40020470
 800549c:	40020488 	.word	0x40020488
 80054a0:	400204a0 	.word	0x400204a0
 80054a4:	400204b8 	.word	0x400204b8
 80054a8:	aaaaaaab 	.word	0xaaaaaaab
 80054ac:	0800a710 	.word	0x0800a710
 80054b0:	fffffc00 	.word	0xfffffc00

080054b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d120      	bne.n	800550a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d858      	bhi.n	8005582 <DMA_CheckFifoParam+0xce>
 80054d0:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <DMA_CheckFifoParam+0x24>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	080054e9 	.word	0x080054e9
 80054dc:	080054fb 	.word	0x080054fb
 80054e0:	080054e9 	.word	0x080054e9
 80054e4:	08005583 	.word	0x08005583
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d048      	beq.n	8005586 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054f8:	e045      	b.n	8005586 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005502:	d142      	bne.n	800558a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005508:	e03f      	b.n	800558a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005512:	d123      	bne.n	800555c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	2b03      	cmp	r3, #3
 800551a:	d838      	bhi.n	800558e <DMA_CheckFifoParam+0xda>
 800551c:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <DMA_CheckFifoParam+0x70>)
 800551e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005522:	bf00      	nop
 8005524:	08005535 	.word	0x08005535
 8005528:	0800553b 	.word	0x0800553b
 800552c:	08005535 	.word	0x08005535
 8005530:	0800554d 	.word	0x0800554d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
        break;
 8005538:	e030      	b.n	800559c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d025      	beq.n	8005592 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800554a:	e022      	b.n	8005592 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005554:	d11f      	bne.n	8005596 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800555a:	e01c      	b.n	8005596 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005560:	2b02      	cmp	r3, #2
 8005562:	d902      	bls.n	800556a <DMA_CheckFifoParam+0xb6>
 8005564:	2b03      	cmp	r3, #3
 8005566:	d003      	beq.n	8005570 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005568:	e018      	b.n	800559c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	73fb      	strb	r3, [r7, #15]
        break;
 800556e:	e015      	b.n	800559c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00e      	beq.n	800559a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	73fb      	strb	r3, [r7, #15]
    break;
 8005580:	e00b      	b.n	800559a <DMA_CheckFifoParam+0xe6>
        break;
 8005582:	bf00      	nop
 8005584:	e00a      	b.n	800559c <DMA_CheckFifoParam+0xe8>
        break;
 8005586:	bf00      	nop
 8005588:	e008      	b.n	800559c <DMA_CheckFifoParam+0xe8>
        break;
 800558a:	bf00      	nop
 800558c:	e006      	b.n	800559c <DMA_CheckFifoParam+0xe8>
        break;
 800558e:	bf00      	nop
 8005590:	e004      	b.n	800559c <DMA_CheckFifoParam+0xe8>
        break;
 8005592:	bf00      	nop
 8005594:	e002      	b.n	800559c <DMA_CheckFifoParam+0xe8>
        break;
 8005596:	bf00      	nop
 8005598:	e000      	b.n	800559c <DMA_CheckFifoParam+0xe8>
    break;
 800559a:	bf00      	nop
    }
  }

  return status;
 800559c:	7bfb      	ldrb	r3, [r7, #15]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop

080055ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a38      	ldr	r2, [pc, #224]	; (80056a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d022      	beq.n	800560a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a36      	ldr	r2, [pc, #216]	; (80056a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d01d      	beq.n	800560a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a35      	ldr	r2, [pc, #212]	; (80056a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d018      	beq.n	800560a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a33      	ldr	r2, [pc, #204]	; (80056ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d013      	beq.n	800560a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a32      	ldr	r2, [pc, #200]	; (80056b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00e      	beq.n	800560a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a30      	ldr	r2, [pc, #192]	; (80056b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d009      	beq.n	800560a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a2f      	ldr	r2, [pc, #188]	; (80056b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d004      	beq.n	800560a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a2d      	ldr	r2, [pc, #180]	; (80056bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d101      	bne.n	800560e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800560e:	2300      	movs	r3, #0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d01a      	beq.n	800564a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	3b08      	subs	r3, #8
 800561c:	4a28      	ldr	r2, [pc, #160]	; (80056c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800561e:	fba2 2303 	umull	r2, r3, r2, r3
 8005622:	091b      	lsrs	r3, r3, #4
 8005624:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4b26      	ldr	r3, [pc, #152]	; (80056c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800562a:	4413      	add	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	461a      	mov	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a24      	ldr	r2, [pc, #144]	; (80056c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005638:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f003 031f 	and.w	r3, r3, #31
 8005640:	2201      	movs	r2, #1
 8005642:	409a      	lsls	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005648:	e024      	b.n	8005694 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	b2db      	uxtb	r3, r3
 8005650:	3b10      	subs	r3, #16
 8005652:	4a1e      	ldr	r2, [pc, #120]	; (80056cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005654:	fba2 2303 	umull	r2, r3, r2, r3
 8005658:	091b      	lsrs	r3, r3, #4
 800565a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4a1c      	ldr	r2, [pc, #112]	; (80056d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d806      	bhi.n	8005672 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	4a1b      	ldr	r2, [pc, #108]	; (80056d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d902      	bls.n	8005672 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3308      	adds	r3, #8
 8005670:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	461a      	mov	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a16      	ldr	r2, [pc, #88]	; (80056dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005684:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f003 031f 	and.w	r3, r3, #31
 800568c:	2201      	movs	r2, #1
 800568e:	409a      	lsls	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	58025408 	.word	0x58025408
 80056a4:	5802541c 	.word	0x5802541c
 80056a8:	58025430 	.word	0x58025430
 80056ac:	58025444 	.word	0x58025444
 80056b0:	58025458 	.word	0x58025458
 80056b4:	5802546c 	.word	0x5802546c
 80056b8:	58025480 	.word	0x58025480
 80056bc:	58025494 	.word	0x58025494
 80056c0:	cccccccd 	.word	0xcccccccd
 80056c4:	16009600 	.word	0x16009600
 80056c8:	58025880 	.word	0x58025880
 80056cc:	aaaaaaab 	.word	0xaaaaaaab
 80056d0:	400204b8 	.word	0x400204b8
 80056d4:	4002040f 	.word	0x4002040f
 80056d8:	10008200 	.word	0x10008200
 80056dc:	40020880 	.word	0x40020880

080056e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d04a      	beq.n	800578c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d847      	bhi.n	800578c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a25      	ldr	r2, [pc, #148]	; (8005798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d022      	beq.n	800574c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a24      	ldr	r2, [pc, #144]	; (800579c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d01d      	beq.n	800574c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a22      	ldr	r2, [pc, #136]	; (80057a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d018      	beq.n	800574c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a21      	ldr	r2, [pc, #132]	; (80057a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d013      	beq.n	800574c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a1f      	ldr	r2, [pc, #124]	; (80057a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00e      	beq.n	800574c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1e      	ldr	r2, [pc, #120]	; (80057ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d009      	beq.n	800574c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a1c      	ldr	r2, [pc, #112]	; (80057b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d004      	beq.n	800574c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1b      	ldr	r2, [pc, #108]	; (80057b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d101      	bne.n	8005750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005750:	2300      	movs	r3, #0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4b17      	ldr	r3, [pc, #92]	; (80057b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	461a      	mov	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a15      	ldr	r2, [pc, #84]	; (80057bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005768:	671a      	str	r2, [r3, #112]	; 0x70
 800576a:	e009      	b.n	8005780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4b14      	ldr	r3, [pc, #80]	; (80057c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	461a      	mov	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a11      	ldr	r2, [pc, #68]	; (80057c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800577e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3b01      	subs	r3, #1
 8005784:	2201      	movs	r2, #1
 8005786:	409a      	lsls	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	58025408 	.word	0x58025408
 800579c:	5802541c 	.word	0x5802541c
 80057a0:	58025430 	.word	0x58025430
 80057a4:	58025444 	.word	0x58025444
 80057a8:	58025458 	.word	0x58025458
 80057ac:	5802546c 	.word	0x5802546c
 80057b0:	58025480 	.word	0x58025480
 80057b4:	58025494 	.word	0x58025494
 80057b8:	1600963f 	.word	0x1600963f
 80057bc:	58025940 	.word	0x58025940
 80057c0:	1000823f 	.word	0x1000823f
 80057c4:	40020940 	.word	0x40020940

080057c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b089      	sub	sp, #36	; 0x24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80057d6:	4b89      	ldr	r3, [pc, #548]	; (80059fc <HAL_GPIO_Init+0x234>)
 80057d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057da:	e194      	b.n	8005b06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	2101      	movs	r1, #1
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	fa01 f303 	lsl.w	r3, r1, r3
 80057e8:	4013      	ands	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 8186 	beq.w	8005b00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f003 0303 	and.w	r3, r3, #3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d005      	beq.n	800580c <HAL_GPIO_Init+0x44>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f003 0303 	and.w	r3, r3, #3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d130      	bne.n	800586e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	2203      	movs	r2, #3
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	43db      	mvns	r3, r3
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4013      	ands	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4313      	orrs	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005842:	2201      	movs	r2, #1
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	fa02 f303 	lsl.w	r3, r2, r3
 800584a:	43db      	mvns	r3, r3
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	4013      	ands	r3, r2
 8005850:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	091b      	lsrs	r3, r3, #4
 8005858:	f003 0201 	and.w	r2, r3, #1
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	fa02 f303 	lsl.w	r3, r2, r3
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	4313      	orrs	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	2b03      	cmp	r3, #3
 8005878:	d017      	beq.n	80058aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	2203      	movs	r2, #3
 8005886:	fa02 f303 	lsl.w	r3, r2, r3
 800588a:	43db      	mvns	r3, r3
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	4013      	ands	r3, r2
 8005890:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d123      	bne.n	80058fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	08da      	lsrs	r2, r3, #3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	3208      	adds	r2, #8
 80058be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	220f      	movs	r2, #15
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	43db      	mvns	r3, r3
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	4013      	ands	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	691a      	ldr	r2, [r3, #16]
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	08da      	lsrs	r2, r3, #3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3208      	adds	r2, #8
 80058f8:	69b9      	ldr	r1, [r7, #24]
 80058fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	2203      	movs	r2, #3
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	43db      	mvns	r3, r3
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	4013      	ands	r3, r2
 8005914:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f003 0203 	and.w	r2, r3, #3
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	4313      	orrs	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 80e0 	beq.w	8005b00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005940:	4b2f      	ldr	r3, [pc, #188]	; (8005a00 <HAL_GPIO_Init+0x238>)
 8005942:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005946:	4a2e      	ldr	r2, [pc, #184]	; (8005a00 <HAL_GPIO_Init+0x238>)
 8005948:	f043 0302 	orr.w	r3, r3, #2
 800594c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005950:	4b2b      	ldr	r3, [pc, #172]	; (8005a00 <HAL_GPIO_Init+0x238>)
 8005952:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800595e:	4a29      	ldr	r2, [pc, #164]	; (8005a04 <HAL_GPIO_Init+0x23c>)
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	089b      	lsrs	r3, r3, #2
 8005964:	3302      	adds	r3, #2
 8005966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800596a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	220f      	movs	r2, #15
 8005976:	fa02 f303 	lsl.w	r3, r2, r3
 800597a:	43db      	mvns	r3, r3
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	4013      	ands	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a20      	ldr	r2, [pc, #128]	; (8005a08 <HAL_GPIO_Init+0x240>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d052      	beq.n	8005a30 <HAL_GPIO_Init+0x268>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a1f      	ldr	r2, [pc, #124]	; (8005a0c <HAL_GPIO_Init+0x244>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d031      	beq.n	80059f6 <HAL_GPIO_Init+0x22e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a1e      	ldr	r2, [pc, #120]	; (8005a10 <HAL_GPIO_Init+0x248>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d02b      	beq.n	80059f2 <HAL_GPIO_Init+0x22a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <HAL_GPIO_Init+0x24c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d025      	beq.n	80059ee <HAL_GPIO_Init+0x226>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a1c      	ldr	r2, [pc, #112]	; (8005a18 <HAL_GPIO_Init+0x250>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01f      	beq.n	80059ea <HAL_GPIO_Init+0x222>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a1b      	ldr	r2, [pc, #108]	; (8005a1c <HAL_GPIO_Init+0x254>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d019      	beq.n	80059e6 <HAL_GPIO_Init+0x21e>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a1a      	ldr	r2, [pc, #104]	; (8005a20 <HAL_GPIO_Init+0x258>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d013      	beq.n	80059e2 <HAL_GPIO_Init+0x21a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a19      	ldr	r2, [pc, #100]	; (8005a24 <HAL_GPIO_Init+0x25c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00d      	beq.n	80059de <HAL_GPIO_Init+0x216>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a18      	ldr	r2, [pc, #96]	; (8005a28 <HAL_GPIO_Init+0x260>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d007      	beq.n	80059da <HAL_GPIO_Init+0x212>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a17      	ldr	r2, [pc, #92]	; (8005a2c <HAL_GPIO_Init+0x264>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d101      	bne.n	80059d6 <HAL_GPIO_Init+0x20e>
 80059d2:	2309      	movs	r3, #9
 80059d4:	e02d      	b.n	8005a32 <HAL_GPIO_Init+0x26a>
 80059d6:	230a      	movs	r3, #10
 80059d8:	e02b      	b.n	8005a32 <HAL_GPIO_Init+0x26a>
 80059da:	2308      	movs	r3, #8
 80059dc:	e029      	b.n	8005a32 <HAL_GPIO_Init+0x26a>
 80059de:	2307      	movs	r3, #7
 80059e0:	e027      	b.n	8005a32 <HAL_GPIO_Init+0x26a>
 80059e2:	2306      	movs	r3, #6
 80059e4:	e025      	b.n	8005a32 <HAL_GPIO_Init+0x26a>
 80059e6:	2305      	movs	r3, #5
 80059e8:	e023      	b.n	8005a32 <HAL_GPIO_Init+0x26a>
 80059ea:	2304      	movs	r3, #4
 80059ec:	e021      	b.n	8005a32 <HAL_GPIO_Init+0x26a>
 80059ee:	2303      	movs	r3, #3
 80059f0:	e01f      	b.n	8005a32 <HAL_GPIO_Init+0x26a>
 80059f2:	2302      	movs	r3, #2
 80059f4:	e01d      	b.n	8005a32 <HAL_GPIO_Init+0x26a>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e01b      	b.n	8005a32 <HAL_GPIO_Init+0x26a>
 80059fa:	bf00      	nop
 80059fc:	58000080 	.word	0x58000080
 8005a00:	58024400 	.word	0x58024400
 8005a04:	58000400 	.word	0x58000400
 8005a08:	58020000 	.word	0x58020000
 8005a0c:	58020400 	.word	0x58020400
 8005a10:	58020800 	.word	0x58020800
 8005a14:	58020c00 	.word	0x58020c00
 8005a18:	58021000 	.word	0x58021000
 8005a1c:	58021400 	.word	0x58021400
 8005a20:	58021800 	.word	0x58021800
 8005a24:	58021c00 	.word	0x58021c00
 8005a28:	58022000 	.word	0x58022000
 8005a2c:	58022400 	.word	0x58022400
 8005a30:	2300      	movs	r3, #0
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	f002 0203 	and.w	r2, r2, #3
 8005a38:	0092      	lsls	r2, r2, #2
 8005a3a:	4093      	lsls	r3, r2
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a42:	4938      	ldr	r1, [pc, #224]	; (8005b24 <HAL_GPIO_Init+0x35c>)
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	089b      	lsrs	r3, r3, #2
 8005a48:	3302      	adds	r3, #2
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005a76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	43db      	mvns	r3, r3
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	69ba      	ldr	r2, [r7, #24]
 8005ad4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	3301      	adds	r3, #1
 8005b04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f47f ae63 	bne.w	80057dc <HAL_GPIO_Init+0x14>
  }
}
 8005b16:	bf00      	nop
 8005b18:	bf00      	nop
 8005b1a:	3724      	adds	r7, #36	; 0x24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	58000400 	.word	0x58000400

08005b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	807b      	strh	r3, [r7, #2]
 8005b34:	4613      	mov	r3, r2
 8005b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b38:	787b      	ldrb	r3, [r7, #1]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b3e:	887a      	ldrh	r2, [r7, #2]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005b44:	e003      	b.n	8005b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005b46:	887b      	ldrh	r3, [r7, #2]
 8005b48:	041a      	lsls	r2, r3, #16
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	619a      	str	r2, [r3, #24]
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
	...

08005b5c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005b64:	4b29      	ldr	r3, [pc, #164]	; (8005c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	2b06      	cmp	r3, #6
 8005b6e:	d00a      	beq.n	8005b86 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005b70:	4b26      	ldr	r3, [pc, #152]	; (8005c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d001      	beq.n	8005b82 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e040      	b.n	8005c04 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	e03e      	b.n	8005c04 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b86:	4b21      	ldr	r3, [pc, #132]	; (8005c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005b8e:	491f      	ldr	r1, [pc, #124]	; (8005c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b96:	f7fb ff11 	bl	80019bc <HAL_GetTick>
 8005b9a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b9c:	e009      	b.n	8005bb2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b9e:	f7fb ff0d 	bl	80019bc <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bac:	d901      	bls.n	8005bb2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e028      	b.n	8005c04 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005bb2:	4b16      	ldr	r3, [pc, #88]	; (8005c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bbe:	d1ee      	bne.n	8005b9e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b1e      	cmp	r3, #30
 8005bc4:	d008      	beq.n	8005bd8 <HAL_PWREx_ConfigSupply+0x7c>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8005bca:	d005      	beq.n	8005bd8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b1d      	cmp	r3, #29
 8005bd0:	d002      	beq.n	8005bd8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b2d      	cmp	r3, #45	; 0x2d
 8005bd6:	d114      	bne.n	8005c02 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005bd8:	f7fb fef0 	bl	80019bc <HAL_GetTick>
 8005bdc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005bde:	e009      	b.n	8005bf4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005be0:	f7fb feec 	bl	80019bc <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bee:	d901      	bls.n	8005bf4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e007      	b.n	8005c04 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c00:	d1ee      	bne.n	8005be0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	58024800 	.word	0x58024800

08005c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08c      	sub	sp, #48	; 0x30
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e3f4      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 80b3 	beq.w	8005d96 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c30:	4b95      	ldr	r3, [pc, #596]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c3a:	4b93      	ldr	r3, [pc, #588]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	2b10      	cmp	r3, #16
 8005c44:	d007      	beq.n	8005c56 <HAL_RCC_OscConfig+0x46>
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	2b18      	cmp	r3, #24
 8005c4a:	d112      	bne.n	8005c72 <HAL_RCC_OscConfig+0x62>
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d10d      	bne.n	8005c72 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c56:	4b8c      	ldr	r3, [pc, #560]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 8098 	beq.w	8005d94 <HAL_RCC_OscConfig+0x184>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f040 8093 	bne.w	8005d94 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e3cc      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c7a:	d106      	bne.n	8005c8a <HAL_RCC_OscConfig+0x7a>
 8005c7c:	4b82      	ldr	r3, [pc, #520]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a81      	ldr	r2, [pc, #516]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	e058      	b.n	8005d3c <HAL_RCC_OscConfig+0x12c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d112      	bne.n	8005cb8 <HAL_RCC_OscConfig+0xa8>
 8005c92:	4b7d      	ldr	r3, [pc, #500]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a7c      	ldr	r2, [pc, #496]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	4b7a      	ldr	r3, [pc, #488]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a79      	ldr	r2, [pc, #484]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005ca4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	4b77      	ldr	r3, [pc, #476]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a76      	ldr	r2, [pc, #472]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	e041      	b.n	8005d3c <HAL_RCC_OscConfig+0x12c>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cc0:	d112      	bne.n	8005ce8 <HAL_RCC_OscConfig+0xd8>
 8005cc2:	4b71      	ldr	r3, [pc, #452]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a70      	ldr	r2, [pc, #448]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	4b6e      	ldr	r3, [pc, #440]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a6d      	ldr	r2, [pc, #436]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005cd4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	4b6b      	ldr	r3, [pc, #428]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a6a      	ldr	r2, [pc, #424]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	e029      	b.n	8005d3c <HAL_RCC_OscConfig+0x12c>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005cf0:	d112      	bne.n	8005d18 <HAL_RCC_OscConfig+0x108>
 8005cf2:	4b65      	ldr	r3, [pc, #404]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a64      	ldr	r2, [pc, #400]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	4b62      	ldr	r3, [pc, #392]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a61      	ldr	r2, [pc, #388]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005d04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	4b5f      	ldr	r3, [pc, #380]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a5e      	ldr	r2, [pc, #376]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	e011      	b.n	8005d3c <HAL_RCC_OscConfig+0x12c>
 8005d18:	4b5b      	ldr	r3, [pc, #364]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a5a      	ldr	r2, [pc, #360]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	4b58      	ldr	r3, [pc, #352]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a57      	ldr	r2, [pc, #348]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d2e:	6013      	str	r3, [r2, #0]
 8005d30:	4b55      	ldr	r3, [pc, #340]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a54      	ldr	r2, [pc, #336]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005d36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d013      	beq.n	8005d6c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d44:	f7fb fe3a 	bl	80019bc <HAL_GetTick>
 8005d48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d4c:	f7fb fe36 	bl	80019bc <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b64      	cmp	r3, #100	; 0x64
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e356      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d5e:	4b4a      	ldr	r3, [pc, #296]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0f0      	beq.n	8005d4c <HAL_RCC_OscConfig+0x13c>
 8005d6a:	e014      	b.n	8005d96 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6c:	f7fb fe26 	bl	80019bc <HAL_GetTick>
 8005d70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d74:	f7fb fe22 	bl	80019bc <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b64      	cmp	r3, #100	; 0x64
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e342      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d86:	4b40      	ldr	r3, [pc, #256]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f0      	bne.n	8005d74 <HAL_RCC_OscConfig+0x164>
 8005d92:	e000      	b.n	8005d96 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 808d 	beq.w	8005ebe <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005da4:	4b38      	ldr	r3, [pc, #224]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005dae:	4b36      	ldr	r3, [pc, #216]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d007      	beq.n	8005dca <HAL_RCC_OscConfig+0x1ba>
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	2b18      	cmp	r3, #24
 8005dbe:	d137      	bne.n	8005e30 <HAL_RCC_OscConfig+0x220>
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d132      	bne.n	8005e30 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dca:	4b2f      	ldr	r3, [pc, #188]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0304 	and.w	r3, r3, #4
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_RCC_OscConfig+0x1d2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e314      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005de2:	4b29      	ldr	r3, [pc, #164]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f023 0219 	bic.w	r2, r3, #25
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	4926      	ldr	r1, [pc, #152]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005df4:	f7fb fde2 	bl	80019bc <HAL_GetTick>
 8005df8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dfc:	f7fb fdde 	bl	80019bc <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e2fe      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e0e:	4b1e      	ldr	r3, [pc, #120]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0f0      	beq.n	8005dfc <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e1a:	4b1b      	ldr	r3, [pc, #108]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	061b      	lsls	r3, r3, #24
 8005e28:	4917      	ldr	r1, [pc, #92]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e2e:	e046      	b.n	8005ebe <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d029      	beq.n	8005e8c <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e38:	4b13      	ldr	r3, [pc, #76]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f023 0219 	bic.w	r2, r3, #25
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4910      	ldr	r1, [pc, #64]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4a:	f7fb fdb7 	bl	80019bc <HAL_GetTick>
 8005e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e50:	e008      	b.n	8005e64 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e52:	f7fb fdb3 	bl	80019bc <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d901      	bls.n	8005e64 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e2d3      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e64:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0f0      	beq.n	8005e52 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	061b      	lsls	r3, r3, #24
 8005e7e:	4902      	ldr	r1, [pc, #8]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	604b      	str	r3, [r1, #4]
 8005e84:	e01b      	b.n	8005ebe <HAL_RCC_OscConfig+0x2ae>
 8005e86:	bf00      	nop
 8005e88:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e8c:	4b97      	ldr	r3, [pc, #604]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a96      	ldr	r2, [pc, #600]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005e92:	f023 0301 	bic.w	r3, r3, #1
 8005e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fb fd90 	bl	80019bc <HAL_GetTick>
 8005e9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ea0:	f7fb fd8c 	bl	80019bc <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e2ac      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005eb2:	4b8e      	ldr	r3, [pc, #568]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1f0      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0310 	and.w	r3, r3, #16
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d06a      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eca:	4b88      	ldr	r3, [pc, #544]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ed2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ed4:	4b85      	ldr	r3, [pc, #532]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d007      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x2e0>
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	2b18      	cmp	r3, #24
 8005ee4:	d11b      	bne.n	8005f1e <HAL_RCC_OscConfig+0x30e>
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f003 0303 	and.w	r3, r3, #3
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d116      	bne.n	8005f1e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ef0:	4b7e      	ldr	r3, [pc, #504]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <HAL_RCC_OscConfig+0x2f8>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	2b80      	cmp	r3, #128	; 0x80
 8005f02:	d001      	beq.n	8005f08 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e281      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f08:	4b78      	ldr	r3, [pc, #480]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	061b      	lsls	r3, r3, #24
 8005f16:	4975      	ldr	r1, [pc, #468]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f1c:	e040      	b.n	8005fa0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d023      	beq.n	8005f6e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005f26:	4b71      	ldr	r3, [pc, #452]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a70      	ldr	r2, [pc, #448]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f32:	f7fb fd43 	bl	80019bc <HAL_GetTick>
 8005f36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005f3a:	f7fb fd3f 	bl	80019bc <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e25f      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f4c:	4b67      	ldr	r3, [pc, #412]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0f0      	beq.n	8005f3a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f58:	4b64      	ldr	r3, [pc, #400]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	061b      	lsls	r3, r3, #24
 8005f66:	4961      	ldr	r1, [pc, #388]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60cb      	str	r3, [r1, #12]
 8005f6c:	e018      	b.n	8005fa0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f6e:	4b5f      	ldr	r3, [pc, #380]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a5e      	ldr	r2, [pc, #376]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7a:	f7fb fd1f 	bl	80019bc <HAL_GetTick>
 8005f7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005f82:	f7fb fd1b 	bl	80019bc <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e23b      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f94:	4b55      	ldr	r3, [pc, #340]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1f0      	bne.n	8005f82 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0308 	and.w	r3, r3, #8
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d036      	beq.n	800601a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d019      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fb4:	4b4d      	ldr	r3, [pc, #308]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb8:	4a4c      	ldr	r2, [pc, #304]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005fba:	f043 0301 	orr.w	r3, r3, #1
 8005fbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc0:	f7fb fcfc 	bl	80019bc <HAL_GetTick>
 8005fc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fc8:	f7fb fcf8 	bl	80019bc <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e218      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005fda:	4b44      	ldr	r3, [pc, #272]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0f0      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x3b8>
 8005fe6:	e018      	b.n	800601a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fe8:	4b40      	ldr	r3, [pc, #256]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fec:	4a3f      	ldr	r2, [pc, #252]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8005fee:	f023 0301 	bic.w	r3, r3, #1
 8005ff2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff4:	f7fb fce2 	bl	80019bc <HAL_GetTick>
 8005ff8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ffc:	f7fb fcde 	bl	80019bc <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e1fe      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800600e:	4b37      	ldr	r3, [pc, #220]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8006010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1f0      	bne.n	8005ffc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b00      	cmp	r3, #0
 8006024:	d036      	beq.n	8006094 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d019      	beq.n	8006062 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800602e:	4b2f      	ldr	r3, [pc, #188]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a2e      	ldr	r2, [pc, #184]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8006034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006038:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800603a:	f7fb fcbf 	bl	80019bc <HAL_GetTick>
 800603e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006040:	e008      	b.n	8006054 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006042:	f7fb fcbb 	bl	80019bc <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e1db      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006054:	4b25      	ldr	r3, [pc, #148]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0f0      	beq.n	8006042 <HAL_RCC_OscConfig+0x432>
 8006060:	e018      	b.n	8006094 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006062:	4b22      	ldr	r3, [pc, #136]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a21      	ldr	r2, [pc, #132]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 8006068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800606c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800606e:	f7fb fca5 	bl	80019bc <HAL_GetTick>
 8006072:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006074:	e008      	b.n	8006088 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006076:	f7fb fca1 	bl	80019bc <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e1c1      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006088:	4b18      	ldr	r3, [pc, #96]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1f0      	bne.n	8006076 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0304 	and.w	r3, r3, #4
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 80af 	beq.w	8006200 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80060a2:	4b13      	ldr	r3, [pc, #76]	; (80060f0 <HAL_RCC_OscConfig+0x4e0>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a12      	ldr	r2, [pc, #72]	; (80060f0 <HAL_RCC_OscConfig+0x4e0>)
 80060a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060ae:	f7fb fc85 	bl	80019bc <HAL_GetTick>
 80060b2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060b4:	e008      	b.n	80060c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80060b6:	f7fb fc81 	bl	80019bc <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b64      	cmp	r3, #100	; 0x64
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e1a1      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060c8:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <HAL_RCC_OscConfig+0x4e0>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0f0      	beq.n	80060b6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d10b      	bne.n	80060f4 <HAL_RCC_OscConfig+0x4e4>
 80060dc:	4b03      	ldr	r3, [pc, #12]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 80060de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e0:	4a02      	ldr	r2, [pc, #8]	; (80060ec <HAL_RCC_OscConfig+0x4dc>)
 80060e2:	f043 0301 	orr.w	r3, r3, #1
 80060e6:	6713      	str	r3, [r2, #112]	; 0x70
 80060e8:	e05b      	b.n	80061a2 <HAL_RCC_OscConfig+0x592>
 80060ea:	bf00      	nop
 80060ec:	58024400 	.word	0x58024400
 80060f0:	58024800 	.word	0x58024800
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d112      	bne.n	8006122 <HAL_RCC_OscConfig+0x512>
 80060fc:	4b9d      	ldr	r3, [pc, #628]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 80060fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006100:	4a9c      	ldr	r2, [pc, #624]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006102:	f023 0301 	bic.w	r3, r3, #1
 8006106:	6713      	str	r3, [r2, #112]	; 0x70
 8006108:	4b9a      	ldr	r3, [pc, #616]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800610a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610c:	4a99      	ldr	r2, [pc, #612]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800610e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006112:	6713      	str	r3, [r2, #112]	; 0x70
 8006114:	4b97      	ldr	r3, [pc, #604]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006118:	4a96      	ldr	r2, [pc, #600]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800611a:	f023 0304 	bic.w	r3, r3, #4
 800611e:	6713      	str	r3, [r2, #112]	; 0x70
 8006120:	e03f      	b.n	80061a2 <HAL_RCC_OscConfig+0x592>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	2b05      	cmp	r3, #5
 8006128:	d112      	bne.n	8006150 <HAL_RCC_OscConfig+0x540>
 800612a:	4b92      	ldr	r3, [pc, #584]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800612c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612e:	4a91      	ldr	r2, [pc, #580]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006130:	f043 0304 	orr.w	r3, r3, #4
 8006134:	6713      	str	r3, [r2, #112]	; 0x70
 8006136:	4b8f      	ldr	r3, [pc, #572]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613a:	4a8e      	ldr	r2, [pc, #568]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800613c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006140:	6713      	str	r3, [r2, #112]	; 0x70
 8006142:	4b8c      	ldr	r3, [pc, #560]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	4a8b      	ldr	r2, [pc, #556]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006148:	f043 0301 	orr.w	r3, r3, #1
 800614c:	6713      	str	r3, [r2, #112]	; 0x70
 800614e:	e028      	b.n	80061a2 <HAL_RCC_OscConfig+0x592>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	2b85      	cmp	r3, #133	; 0x85
 8006156:	d112      	bne.n	800617e <HAL_RCC_OscConfig+0x56e>
 8006158:	4b86      	ldr	r3, [pc, #536]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800615a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615c:	4a85      	ldr	r2, [pc, #532]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800615e:	f043 0304 	orr.w	r3, r3, #4
 8006162:	6713      	str	r3, [r2, #112]	; 0x70
 8006164:	4b83      	ldr	r3, [pc, #524]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006168:	4a82      	ldr	r2, [pc, #520]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800616a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616e:	6713      	str	r3, [r2, #112]	; 0x70
 8006170:	4b80      	ldr	r3, [pc, #512]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006174:	4a7f      	ldr	r2, [pc, #508]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006176:	f043 0301 	orr.w	r3, r3, #1
 800617a:	6713      	str	r3, [r2, #112]	; 0x70
 800617c:	e011      	b.n	80061a2 <HAL_RCC_OscConfig+0x592>
 800617e:	4b7d      	ldr	r3, [pc, #500]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006182:	4a7c      	ldr	r2, [pc, #496]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	6713      	str	r3, [r2, #112]	; 0x70
 800618a:	4b7a      	ldr	r3, [pc, #488]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800618c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618e:	4a79      	ldr	r2, [pc, #484]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006190:	f023 0304 	bic.w	r3, r3, #4
 8006194:	6713      	str	r3, [r2, #112]	; 0x70
 8006196:	4b77      	ldr	r3, [pc, #476]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619a:	4a76      	ldr	r2, [pc, #472]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800619c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d015      	beq.n	80061d6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061aa:	f7fb fc07 	bl	80019bc <HAL_GetTick>
 80061ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061b0:	e00a      	b.n	80061c8 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061b2:	f7fb fc03 	bl	80019bc <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e121      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061c8:	4b6a      	ldr	r3, [pc, #424]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 80061ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0ee      	beq.n	80061b2 <HAL_RCC_OscConfig+0x5a2>
 80061d4:	e014      	b.n	8006200 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d6:	f7fb fbf1 	bl	80019bc <HAL_GetTick>
 80061da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80061dc:	e00a      	b.n	80061f4 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061de:	f7fb fbed 	bl	80019bc <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e10b      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80061f4:	4b5f      	ldr	r3, [pc, #380]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 80061f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1ee      	bne.n	80061de <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 8100 	beq.w	800640a <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800620a:	4b5a      	ldr	r3, [pc, #360]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006212:	2b18      	cmp	r3, #24
 8006214:	f000 80bb 	beq.w	800638e <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	2b02      	cmp	r3, #2
 800621e:	f040 8095 	bne.w	800634c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006222:	4b54      	ldr	r3, [pc, #336]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a53      	ldr	r2, [pc, #332]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800622c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622e:	f7fb fbc5 	bl	80019bc <HAL_GetTick>
 8006232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006234:	e008      	b.n	8006248 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006236:	f7fb fbc1 	bl	80019bc <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e0e1      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006248:	4b4a      	ldr	r3, [pc, #296]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f0      	bne.n	8006236 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006254:	4b47      	ldr	r3, [pc, #284]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006258:	4b47      	ldr	r3, [pc, #284]	; (8006378 <HAL_RCC_OscConfig+0x768>)
 800625a:	4013      	ands	r3, r2
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006264:	0112      	lsls	r2, r2, #4
 8006266:	430a      	orrs	r2, r1
 8006268:	4942      	ldr	r1, [pc, #264]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800626a:	4313      	orrs	r3, r2
 800626c:	628b      	str	r3, [r1, #40]	; 0x28
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006272:	3b01      	subs	r3, #1
 8006274:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627c:	3b01      	subs	r3, #1
 800627e:	025b      	lsls	r3, r3, #9
 8006280:	b29b      	uxth	r3, r3
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	3b01      	subs	r3, #1
 800628a:	041b      	lsls	r3, r3, #16
 800628c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006296:	3b01      	subs	r3, #1
 8006298:	061b      	lsls	r3, r3, #24
 800629a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800629e:	4935      	ldr	r1, [pc, #212]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80062a4:	4b33      	ldr	r3, [pc, #204]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 80062a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a8:	4a32      	ldr	r2, [pc, #200]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 80062aa:	f023 0301 	bic.w	r3, r3, #1
 80062ae:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062b0:	4b30      	ldr	r3, [pc, #192]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 80062b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b4:	4b31      	ldr	r3, [pc, #196]	; (800637c <HAL_RCC_OscConfig+0x76c>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80062bc:	00d2      	lsls	r2, r2, #3
 80062be:	492d      	ldr	r1, [pc, #180]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80062c4:	4b2b      	ldr	r3, [pc, #172]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 80062c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c8:	f023 020c 	bic.w	r2, r3, #12
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d0:	4928      	ldr	r1, [pc, #160]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80062d6:	4b27      	ldr	r3, [pc, #156]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 80062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062da:	f023 0202 	bic.w	r2, r3, #2
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e2:	4924      	ldr	r1, [pc, #144]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062e8:	4b22      	ldr	r3, [pc, #136]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	4a21      	ldr	r2, [pc, #132]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 80062ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062f4:	4b1f      	ldr	r3, [pc, #124]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	4a1e      	ldr	r2, [pc, #120]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 80062fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006300:	4b1c      	ldr	r3, [pc, #112]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	4a1b      	ldr	r2, [pc, #108]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006306:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800630a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800630c:	4b19      	ldr	r3, [pc, #100]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	4a18      	ldr	r2, [pc, #96]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006312:	f043 0301 	orr.w	r3, r3, #1
 8006316:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006318:	4b16      	ldr	r3, [pc, #88]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a15      	ldr	r2, [pc, #84]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800631e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006324:	f7fb fb4a 	bl	80019bc <HAL_GetTick>
 8006328:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800632c:	f7fb fb46 	bl	80019bc <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e066      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800633e:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0f0      	beq.n	800632c <HAL_RCC_OscConfig+0x71c>
 800634a:	e05e      	b.n	800640a <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800634c:	4b09      	ldr	r3, [pc, #36]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a08      	ldr	r2, [pc, #32]	; (8006374 <HAL_RCC_OscConfig+0x764>)
 8006352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006358:	f7fb fb30 	bl	80019bc <HAL_GetTick>
 800635c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800635e:	e00f      	b.n	8006380 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006360:	f7fb fb2c 	bl	80019bc <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d908      	bls.n	8006380 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e04c      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
 8006372:	bf00      	nop
 8006374:	58024400 	.word	0x58024400
 8006378:	fffffc0c 	.word	0xfffffc0c
 800637c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006380:	4b24      	ldr	r3, [pc, #144]	; (8006414 <HAL_RCC_OscConfig+0x804>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e9      	bne.n	8006360 <HAL_RCC_OscConfig+0x750>
 800638c:	e03d      	b.n	800640a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800638e:	4b21      	ldr	r3, [pc, #132]	; (8006414 <HAL_RCC_OscConfig+0x804>)
 8006390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006392:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006394:	4b1f      	ldr	r3, [pc, #124]	; (8006414 <HAL_RCC_OscConfig+0x804>)
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d031      	beq.n	8006406 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f003 0203 	and.w	r2, r3, #3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d12a      	bne.n	8006406 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	091b      	lsrs	r3, r3, #4
 80063b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063bc:	429a      	cmp	r2, r3
 80063be:	d122      	bne.n	8006406 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d11a      	bne.n	8006406 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	0a5b      	lsrs	r3, r3, #9
 80063d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063dc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80063de:	429a      	cmp	r2, r3
 80063e0:	d111      	bne.n	8006406 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	0c1b      	lsrs	r3, r3, #16
 80063e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d108      	bne.n	8006406 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	0e1b      	lsrs	r3, r3, #24
 80063f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006400:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006402:	429a      	cmp	r2, r3
 8006404:	d001      	beq.n	800640a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e000      	b.n	800640c <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3730      	adds	r7, #48	; 0x30
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	58024400 	.word	0x58024400

08006418 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e19c      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800642c:	4b8a      	ldr	r3, [pc, #552]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 030f 	and.w	r3, r3, #15
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d910      	bls.n	800645c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800643a:	4b87      	ldr	r3, [pc, #540]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f023 020f 	bic.w	r2, r3, #15
 8006442:	4985      	ldr	r1, [pc, #532]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	4313      	orrs	r3, r2
 8006448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800644a:	4b83      	ldr	r3, [pc, #524]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d001      	beq.n	800645c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e184      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d010      	beq.n	800648a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	4b7b      	ldr	r3, [pc, #492]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006474:	429a      	cmp	r2, r3
 8006476:	d908      	bls.n	800648a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006478:	4b78      	ldr	r3, [pc, #480]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	4975      	ldr	r1, [pc, #468]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006486:	4313      	orrs	r3, r2
 8006488:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0308 	and.w	r3, r3, #8
 8006492:	2b00      	cmp	r3, #0
 8006494:	d010      	beq.n	80064b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695a      	ldr	r2, [r3, #20]
 800649a:	4b70      	ldr	r3, [pc, #448]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d908      	bls.n	80064b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064a6:	4b6d      	ldr	r3, [pc, #436]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	496a      	ldr	r1, [pc, #424]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0310 	and.w	r3, r3, #16
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d010      	beq.n	80064e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699a      	ldr	r2, [r3, #24]
 80064c8:	4b64      	ldr	r3, [pc, #400]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d908      	bls.n	80064e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064d4:	4b61      	ldr	r3, [pc, #388]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	495e      	ldr	r1, [pc, #376]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d010      	beq.n	8006514 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69da      	ldr	r2, [r3, #28]
 80064f6:	4b59      	ldr	r3, [pc, #356]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064fe:	429a      	cmp	r2, r3
 8006500:	d908      	bls.n	8006514 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006502:	4b56      	ldr	r3, [pc, #344]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	4953      	ldr	r1, [pc, #332]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006510:	4313      	orrs	r3, r2
 8006512:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d010      	beq.n	8006542 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	4b4d      	ldr	r3, [pc, #308]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	429a      	cmp	r2, r3
 800652e:	d908      	bls.n	8006542 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006530:	4b4a      	ldr	r3, [pc, #296]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	f023 020f 	bic.w	r2, r3, #15
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	4947      	ldr	r1, [pc, #284]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800653e:	4313      	orrs	r3, r2
 8006540:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d055      	beq.n	80065fa <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800654e:	4b43      	ldr	r3, [pc, #268]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	4940      	ldr	r1, [pc, #256]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800655c:	4313      	orrs	r3, r2
 800655e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d107      	bne.n	8006578 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006568:	4b3c      	ldr	r3, [pc, #240]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d121      	bne.n	80065b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e0f6      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	2b03      	cmp	r3, #3
 800657e:	d107      	bne.n	8006590 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006580:	4b36      	ldr	r3, [pc, #216]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d115      	bne.n	80065b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e0ea      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d107      	bne.n	80065a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006598:	4b30      	ldr	r3, [pc, #192]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d109      	bne.n	80065b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e0de      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065a8:	4b2c      	ldr	r3, [pc, #176]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e0d6      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065b8:	4b28      	ldr	r3, [pc, #160]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f023 0207 	bic.w	r2, r3, #7
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	4925      	ldr	r1, [pc, #148]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ca:	f7fb f9f7 	bl	80019bc <HAL_GetTick>
 80065ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d0:	e00a      	b.n	80065e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d2:	f7fb f9f3 	bl	80019bc <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e0be      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e8:	4b1c      	ldr	r3, [pc, #112]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d1eb      	bne.n	80065d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d010      	beq.n	8006628 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	4b14      	ldr	r3, [pc, #80]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	429a      	cmp	r2, r3
 8006614:	d208      	bcs.n	8006628 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006616:	4b11      	ldr	r3, [pc, #68]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f023 020f 	bic.w	r2, r3, #15
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	490e      	ldr	r1, [pc, #56]	; (800665c <HAL_RCC_ClockConfig+0x244>)
 8006624:	4313      	orrs	r3, r2
 8006626:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006628:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d214      	bcs.n	8006660 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006636:	4b08      	ldr	r3, [pc, #32]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f023 020f 	bic.w	r2, r3, #15
 800663e:	4906      	ldr	r1, [pc, #24]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	4313      	orrs	r3, r2
 8006644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006646:	4b04      	ldr	r3, [pc, #16]	; (8006658 <HAL_RCC_ClockConfig+0x240>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 030f 	and.w	r3, r3, #15
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d005      	beq.n	8006660 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e086      	b.n	8006766 <HAL_RCC_ClockConfig+0x34e>
 8006658:	52002000 	.word	0x52002000
 800665c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d010      	beq.n	800668e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	4b3f      	ldr	r3, [pc, #252]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006678:	429a      	cmp	r2, r3
 800667a:	d208      	bcs.n	800668e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800667c:	4b3c      	ldr	r3, [pc, #240]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	4939      	ldr	r1, [pc, #228]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 800668a:	4313      	orrs	r3, r2
 800668c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0308 	and.w	r3, r3, #8
 8006696:	2b00      	cmp	r3, #0
 8006698:	d010      	beq.n	80066bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	695a      	ldr	r2, [r3, #20]
 800669e:	4b34      	ldr	r3, [pc, #208]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d208      	bcs.n	80066bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066aa:	4b31      	ldr	r3, [pc, #196]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	492e      	ldr	r1, [pc, #184]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0310 	and.w	r3, r3, #16
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d010      	beq.n	80066ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699a      	ldr	r2, [r3, #24]
 80066cc:	4b28      	ldr	r3, [pc, #160]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d208      	bcs.n	80066ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066d8:	4b25      	ldr	r3, [pc, #148]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	4922      	ldr	r1, [pc, #136]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0320 	and.w	r3, r3, #32
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d010      	beq.n	8006718 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69da      	ldr	r2, [r3, #28]
 80066fa:	4b1d      	ldr	r3, [pc, #116]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006702:	429a      	cmp	r2, r3
 8006704:	d208      	bcs.n	8006718 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006706:	4b1a      	ldr	r3, [pc, #104]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	4917      	ldr	r1, [pc, #92]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 8006714:	4313      	orrs	r3, r2
 8006716:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006718:	f000 f834 	bl	8006784 <HAL_RCC_GetSysClockFreq>
 800671c:	4602      	mov	r2, r0
 800671e:	4b14      	ldr	r3, [pc, #80]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	0a1b      	lsrs	r3, r3, #8
 8006724:	f003 030f 	and.w	r3, r3, #15
 8006728:	4912      	ldr	r1, [pc, #72]	; (8006774 <HAL_RCC_ClockConfig+0x35c>)
 800672a:	5ccb      	ldrb	r3, [r1, r3]
 800672c:	f003 031f 	and.w	r3, r3, #31
 8006730:	fa22 f303 	lsr.w	r3, r2, r3
 8006734:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006736:	4b0e      	ldr	r3, [pc, #56]	; (8006770 <HAL_RCC_ClockConfig+0x358>)
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	4a0d      	ldr	r2, [pc, #52]	; (8006774 <HAL_RCC_ClockConfig+0x35c>)
 8006740:	5cd3      	ldrb	r3, [r2, r3]
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	fa22 f303 	lsr.w	r3, r2, r3
 800674c:	4a0a      	ldr	r2, [pc, #40]	; (8006778 <HAL_RCC_ClockConfig+0x360>)
 800674e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006750:	4a0a      	ldr	r2, [pc, #40]	; (800677c <HAL_RCC_ClockConfig+0x364>)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006756:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <HAL_RCC_ClockConfig+0x368>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4618      	mov	r0, r3
 800675c:	f7fb f8e4 	bl	8001928 <HAL_InitTick>
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	58024400 	.word	0x58024400
 8006774:	0800a700 	.word	0x0800a700
 8006778:	24000004 	.word	0x24000004
 800677c:	24000000 	.word	0x24000000
 8006780:	24000008 	.word	0x24000008

08006784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006784:	b480      	push	{r7}
 8006786:	b089      	sub	sp, #36	; 0x24
 8006788:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800678a:	4bb3      	ldr	r3, [pc, #716]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006792:	2b18      	cmp	r3, #24
 8006794:	f200 8155 	bhi.w	8006a42 <HAL_RCC_GetSysClockFreq+0x2be>
 8006798:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	08006805 	.word	0x08006805
 80067a4:	08006a43 	.word	0x08006a43
 80067a8:	08006a43 	.word	0x08006a43
 80067ac:	08006a43 	.word	0x08006a43
 80067b0:	08006a43 	.word	0x08006a43
 80067b4:	08006a43 	.word	0x08006a43
 80067b8:	08006a43 	.word	0x08006a43
 80067bc:	08006a43 	.word	0x08006a43
 80067c0:	0800682b 	.word	0x0800682b
 80067c4:	08006a43 	.word	0x08006a43
 80067c8:	08006a43 	.word	0x08006a43
 80067cc:	08006a43 	.word	0x08006a43
 80067d0:	08006a43 	.word	0x08006a43
 80067d4:	08006a43 	.word	0x08006a43
 80067d8:	08006a43 	.word	0x08006a43
 80067dc:	08006a43 	.word	0x08006a43
 80067e0:	08006831 	.word	0x08006831
 80067e4:	08006a43 	.word	0x08006a43
 80067e8:	08006a43 	.word	0x08006a43
 80067ec:	08006a43 	.word	0x08006a43
 80067f0:	08006a43 	.word	0x08006a43
 80067f4:	08006a43 	.word	0x08006a43
 80067f8:	08006a43 	.word	0x08006a43
 80067fc:	08006a43 	.word	0x08006a43
 8006800:	08006837 	.word	0x08006837
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006804:	4b94      	ldr	r3, [pc, #592]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	2b00      	cmp	r3, #0
 800680e:	d009      	beq.n	8006824 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006810:	4b91      	ldr	r3, [pc, #580]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	08db      	lsrs	r3, r3, #3
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	4a90      	ldr	r2, [pc, #576]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800681c:	fa22 f303 	lsr.w	r3, r2, r3
 8006820:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006822:	e111      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006824:	4b8d      	ldr	r3, [pc, #564]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006826:	61bb      	str	r3, [r7, #24]
    break;
 8006828:	e10e      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800682a:	4b8d      	ldr	r3, [pc, #564]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800682c:	61bb      	str	r3, [r7, #24]
    break;
 800682e:	e10b      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006830:	4b8c      	ldr	r3, [pc, #560]	; (8006a64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006832:	61bb      	str	r3, [r7, #24]
    break;
 8006834:	e108      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006836:	4b88      	ldr	r3, [pc, #544]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	f003 0303 	and.w	r3, r3, #3
 800683e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006840:	4b85      	ldr	r3, [pc, #532]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006844:	091b      	lsrs	r3, r3, #4
 8006846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800684a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800684c:	4b82      	ldr	r3, [pc, #520]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006856:	4b80      	ldr	r3, [pc, #512]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685a:	08db      	lsrs	r3, r3, #3
 800685c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	fb02 f303 	mul.w	r3, r2, r3
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 80e1 	beq.w	8006a3c <HAL_RCC_GetSysClockFreq+0x2b8>
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b02      	cmp	r3, #2
 800687e:	f000 8083 	beq.w	8006988 <HAL_RCC_GetSysClockFreq+0x204>
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	2b02      	cmp	r3, #2
 8006886:	f200 80a1 	bhi.w	80069cc <HAL_RCC_GetSysClockFreq+0x248>
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <HAL_RCC_GetSysClockFreq+0x114>
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d056      	beq.n	8006944 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006896:	e099      	b.n	80069cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006898:	4b6f      	ldr	r3, [pc, #444]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d02d      	beq.n	8006900 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068a4:	4b6c      	ldr	r3, [pc, #432]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	08db      	lsrs	r3, r3, #3
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	4a6b      	ldr	r2, [pc, #428]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068b0:	fa22 f303 	lsr.w	r3, r2, r3
 80068b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	ee07 3a90 	vmov	s15, r3
 80068bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ce:	4b62      	ldr	r3, [pc, #392]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d6:	ee07 3a90 	vmov	s15, r3
 80068da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068de:	ed97 6a02 	vldr	s12, [r7, #8]
 80068e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80068fe:	e087      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006a6c <HAL_RCC_GetSysClockFreq+0x2e8>
 800690e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006912:	4b51      	ldr	r3, [pc, #324]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006922:	ed97 6a02 	vldr	s12, [r7, #8]
 8006926:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800692a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800692e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800693a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006942:	e065      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006956:	4b40      	ldr	r3, [pc, #256]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006966:	ed97 6a02 	vldr	s12, [r7, #8]
 800696a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 800696e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800697a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800697e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006982:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006986:	e043      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006992:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006a74 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800699a:	4b2f      	ldr	r3, [pc, #188]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a2:	ee07 3a90 	vmov	s15, r3
 80069a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80069ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069ca:	e021      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	ee07 3a90 	vmov	s15, r3
 80069d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006a70 <HAL_RCC_GetSysClockFreq+0x2ec>
 80069da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069de:	4b1e      	ldr	r3, [pc, #120]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80069f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006a68 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a0e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006a10:	4b11      	ldr	r3, [pc, #68]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a14:	0a5b      	lsrs	r3, r3, #9
 8006a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	ee07 3a90 	vmov	s15, r3
 8006a24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a34:	ee17 3a90 	vmov	r3, s15
 8006a38:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006a3a:	e005      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	61bb      	str	r3, [r7, #24]
    break;
 8006a40:	e002      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006a42:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a44:	61bb      	str	r3, [r7, #24]
    break;
 8006a46:	bf00      	nop
  }

  return sysclockfreq;
 8006a48:	69bb      	ldr	r3, [r7, #24]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3724      	adds	r7, #36	; 0x24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	58024400 	.word	0x58024400
 8006a5c:	03d09000 	.word	0x03d09000
 8006a60:	003d0900 	.word	0x003d0900
 8006a64:	007a1200 	.word	0x007a1200
 8006a68:	46000000 	.word	0x46000000
 8006a6c:	4c742400 	.word	0x4c742400
 8006a70:	4a742400 	.word	0x4a742400
 8006a74:	4af42400 	.word	0x4af42400

08006a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006a7e:	f7ff fe81 	bl	8006784 <HAL_RCC_GetSysClockFreq>
 8006a82:	4602      	mov	r2, r0
 8006a84:	4b10      	ldr	r3, [pc, #64]	; (8006ac8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	0a1b      	lsrs	r3, r3, #8
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	490f      	ldr	r1, [pc, #60]	; (8006acc <HAL_RCC_GetHCLKFreq+0x54>)
 8006a90:	5ccb      	ldrb	r3, [r1, r3]
 8006a92:	f003 031f 	and.w	r3, r3, #31
 8006a96:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006a9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ac8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	f003 030f 	and.w	r3, r3, #15
 8006aa4:	4a09      	ldr	r2, [pc, #36]	; (8006acc <HAL_RCC_GetHCLKFreq+0x54>)
 8006aa6:	5cd3      	ldrb	r3, [r2, r3]
 8006aa8:	f003 031f 	and.w	r3, r3, #31
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab2:	4a07      	ldr	r2, [pc, #28]	; (8006ad0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ab4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ab6:	4a07      	ldr	r2, [pc, #28]	; (8006ad4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006abc:	4b04      	ldr	r3, [pc, #16]	; (8006ad0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006abe:	681b      	ldr	r3, [r3, #0]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	58024400 	.word	0x58024400
 8006acc:	0800a700 	.word	0x0800a700
 8006ad0:	24000004 	.word	0x24000004
 8006ad4:	24000000 	.word	0x24000000

08006ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006adc:	f7ff ffcc 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	4b06      	ldr	r3, [pc, #24]	; (8006afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	091b      	lsrs	r3, r3, #4
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	4904      	ldr	r1, [pc, #16]	; (8006b00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006aee:	5ccb      	ldrb	r3, [r1, r3]
 8006af0:	f003 031f 	and.w	r3, r3, #31
 8006af4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	58024400 	.word	0x58024400
 8006b00:	0800a700 	.word	0x0800a700

08006b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006b08:	f7ff ffb6 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	0a1b      	lsrs	r3, r3, #8
 8006b14:	f003 0307 	and.w	r3, r3, #7
 8006b18:	4904      	ldr	r1, [pc, #16]	; (8006b2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b1a:	5ccb      	ldrb	r3, [r1, r3]
 8006b1c:	f003 031f 	and.w	r3, r3, #31
 8006b20:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	58024400 	.word	0x58024400
 8006b2c:	0800a700 	.word	0x0800a700

08006b30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b38:	2300      	movs	r3, #0
 8006b3a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d03f      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b54:	d02a      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006b56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b5a:	d824      	bhi.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b60:	d018      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b66:	d81e      	bhi.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b70:	d007      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006b72:	e018      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b74:	4b9f      	ldr	r3, [pc, #636]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b78:	4a9e      	ldr	r2, [pc, #632]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006b80:	e015      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3304      	adds	r3, #4
 8006b86:	2102      	movs	r1, #2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 ff1b 	bl	80089c4 <RCCEx_PLL2_Config>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006b92:	e00c      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3324      	adds	r3, #36	; 0x24
 8006b98:	2102      	movs	r1, #2
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f001 ffc4 	bl	8008b28 <RCCEx_PLL3_Config>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ba4:	e003      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8006baa:	e000      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bae:	7dfb      	ldrb	r3, [r7, #23]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d109      	bne.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006bb4:	4b8f      	ldr	r3, [pc, #572]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bc0:	498c      	ldr	r1, [pc, #560]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	650b      	str	r3, [r1, #80]	; 0x50
 8006bc6:	e001      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d03d      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d826      	bhi.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006be0:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be6:	bf00      	nop
 8006be8:	08006bfd 	.word	0x08006bfd
 8006bec:	08006c0b 	.word	0x08006c0b
 8006bf0:	08006c1d 	.word	0x08006c1d
 8006bf4:	08006c35 	.word	0x08006c35
 8006bf8:	08006c35 	.word	0x08006c35
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bfc:	4b7d      	ldr	r3, [pc, #500]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	4a7c      	ldr	r2, [pc, #496]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c08:	e015      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	2100      	movs	r1, #0
 8006c10:	4618      	mov	r0, r3
 8006c12:	f001 fed7 	bl	80089c4 <RCCEx_PLL2_Config>
 8006c16:	4603      	mov	r3, r0
 8006c18:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c1a:	e00c      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3324      	adds	r3, #36	; 0x24
 8006c20:	2100      	movs	r1, #0
 8006c22:	4618      	mov	r0, r3
 8006c24:	f001 ff80 	bl	8008b28 <RCCEx_PLL3_Config>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c2c:	e003      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	75fb      	strb	r3, [r7, #23]
      break;
 8006c32:	e000      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d109      	bne.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c3c:	4b6d      	ldr	r3, [pc, #436]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c40:	f023 0207 	bic.w	r2, r3, #7
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c48:	496a      	ldr	r1, [pc, #424]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	650b      	str	r3, [r1, #80]	; 0x50
 8006c4e:	e001      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
 8006c52:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d04a      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c64:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006c68:	d031      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8006c6a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006c6e:	d82b      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c74:	d02d      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8006c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c7a:	d825      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006c7c:	2bc0      	cmp	r3, #192	; 0xc0
 8006c7e:	d02a      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006c80:	2bc0      	cmp	r3, #192	; 0xc0
 8006c82:	d821      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006c84:	2b80      	cmp	r3, #128	; 0x80
 8006c86:	d016      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006c88:	2b80      	cmp	r3, #128	; 0x80
 8006c8a:	d81d      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006c90:	2b40      	cmp	r3, #64	; 0x40
 8006c92:	d007      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8006c94:	e018      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c96:	4b57      	ldr	r3, [pc, #348]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9a:	4a56      	ldr	r2, [pc, #344]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006ca2:	e019      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	2100      	movs	r1, #0
 8006caa:	4618      	mov	r0, r3
 8006cac:	f001 fe8a 	bl	80089c4 <RCCEx_PLL2_Config>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006cb4:	e010      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	3324      	adds	r3, #36	; 0x24
 8006cba:	2100      	movs	r1, #0
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f001 ff33 	bl	8008b28 <RCCEx_PLL3_Config>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006cc6:	e007      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	75fb      	strb	r3, [r7, #23]
      break;
 8006ccc:	e004      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8006cce:	bf00      	nop
 8006cd0:	e002      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8006cd2:	bf00      	nop
 8006cd4:	e000      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8006cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cd8:	7dfb      	ldrb	r3, [r7, #23]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d109      	bne.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006cde:	4b45      	ldr	r3, [pc, #276]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cea:	4942      	ldr	r1, [pc, #264]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	650b      	str	r3, [r1, #80]	; 0x50
 8006cf0:	e001      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
 8006cf4:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d04f      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d06:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006d0a:	d036      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8006d0c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006d10:	d830      	bhi.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8006d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d16:	d032      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8006d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d1c:	d82a      	bhi.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8006d1e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d22:	d02e      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8006d24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d28:	d824      	bhi.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8006d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d2e:	d018      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8006d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d34:	d81e      	bhi.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8006d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d3e:	d007      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8006d40:	e018      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d42:	4b2c      	ldr	r3, [pc, #176]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d46:	4a2b      	ldr	r2, [pc, #172]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006d4e:	e019      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3304      	adds	r3, #4
 8006d54:	2100      	movs	r1, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 fe34 	bl	80089c4 <RCCEx_PLL2_Config>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006d60:	e010      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3324      	adds	r3, #36	; 0x24
 8006d66:	2100      	movs	r1, #0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f001 fedd 	bl	8008b28 <RCCEx_PLL3_Config>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006d72:	e007      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	75fb      	strb	r3, [r7, #23]
      break;
 8006d78:	e004      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8006d7a:	bf00      	nop
 8006d7c:	e002      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8006d7e:	bf00      	nop
 8006d80:	e000      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8006d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d109      	bne.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006d8a:	4b1a      	ldr	r3, [pc, #104]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d8e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d96:	4917      	ldr	r1, [pc, #92]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	650b      	str	r3, [r1, #80]	; 0x50
 8006d9c:	e001      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d034      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db2:	2b30      	cmp	r3, #48	; 0x30
 8006db4:	d01c      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006db6:	2b30      	cmp	r3, #48	; 0x30
 8006db8:	d817      	bhi.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006dba:	2b20      	cmp	r3, #32
 8006dbc:	d00c      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d813      	bhi.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d018      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8006dc6:	2b10      	cmp	r3, #16
 8006dc8:	d10f      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dca:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dce:	4a09      	ldr	r2, [pc, #36]	; (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006dd6:	e010      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	2102      	movs	r1, #2
 8006dde:	4618      	mov	r0, r3
 8006de0:	f001 fdf0 	bl	80089c4 <RCCEx_PLL2_Config>
 8006de4:	4603      	mov	r3, r0
 8006de6:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006de8:	e007      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	75fb      	strb	r3, [r7, #23]
      break;
 8006dee:	e004      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8006df0:	bf00      	nop
 8006df2:	e002      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006df4:	58024400 	.word	0x58024400
      break;
 8006df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dfa:	7dfb      	ldrb	r3, [r7, #23]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d109      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006e00:	4b9b      	ldr	r3, [pc, #620]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0c:	4998      	ldr	r1, [pc, #608]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e12:	e001      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d047      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e2c:	d030      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006e2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e32:	d82a      	bhi.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006e34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e38:	d02c      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8006e3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e3e:	d824      	bhi.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e44:	d018      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e4a:	d81e      	bhi.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8006e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e54:	d007      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006e56:	e018      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e58:	4b85      	ldr	r3, [pc, #532]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	4a84      	ldr	r2, [pc, #528]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006e64:	e017      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f001 fda9 	bl	80089c4 <RCCEx_PLL2_Config>
 8006e72:	4603      	mov	r3, r0
 8006e74:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006e76:	e00e      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	3324      	adds	r3, #36	; 0x24
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f001 fe52 	bl	8008b28 <RCCEx_PLL3_Config>
 8006e84:	4603      	mov	r3, r0
 8006e86:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006e88:	e005      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e8e:	e002      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8006e90:	bf00      	nop
 8006e92:	e000      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8006e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e96:	7dfb      	ldrb	r3, [r7, #23]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d109      	bne.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e9c:	4b74      	ldr	r3, [pc, #464]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea8:	4971      	ldr	r1, [pc, #452]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	650b      	str	r3, [r1, #80]	; 0x50
 8006eae:	e001      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d049      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ec8:	d02e      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006eca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ece:	d828      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006ed0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ed4:	d02a      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006ed6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006eda:	d822      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006edc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ee0:	d026      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006ee2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ee6:	d81c      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eec:	d010      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef2:	d816      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01d      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006efc:	d111      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3304      	adds	r3, #4
 8006f02:	2101      	movs	r1, #1
 8006f04:	4618      	mov	r0, r3
 8006f06:	f001 fd5d 	bl	80089c4 <RCCEx_PLL2_Config>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006f0e:	e012      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3324      	adds	r3, #36	; 0x24
 8006f14:	2101      	movs	r1, #1
 8006f16:	4618      	mov	r0, r3
 8006f18:	f001 fe06 	bl	8008b28 <RCCEx_PLL3_Config>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006f20:	e009      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	75fb      	strb	r3, [r7, #23]
      break;
 8006f26:	e006      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006f28:	bf00      	nop
 8006f2a:	e004      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006f2c:	bf00      	nop
 8006f2e:	e002      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006f30:	bf00      	nop
 8006f32:	e000      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f36:	7dfb      	ldrb	r3, [r7, #23]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d109      	bne.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f3c:	4b4c      	ldr	r3, [pc, #304]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f40:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f48:	4949      	ldr	r1, [pc, #292]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	650b      	str	r3, [r1, #80]	; 0x50
 8006f4e:	e001      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
 8006f52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d053      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f66:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006f6a:	d034      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006f6c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006f70:	d82e      	bhi.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f76:	d030      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8006f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f7c:	d828      	bhi.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f82:	d02c      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f88:	d822      	bhi.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006f8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f8e:	d028      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006f90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f94:	d81c      	bhi.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f9a:	d010      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8006f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fa0:	d816      	bhi.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d01f      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006faa:	d111      	bne.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f001 fd06 	bl	80089c4 <RCCEx_PLL2_Config>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006fbc:	e014      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	3324      	adds	r3, #36	; 0x24
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f001 fdaf 	bl	8008b28 <RCCEx_PLL3_Config>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006fce:	e00b      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd4:	e008      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006fd6:	bf00      	nop
 8006fd8:	e006      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006fda:	bf00      	nop
 8006fdc:	e004      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006fde:	bf00      	nop
 8006fe0:	e002      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006fe2:	bf00      	nop
 8006fe4:	e000      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10a      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006fee:	4b20      	ldr	r3, [pc, #128]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ffc:	491c      	ldr	r1, [pc, #112]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	658b      	str	r3, [r1, #88]	; 0x58
 8007002:	e001      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007004:	7dfb      	ldrb	r3, [r7, #23]
 8007006:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d031      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800701c:	d00e      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800701e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007022:	d814      	bhi.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007024:	2b00      	cmp	r3, #0
 8007026:	d015      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007028:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800702c:	d10f      	bne.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800702e:	4b10      	ldr	r3, [pc, #64]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007032:	4a0f      	ldr	r2, [pc, #60]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007038:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800703a:	e00c      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3304      	adds	r3, #4
 8007040:	2101      	movs	r1, #1
 8007042:	4618      	mov	r0, r3
 8007044:	f001 fcbe 	bl	80089c4 <RCCEx_PLL2_Config>
 8007048:	4603      	mov	r3, r0
 800704a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800704c:	e003      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	75fb      	strb	r3, [r7, #23]
      break;
 8007052:	e000      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8007054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007056:	7dfb      	ldrb	r3, [r7, #23]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10b      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800705c:	4b04      	ldr	r3, [pc, #16]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800705e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007060:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007068:	4901      	ldr	r1, [pc, #4]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800706a:	4313      	orrs	r3, r2
 800706c:	650b      	str	r3, [r1, #80]	; 0x50
 800706e:	e003      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8007070:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d032      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007088:	2b03      	cmp	r3, #3
 800708a:	d81b      	bhi.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800708c:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800708e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007092:	bf00      	nop
 8007094:	080070cb 	.word	0x080070cb
 8007098:	080070a5 	.word	0x080070a5
 800709c:	080070b3 	.word	0x080070b3
 80070a0:	080070cb 	.word	0x080070cb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070a4:	4bb2      	ldr	r3, [pc, #712]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	4ab1      	ldr	r2, [pc, #708]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80070aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80070b0:	e00c      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3304      	adds	r3, #4
 80070b6:	2102      	movs	r1, #2
 80070b8:	4618      	mov	r0, r3
 80070ba:	f001 fc83 	bl	80089c4 <RCCEx_PLL2_Config>
 80070be:	4603      	mov	r3, r0
 80070c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80070c2:	e003      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	75fb      	strb	r3, [r7, #23]
      break;
 80070c8:	e000      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80070ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070cc:	7dfb      	ldrb	r3, [r7, #23]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d109      	bne.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80070d2:	4ba7      	ldr	r3, [pc, #668]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80070d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d6:	f023 0203 	bic.w	r2, r3, #3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070de:	49a4      	ldr	r1, [pc, #656]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80070e4:	e001      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
 80070e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 8086 	beq.w	8007204 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070f8:	4b9e      	ldr	r3, [pc, #632]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a9d      	ldr	r2, [pc, #628]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80070fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007102:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007104:	f7fa fc5a 	bl	80019bc <HAL_GetTick>
 8007108:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800710a:	e009      	b.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800710c:	f7fa fc56 	bl	80019bc <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	2b64      	cmp	r3, #100	; 0x64
 8007118:	d902      	bls.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	75fb      	strb	r3, [r7, #23]
        break;
 800711e:	e005      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007120:	4b94      	ldr	r3, [pc, #592]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0ef      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800712c:	7dfb      	ldrb	r3, [r7, #23]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d166      	bne.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007132:	4b8f      	ldr	r3, [pc, #572]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007134:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800713c:	4053      	eors	r3, r2
 800713e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007142:	2b00      	cmp	r3, #0
 8007144:	d013      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007146:	4b8a      	ldr	r3, [pc, #552]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800714e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007150:	4b87      	ldr	r3, [pc, #540]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007154:	4a86      	ldr	r2, [pc, #536]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800715a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800715c:	4b84      	ldr	r3, [pc, #528]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800715e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007160:	4a83      	ldr	r2, [pc, #524]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007166:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007168:	4a81      	ldr	r2, [pc, #516]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007178:	d115      	bne.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800717a:	f7fa fc1f 	bl	80019bc <HAL_GetTick>
 800717e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007180:	e00b      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007182:	f7fa fc1b 	bl	80019bc <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007190:	4293      	cmp	r3, r2
 8007192:	d902      	bls.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	75fb      	strb	r3, [r7, #23]
            break;
 8007198:	e005      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800719a:	4b75      	ldr	r3, [pc, #468]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800719c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0ed      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d126      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ba:	d10d      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80071bc:	4b6c      	ldr	r3, [pc, #432]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071ca:	0919      	lsrs	r1, r3, #4
 80071cc:	4b6a      	ldr	r3, [pc, #424]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80071ce:	400b      	ands	r3, r1
 80071d0:	4967      	ldr	r1, [pc, #412]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	610b      	str	r3, [r1, #16]
 80071d6:	e005      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80071d8:	4b65      	ldr	r3, [pc, #404]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	4a64      	ldr	r2, [pc, #400]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80071de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80071e2:	6113      	str	r3, [r2, #16]
 80071e4:	4b62      	ldr	r3, [pc, #392]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80071e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071f2:	495f      	ldr	r1, [pc, #380]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	670b      	str	r3, [r1, #112]	; 0x70
 80071f8:	e004      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
 80071fc:	75bb      	strb	r3, [r7, #22]
 80071fe:	e001      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007200:	7dfb      	ldrb	r3, [r7, #23]
 8007202:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	d07f      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007216:	2b28      	cmp	r3, #40	; 0x28
 8007218:	d866      	bhi.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 800721a:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 800721c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007220:	080072ef 	.word	0x080072ef
 8007224:	080072e9 	.word	0x080072e9
 8007228:	080072e9 	.word	0x080072e9
 800722c:	080072e9 	.word	0x080072e9
 8007230:	080072e9 	.word	0x080072e9
 8007234:	080072e9 	.word	0x080072e9
 8007238:	080072e9 	.word	0x080072e9
 800723c:	080072e9 	.word	0x080072e9
 8007240:	080072c5 	.word	0x080072c5
 8007244:	080072e9 	.word	0x080072e9
 8007248:	080072e9 	.word	0x080072e9
 800724c:	080072e9 	.word	0x080072e9
 8007250:	080072e9 	.word	0x080072e9
 8007254:	080072e9 	.word	0x080072e9
 8007258:	080072e9 	.word	0x080072e9
 800725c:	080072e9 	.word	0x080072e9
 8007260:	080072d7 	.word	0x080072d7
 8007264:	080072e9 	.word	0x080072e9
 8007268:	080072e9 	.word	0x080072e9
 800726c:	080072e9 	.word	0x080072e9
 8007270:	080072e9 	.word	0x080072e9
 8007274:	080072e9 	.word	0x080072e9
 8007278:	080072e9 	.word	0x080072e9
 800727c:	080072e9 	.word	0x080072e9
 8007280:	080072ef 	.word	0x080072ef
 8007284:	080072e9 	.word	0x080072e9
 8007288:	080072e9 	.word	0x080072e9
 800728c:	080072e9 	.word	0x080072e9
 8007290:	080072e9 	.word	0x080072e9
 8007294:	080072e9 	.word	0x080072e9
 8007298:	080072e9 	.word	0x080072e9
 800729c:	080072e9 	.word	0x080072e9
 80072a0:	080072ef 	.word	0x080072ef
 80072a4:	080072e9 	.word	0x080072e9
 80072a8:	080072e9 	.word	0x080072e9
 80072ac:	080072e9 	.word	0x080072e9
 80072b0:	080072e9 	.word	0x080072e9
 80072b4:	080072e9 	.word	0x080072e9
 80072b8:	080072e9 	.word	0x080072e9
 80072bc:	080072e9 	.word	0x080072e9
 80072c0:	080072ef 	.word	0x080072ef
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	3304      	adds	r3, #4
 80072c8:	2101      	movs	r1, #1
 80072ca:	4618      	mov	r0, r3
 80072cc:	f001 fb7a 	bl	80089c4 <RCCEx_PLL2_Config>
 80072d0:	4603      	mov	r3, r0
 80072d2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80072d4:	e00c      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3324      	adds	r3, #36	; 0x24
 80072da:	2101      	movs	r1, #1
 80072dc:	4618      	mov	r0, r3
 80072de:	f001 fc23 	bl	8008b28 <RCCEx_PLL3_Config>
 80072e2:	4603      	mov	r3, r0
 80072e4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80072e6:	e003      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	75fb      	strb	r3, [r7, #23]
      break;
 80072ec:	e000      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80072ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10a      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80072f6:	4b1e      	ldr	r3, [pc, #120]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80072f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007304:	491a      	ldr	r1, [pc, #104]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007306:	4313      	orrs	r3, r2
 8007308:	654b      	str	r3, [r1, #84]	; 0x54
 800730a:	e001      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730c:	7dfb      	ldrb	r3, [r7, #23]
 800730e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d03f      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007320:	2b05      	cmp	r3, #5
 8007322:	d821      	bhi.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8007324:	a201      	add	r2, pc, #4	; (adr r2, 800732c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8007326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732a:	bf00      	nop
 800732c:	0800737d 	.word	0x0800737d
 8007330:	08007345 	.word	0x08007345
 8007334:	08007357 	.word	0x08007357
 8007338:	0800737d 	.word	0x0800737d
 800733c:	0800737d 	.word	0x0800737d
 8007340:	0800737d 	.word	0x0800737d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3304      	adds	r3, #4
 8007348:	2101      	movs	r1, #1
 800734a:	4618      	mov	r0, r3
 800734c:	f001 fb3a 	bl	80089c4 <RCCEx_PLL2_Config>
 8007350:	4603      	mov	r3, r0
 8007352:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007354:	e013      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3324      	adds	r3, #36	; 0x24
 800735a:	2101      	movs	r1, #1
 800735c:	4618      	mov	r0, r3
 800735e:	f001 fbe3 	bl	8008b28 <RCCEx_PLL3_Config>
 8007362:	4603      	mov	r3, r0
 8007364:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007366:	e00a      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	75fb      	strb	r3, [r7, #23]
      break;
 800736c:	e007      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800736e:	bf00      	nop
 8007370:	58024400 	.word	0x58024400
 8007374:	58024800 	.word	0x58024800
 8007378:	00ffffcf 	.word	0x00ffffcf
      break;
 800737c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800737e:	7dfb      	ldrb	r3, [r7, #23]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d109      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007384:	4b9f      	ldr	r3, [pc, #636]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007388:	f023 0207 	bic.w	r2, r3, #7
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007390:	499c      	ldr	r1, [pc, #624]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007392:	4313      	orrs	r3, r2
 8007394:	654b      	str	r3, [r1, #84]	; 0x54
 8007396:	e001      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007398:	7dfb      	ldrb	r3, [r7, #23]
 800739a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d039      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073ae:	2b05      	cmp	r3, #5
 80073b0:	d820      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80073b2:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	080073fb 	.word	0x080073fb
 80073bc:	080073d1 	.word	0x080073d1
 80073c0:	080073e3 	.word	0x080073e3
 80073c4:	080073fb 	.word	0x080073fb
 80073c8:	080073fb 	.word	0x080073fb
 80073cc:	080073fb 	.word	0x080073fb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3304      	adds	r3, #4
 80073d4:	2101      	movs	r1, #1
 80073d6:	4618      	mov	r0, r3
 80073d8:	f001 faf4 	bl	80089c4 <RCCEx_PLL2_Config>
 80073dc:	4603      	mov	r3, r0
 80073de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80073e0:	e00c      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3324      	adds	r3, #36	; 0x24
 80073e6:	2101      	movs	r1, #1
 80073e8:	4618      	mov	r0, r3
 80073ea:	f001 fb9d 	bl	8008b28 <RCCEx_PLL3_Config>
 80073ee:	4603      	mov	r3, r0
 80073f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80073f2:	e003      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	75fb      	strb	r3, [r7, #23]
      break;
 80073f8:	e000      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80073fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007402:	4b80      	ldr	r3, [pc, #512]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007406:	f023 0207 	bic.w	r2, r3, #7
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007410:	497c      	ldr	r1, [pc, #496]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007412:	4313      	orrs	r3, r2
 8007414:	658b      	str	r3, [r1, #88]	; 0x58
 8007416:	e001      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007418:	7dfb      	ldrb	r3, [r7, #23]
 800741a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0320 	and.w	r3, r3, #32
 8007424:	2b00      	cmp	r3, #0
 8007426:	d04b      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800742e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007432:	d02e      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8007434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007438:	d828      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800743a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800743e:	d02a      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007444:	d822      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007446:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800744a:	d026      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800744c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007450:	d81c      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007456:	d010      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8007458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800745c:	d816      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d01d      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007466:	d111      	bne.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3304      	adds	r3, #4
 800746c:	2100      	movs	r1, #0
 800746e:	4618      	mov	r0, r3
 8007470:	f001 faa8 	bl	80089c4 <RCCEx_PLL2_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007478:	e012      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3324      	adds	r3, #36	; 0x24
 800747e:	2102      	movs	r1, #2
 8007480:	4618      	mov	r0, r3
 8007482:	f001 fb51 	bl	8008b28 <RCCEx_PLL3_Config>
 8007486:	4603      	mov	r3, r0
 8007488:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800748a:	e009      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	75fb      	strb	r3, [r7, #23]
      break;
 8007490:	e006      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007492:	bf00      	nop
 8007494:	e004      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007496:	bf00      	nop
 8007498:	e002      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800749a:	bf00      	nop
 800749c:	e000      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800749e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074a6:	4b57      	ldr	r3, [pc, #348]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80074a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074b4:	4953      	ldr	r1, [pc, #332]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	654b      	str	r3, [r1, #84]	; 0x54
 80074ba:	e001      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d04b      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80074d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80074d6:	d02e      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80074d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80074dc:	d828      	bhi.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80074de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074e2:	d02a      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80074e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074e8:	d822      	bhi.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80074ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074ee:	d026      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80074f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074f4:	d81c      	bhi.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80074f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074fa:	d010      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80074fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007500:	d816      	bhi.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007502:	2b00      	cmp	r3, #0
 8007504:	d01d      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800750a:	d111      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	3304      	adds	r3, #4
 8007510:	2100      	movs	r1, #0
 8007512:	4618      	mov	r0, r3
 8007514:	f001 fa56 	bl	80089c4 <RCCEx_PLL2_Config>
 8007518:	4603      	mov	r3, r0
 800751a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800751c:	e012      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3324      	adds	r3, #36	; 0x24
 8007522:	2102      	movs	r1, #2
 8007524:	4618      	mov	r0, r3
 8007526:	f001 faff 	bl	8008b28 <RCCEx_PLL3_Config>
 800752a:	4603      	mov	r3, r0
 800752c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800752e:	e009      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	75fb      	strb	r3, [r7, #23]
      break;
 8007534:	e006      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007536:	bf00      	nop
 8007538:	e004      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800753a:	bf00      	nop
 800753c:	e002      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800753e:	bf00      	nop
 8007540:	e000      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007544:	7dfb      	ldrb	r3, [r7, #23]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10a      	bne.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800754a:	4b2e      	ldr	r3, [pc, #184]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800754c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800754e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007558:	492a      	ldr	r1, [pc, #168]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800755a:	4313      	orrs	r3, r2
 800755c:	658b      	str	r3, [r1, #88]	; 0x58
 800755e:	e001      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007560:	7dfb      	ldrb	r3, [r7, #23]
 8007562:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756c:	2b00      	cmp	r3, #0
 800756e:	d04d      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007576:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800757a:	d02e      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800757c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007580:	d828      	bhi.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007586:	d02a      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800758c:	d822      	bhi.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800758e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007592:	d026      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007594:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007598:	d81c      	bhi.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800759a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800759e:	d010      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80075a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075a4:	d816      	bhi.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d01d      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80075aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ae:	d111      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3304      	adds	r3, #4
 80075b4:	2100      	movs	r1, #0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f001 fa04 	bl	80089c4 <RCCEx_PLL2_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80075c0:	e012      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3324      	adds	r3, #36	; 0x24
 80075c6:	2102      	movs	r1, #2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 faad 	bl	8008b28 <RCCEx_PLL3_Config>
 80075ce:	4603      	mov	r3, r0
 80075d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80075d2:	e009      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	75fb      	strb	r3, [r7, #23]
      break;
 80075d8:	e006      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80075da:	bf00      	nop
 80075dc:	e004      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80075de:	bf00      	nop
 80075e0:	e002      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80075e2:	bf00      	nop
 80075e4:	e000      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80075e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10c      	bne.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80075ee:	4b05      	ldr	r3, [pc, #20]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80075f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80075fc:	4901      	ldr	r1, [pc, #4]	; (8007604 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	658b      	str	r3, [r1, #88]	; 0x58
 8007602:	e003      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007604:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0308 	and.w	r3, r3, #8
 8007614:	2b00      	cmp	r3, #0
 8007616:	d01a      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800761e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007622:	d10a      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3324      	adds	r3, #36	; 0x24
 8007628:	2102      	movs	r1, #2
 800762a:	4618      	mov	r0, r3
 800762c:	f001 fa7c 	bl	8008b28 <RCCEx_PLL3_Config>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800763a:	4b8c      	ldr	r3, [pc, #560]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800763c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007648:	4988      	ldr	r1, [pc, #544]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800764a:	4313      	orrs	r3, r2
 800764c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0310 	and.w	r3, r3, #16
 8007656:	2b00      	cmp	r3, #0
 8007658:	d01a      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007664:	d10a      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3324      	adds	r3, #36	; 0x24
 800766a:	2102      	movs	r1, #2
 800766c:	4618      	mov	r0, r3
 800766e:	f001 fa5b 	bl	8008b28 <RCCEx_PLL3_Config>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800767c:	4b7b      	ldr	r3, [pc, #492]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800767e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800768a:	4978      	ldr	r1, [pc, #480]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800768c:	4313      	orrs	r3, r2
 800768e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d034      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80076a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076a6:	d01d      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80076a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076ac:	d817      	bhi.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80076b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b6:	d009      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80076b8:	e011      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3304      	adds	r3, #4
 80076be:	2100      	movs	r1, #0
 80076c0:	4618      	mov	r0, r3
 80076c2:	f001 f97f 	bl	80089c4 <RCCEx_PLL2_Config>
 80076c6:	4603      	mov	r3, r0
 80076c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80076ca:	e00c      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3324      	adds	r3, #36	; 0x24
 80076d0:	2102      	movs	r1, #2
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 fa28 	bl	8008b28 <RCCEx_PLL3_Config>
 80076d8:	4603      	mov	r3, r0
 80076da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80076dc:	e003      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	75fb      	strb	r3, [r7, #23]
      break;
 80076e2:	e000      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80076e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10a      	bne.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076ec:	4b5f      	ldr	r3, [pc, #380]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80076ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80076fa:	495c      	ldr	r1, [pc, #368]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	658b      	str	r3, [r1, #88]	; 0x58
 8007700:	e001      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d033      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007718:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800771c:	d01c      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800771e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007722:	d816      	bhi.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007728:	d003      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800772a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800772e:	d007      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007730:	e00f      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007732:	4b4e      	ldr	r3, [pc, #312]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007736:	4a4d      	ldr	r2, [pc, #308]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800773c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800773e:	e00c      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3324      	adds	r3, #36	; 0x24
 8007744:	2101      	movs	r1, #1
 8007746:	4618      	mov	r0, r3
 8007748:	f001 f9ee 	bl	8008b28 <RCCEx_PLL3_Config>
 800774c:	4603      	mov	r3, r0
 800774e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007750:	e003      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	75fb      	strb	r3, [r7, #23]
      break;
 8007756:	e000      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10a      	bne.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007760:	4b42      	ldr	r3, [pc, #264]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800776e:	493f      	ldr	r1, [pc, #252]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007770:	4313      	orrs	r3, r2
 8007772:	654b      	str	r3, [r1, #84]	; 0x54
 8007774:	e001      	b.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007776:	7dfb      	ldrb	r3, [r7, #23]
 8007778:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d029      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800778e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007792:	d007      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007794:	e00f      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007796:	4b35      	ldr	r3, [pc, #212]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779a:	4a34      	ldr	r2, [pc, #208]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800779c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80077a2:	e00b      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3304      	adds	r3, #4
 80077a8:	2102      	movs	r1, #2
 80077aa:	4618      	mov	r0, r3
 80077ac:	f001 f90a 	bl	80089c4 <RCCEx_PLL2_Config>
 80077b0:	4603      	mov	r3, r0
 80077b2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80077b4:	e002      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	75fb      	strb	r3, [r7, #23]
      break;
 80077ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d109      	bne.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80077c2:	4b2a      	ldr	r3, [pc, #168]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80077c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ce:	4927      	ldr	r1, [pc, #156]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80077d4:	e001      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
 80077d8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	3324      	adds	r3, #36	; 0x24
 80077ea:	2102      	movs	r1, #2
 80077ec:	4618      	mov	r0, r3
 80077ee:	f001 f99b 	bl	8008b28 <RCCEx_PLL3_Config>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d035      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800780e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007812:	d017      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007814:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007818:	d811      	bhi.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800781a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800781e:	d013      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8007820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007824:	d80b      	bhi.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007826:	2b00      	cmp	r3, #0
 8007828:	d010      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800782a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800782e:	d106      	bne.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007830:	4b0e      	ldr	r3, [pc, #56]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	4a0d      	ldr	r2, [pc, #52]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800783a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800783c:	e007      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	75fb      	strb	r3, [r7, #23]
      break;
 8007842:	e004      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007844:	bf00      	nop
 8007846:	e002      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007848:	bf00      	nop
 800784a:	e000      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800784c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800784e:	7dfb      	ldrb	r3, [r7, #23]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10d      	bne.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007854:	4b05      	ldr	r3, [pc, #20]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007862:	4902      	ldr	r1, [pc, #8]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007864:	4313      	orrs	r3, r2
 8007866:	654b      	str	r3, [r1, #84]	; 0x54
 8007868:	e004      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800786a:	bf00      	nop
 800786c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007870:	7dfb      	ldrb	r3, [r7, #23]
 8007872:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d008      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007880:	4b30      	ldr	r3, [pc, #192]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007884:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800788c:	492d      	ldr	r1, [pc, #180]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800788e:	4313      	orrs	r3, r2
 8007890:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d008      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800789e:	4b29      	ldr	r3, [pc, #164]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80078a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078aa:	4926      	ldr	r1, [pc, #152]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d008      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80078bc:	4b21      	ldr	r3, [pc, #132]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80078be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c8:	491e      	ldr	r1, [pc, #120]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00d      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078da:	4b1a      	ldr	r3, [pc, #104]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	4a19      	ldr	r2, [pc, #100]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80078e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078e4:	6113      	str	r3, [r2, #16]
 80078e6:	4b17      	ldr	r3, [pc, #92]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80078e8:	691a      	ldr	r2, [r3, #16]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078f0:	4914      	ldr	r1, [pc, #80]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	da08      	bge.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80078fe:	4b11      	ldr	r3, [pc, #68]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007902:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800790a:	490e      	ldr	r1, [pc, #56]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800790c:	4313      	orrs	r3, r2
 800790e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d009      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800791c:	4b09      	ldr	r3, [pc, #36]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800791e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007920:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792a:	4906      	ldr	r1, [pc, #24]	; (8007944 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800792c:	4313      	orrs	r3, r2
 800792e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007930:	7dbb      	ldrb	r3, [r7, #22]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	e000      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	58024400 	.word	0x58024400

08007948 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b090      	sub	sp, #64	; 0x40
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007956:	f040 8089 	bne.w	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800795a:	4b91      	ldr	r3, [pc, #580]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800795c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	2b04      	cmp	r3, #4
 8007968:	d87d      	bhi.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800796a:	a201      	add	r2, pc, #4	; (adr r2, 8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	08007985 	.word	0x08007985
 8007974:	080079a9 	.word	0x080079a9
 8007978:	080079cd 	.word	0x080079cd
 800797c:	08007a61 	.word	0x08007a61
 8007980:	080079f1 	.word	0x080079f1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007984:	4b86      	ldr	r3, [pc, #536]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800798c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007990:	d107      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007996:	4618      	mov	r0, r3
 8007998:	f000 fec2 	bl	8008720 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800799c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079a0:	e3f4      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079a6:	e3f1      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079a8:	4b7d      	ldr	r3, [pc, #500]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079b4:	d107      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079b6:	f107 0318 	add.w	r3, r7, #24
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 fc08 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079c4:	e3e2      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ca:	e3df      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079cc:	4b74      	ldr	r3, [pc, #464]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079d8:	d107      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079da:	f107 030c 	add.w	r3, r7, #12
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 fd4a 	bl	8008478 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80079e8:	e3d0      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ee:	e3cd      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80079f0:	4b6b      	ldr	r3, [pc, #428]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079fa:	4b69      	ldr	r3, [pc, #420]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0304 	and.w	r3, r3, #4
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	d10c      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d109      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a0c:	4b64      	ldr	r3, [pc, #400]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	08db      	lsrs	r3, r3, #3
 8007a12:	f003 0303 	and.w	r3, r3, #3
 8007a16:	4a63      	ldr	r2, [pc, #396]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007a18:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a1e:	e01e      	b.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a20:	4b5f      	ldr	r3, [pc, #380]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2c:	d106      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a34:	d102      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007a36:	4b5c      	ldr	r3, [pc, #368]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a3a:	e010      	b.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a3c:	4b58      	ldr	r3, [pc, #352]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a48:	d106      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a50:	d102      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007a52:	4b56      	ldr	r3, [pc, #344]	; (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a56:	e002      	b.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007a5c:	e396      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007a5e:	e395      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a60:	4b53      	ldr	r3, [pc, #332]	; (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007a62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a64:	e392      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a6a:	e38f      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a72:	f040 809f 	bne.w	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8007a76:	4b4a      	ldr	r3, [pc, #296]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007a7e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a86:	d04d      	beq.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a8e:	f200 8084 	bhi.w	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	2bc0      	cmp	r3, #192	; 0xc0
 8007a96:	d07d      	beq.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a9c:	d87d      	bhi.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	2b80      	cmp	r3, #128	; 0x80
 8007aa2:	d02d      	beq.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	2b80      	cmp	r3, #128	; 0x80
 8007aa8:	d877      	bhi.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	2b40      	cmp	r3, #64	; 0x40
 8007ab4:	d012      	beq.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007ab6:	e070      	b.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ab8:	4b39      	ldr	r3, [pc, #228]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ac4:	d107      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fe28 	bl	8008720 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ad4:	e35a      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ada:	e357      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007adc:	4b30      	ldr	r3, [pc, #192]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ae8:	d107      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aea:	f107 0318 	add.w	r3, r7, #24
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fb6e 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007af8:	e348      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007afe:	e345      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b00:	4b27      	ldr	r3, [pc, #156]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b0c:	d107      	bne.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b0e:	f107 030c 	add.w	r3, r7, #12
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fcb0 	bl	8008478 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b1c:	e336      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b22:	e333      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b24:	4b1e      	ldr	r3, [pc, #120]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b2c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b2e:	4b1c      	ldr	r3, [pc, #112]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0304 	and.w	r3, r3, #4
 8007b36:	2b04      	cmp	r3, #4
 8007b38:	d10c      	bne.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d109      	bne.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b40:	4b17      	ldr	r3, [pc, #92]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	08db      	lsrs	r3, r3, #3
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	4a16      	ldr	r2, [pc, #88]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b52:	e01e      	b.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b54:	4b12      	ldr	r3, [pc, #72]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b60:	d106      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8007b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b68:	d102      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007b6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b6e:	e010      	b.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b70:	4b0b      	ldr	r3, [pc, #44]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b7c:	d106      	bne.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b84:	d102      	bne.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007b86:	4b09      	ldr	r3, [pc, #36]	; (8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007b88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b8a:	e002      	b.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007b90:	e2fc      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007b92:	e2fb      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b94:	4b06      	ldr	r3, [pc, #24]	; (8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b98:	e2f8      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b9e:	e2f5      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007ba0:	58024400 	.word	0x58024400
 8007ba4:	03d09000 	.word	0x03d09000
 8007ba8:	003d0900 	.word	0x003d0900
 8007bac:	007a1200 	.word	0x007a1200
 8007bb0:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bba:	f040 809c 	bne.w	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8007bbe:	4b9d      	ldr	r3, [pc, #628]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc2:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007bc6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bce:	d054      	beq.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bd6:	f200 808b 	bhi.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007be0:	f000 8083 	beq.w	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007bea:	f200 8081 	bhi.w	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8007bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bf4:	d02f      	beq.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bfc:	d878      	bhi.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d004      	beq.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c0a:	d012      	beq.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8007c0c:	e070      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c0e:	4b89      	ldr	r3, [pc, #548]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c1a:	d107      	bne.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 fd7d 	bl	8008720 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c2a:	e2af      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c30:	e2ac      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c32:	4b80      	ldr	r3, [pc, #512]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c3e:	d107      	bne.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c40:	f107 0318 	add.w	r3, r7, #24
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 fac3 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c4e:	e29d      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c54:	e29a      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c56:	4b77      	ldr	r3, [pc, #476]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c62:	d107      	bne.n	8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c64:	f107 030c 	add.w	r3, r7, #12
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 fc05 	bl	8008478 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007c72:	e28b      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007c74:	2300      	movs	r3, #0
 8007c76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c78:	e288      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c7a:	4b6e      	ldr	r3, [pc, #440]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c82:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c84:	4b6b      	ldr	r3, [pc, #428]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0304 	and.w	r3, r3, #4
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	d10c      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8007c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d109      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c96:	4b67      	ldr	r3, [pc, #412]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	08db      	lsrs	r3, r3, #3
 8007c9c:	f003 0303 	and.w	r3, r3, #3
 8007ca0:	4a65      	ldr	r2, [pc, #404]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8007ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ca8:	e01e      	b.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007caa:	4b62      	ldr	r3, [pc, #392]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cb6:	d106      	bne.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8007cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cbe:	d102      	bne.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007cc0:	4b5e      	ldr	r3, [pc, #376]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cc4:	e010      	b.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cc6:	4b5b      	ldr	r3, [pc, #364]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cd2:	d106      	bne.n	8007ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8007cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cda:	d102      	bne.n	8007ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007cdc:	4b58      	ldr	r3, [pc, #352]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8007cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ce0:	e002      	b.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8007ce6:	e251      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007ce8:	e250      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007cea:	4b56      	ldr	r3, [pc, #344]	; (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8007cec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cee:	e24d      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cf4:	e24a      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cfc:	f040 80a7 	bne.w	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007d00:	4b4c      	ldr	r3, [pc, #304]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d04:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007d08:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d10:	d055      	beq.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d18:	f200 8096 	bhi.w	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d22:	f000 8084 	beq.w	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8007d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d2c:	f200 808c 	bhi.w	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8007d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d36:	d030      	beq.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d3e:	f200 8083 	bhi.w	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8007d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d004      	beq.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8007d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d4e:	d012      	beq.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8007d50:	e07a      	b.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d52:	4b38      	ldr	r3, [pc, #224]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d5e:	d107      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 fcdb 	bl	8008720 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d6e:	e20d      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d74:	e20a      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d76:	4b2f      	ldr	r3, [pc, #188]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d82:	d107      	bne.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d84:	f107 0318 	add.w	r3, r7, #24
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 fa21 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d92:	e1fb      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007d94:	2300      	movs	r3, #0
 8007d96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d98:	e1f8      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d9a:	4b26      	ldr	r3, [pc, #152]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007da2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007da6:	d107      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007da8:	f107 030c 	add.w	r3, r7, #12
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 fb63 	bl	8008478 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007db6:	e1e9      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dbc:	e1e6      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007dbe:	4b1d      	ldr	r3, [pc, #116]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dc6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dc8:	4b1a      	ldr	r3, [pc, #104]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d10c      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007dda:	4b16      	ldr	r3, [pc, #88]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	08db      	lsrs	r3, r3, #3
 8007de0:	f003 0303 	and.w	r3, r3, #3
 8007de4:	4a14      	ldr	r2, [pc, #80]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8007de6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dec:	e01e      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dee:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfa:	d106      	bne.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8007dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e02:	d102      	bne.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007e04:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e08:	e010      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e16:	d106      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e1e:	d102      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007e20:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8007e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e24:	e002      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007e2a:	e1af      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007e2c:	e1ae      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e2e:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8007e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e32:	e1ab      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007e34:	58024400 	.word	0x58024400
 8007e38:	03d09000 	.word	0x03d09000
 8007e3c:	003d0900 	.word	0x003d0900
 8007e40:	007a1200 	.word	0x007a1200
 8007e44:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e4c:	e19e      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e54:	d173      	bne.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007e56:	4b9d      	ldr	r3, [pc, #628]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e5e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e66:	d02f      	beq.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e6e:	d863      	bhi.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d004      	beq.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e7c:	d012      	beq.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8007e7e:	e05b      	b.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e80:	4b92      	ldr	r3, [pc, #584]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e8c:	d107      	bne.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e8e:	f107 0318 	add.w	r3, r7, #24
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 f99c 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e9c:	e176      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea2:	e173      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ea4:	4b89      	ldr	r3, [pc, #548]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eb0:	d107      	bne.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eb2:	f107 030c 	add.w	r3, r7, #12
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 fade 	bl	8008478 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007ec0:	e164      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ec6:	e161      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ec8:	4b80      	ldr	r3, [pc, #512]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ecc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ed0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ed2:	4b7e      	ldr	r3, [pc, #504]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0304 	and.w	r3, r3, #4
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d10c      	bne.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8007ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d109      	bne.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ee4:	4b79      	ldr	r3, [pc, #484]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	08db      	lsrs	r3, r3, #3
 8007eea:	f003 0303 	and.w	r3, r3, #3
 8007eee:	4a78      	ldr	r2, [pc, #480]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef6:	e01e      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ef8:	4b74      	ldr	r3, [pc, #464]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f04:	d106      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f0c:	d102      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007f0e:	4b71      	ldr	r3, [pc, #452]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f12:	e010      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f14:	4b6d      	ldr	r3, [pc, #436]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f20:	d106      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8007f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f28:	d102      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007f2a:	4b6b      	ldr	r3, [pc, #428]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f2e:	e002      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007f34:	e12a      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007f36:	e129      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f3c:	e126      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f44:	d133      	bne.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007f46:	4b61      	ldr	r3, [pc, #388]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f4e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d004      	beq.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f5c:	d012      	beq.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007f5e:	e023      	b.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f60:	4b5a      	ldr	r3, [pc, #360]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f6c:	d107      	bne.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fbd4 	bl	8008720 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007f7c:	e106      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f82:	e103      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f84:	4b51      	ldr	r3, [pc, #324]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f90:	d107      	bne.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f92:	f107 0318 	add.w	r3, r7, #24
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 f91a 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007fa0:	e0f4      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fa6:	e0f1      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fac:	e0ee      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fb4:	f040 809b 	bne.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007fb8:	4b44      	ldr	r3, [pc, #272]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fbc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007fc0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007fc8:	f000 808b 	beq.w	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fce:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007fd2:	f200 8089 	bhi.w	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fdc:	d06c      	beq.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fe4:	f200 8080 	bhi.w	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fee:	d056      	beq.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ff6:	d877      	bhi.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ffe:	d03b      	beq.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8008000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008002:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008006:	d86f      	bhi.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800800e:	d021      	beq.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8008010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008016:	d867      	bhi.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801a:	2b00      	cmp	r3, #0
 800801c:	d004      	beq.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008024:	d004      	beq.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8008026:	e05f      	b.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008028:	f000 f8bc 	bl	80081a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800802c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800802e:	e0ad      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008030:	4b26      	ldr	r3, [pc, #152]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008038:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800803c:	d107      	bne.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800803e:	f107 0318 	add.w	r3, r7, #24
 8008042:	4618      	mov	r0, r3
 8008044:	f000 f8c4 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800804c:	e09e      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008052:	e09b      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008054:	4b1d      	ldr	r3, [pc, #116]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800805c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008060:	d107      	bne.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008062:	f107 030c 	add.w	r3, r7, #12
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fa06 	bl	8008478 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008070:	e08c      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008076:	e089      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008078:	4b14      	ldr	r3, [pc, #80]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f003 0304 	and.w	r3, r3, #4
 8008080:	2b04      	cmp	r3, #4
 8008082:	d109      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008084:	4b11      	ldr	r3, [pc, #68]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	08db      	lsrs	r3, r3, #3
 800808a:	f003 0303 	and.w	r3, r3, #3
 800808e:	4a10      	ldr	r2, [pc, #64]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008090:	fa22 f303 	lsr.w	r3, r2, r3
 8008094:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008096:	e079      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008098:	2300      	movs	r3, #0
 800809a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800809c:	e076      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800809e:	4b0b      	ldr	r3, [pc, #44]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080aa:	d102      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 80080ac:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80080ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80080b0:	e06c      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080b6:	e069      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80080b8:	4b04      	ldr	r3, [pc, #16]	; (80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080c4:	d10a      	bne.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 80080c6:	4b04      	ldr	r3, [pc, #16]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80080c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80080ca:	e05f      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80080cc:	58024400 	.word	0x58024400
 80080d0:	03d09000 	.word	0x03d09000
 80080d4:	003d0900 	.word	0x003d0900
 80080d8:	007a1200 	.word	0x007a1200
          frequency = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080e0:	e054      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80080e2:	4b2d      	ldr	r3, [pc, #180]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80080e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080e6:	e051      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080ec:	e04e      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f4:	d148      	bne.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80080f6:	4b29      	ldr	r3, [pc, #164]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80080f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080fe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008106:	d02a      	beq.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800810e:	d838      	bhi.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	2b00      	cmp	r3, #0
 8008114:	d004      	beq.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8008116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008118:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800811c:	d00d      	beq.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800811e:	e030      	b.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008120:	4b1e      	ldr	r3, [pc, #120]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800812c:	d102      	bne.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 800812e:	4b1c      	ldr	r3, [pc, #112]	; (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008130:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008132:	e02b      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008134:	2300      	movs	r3, #0
 8008136:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008138:	e028      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800813a:	4b18      	ldr	r3, [pc, #96]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008146:	d107      	bne.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800814c:	4618      	mov	r0, r3
 800814e:	f000 fae7 	bl	8008720 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008154:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008156:	e019      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800815c:	e016      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800815e:	4b0f      	ldr	r3, [pc, #60]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800816a:	d107      	bne.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800816c:	f107 0318 	add.w	r3, r7, #24
 8008170:	4618      	mov	r0, r3
 8008172:	f000 f82d 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800817a:	e007      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800817c:	2300      	movs	r3, #0
 800817e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008180:	e004      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8008182:	2300      	movs	r3, #0
 8008184:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008186:	e001      	b.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8008188:	2300      	movs	r3, #0
 800818a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800818c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800818e:	4618      	mov	r0, r3
 8008190:	3740      	adds	r7, #64	; 0x40
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	00bb8000 	.word	0x00bb8000
 800819c:	58024400 	.word	0x58024400
 80081a0:	007a1200 	.word	0x007a1200

080081a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80081a8:	f7fe fc66 	bl	8006a78 <HAL_RCC_GetHCLKFreq>
 80081ac:	4602      	mov	r2, r0
 80081ae:	4b06      	ldr	r3, [pc, #24]	; (80081c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	091b      	lsrs	r3, r3, #4
 80081b4:	f003 0307 	and.w	r3, r3, #7
 80081b8:	4904      	ldr	r1, [pc, #16]	; (80081cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80081ba:	5ccb      	ldrb	r3, [r1, r3]
 80081bc:	f003 031f 	and.w	r3, r3, #31
 80081c0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	58024400 	.word	0x58024400
 80081cc:	0800a700 	.word	0x0800a700

080081d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b089      	sub	sp, #36	; 0x24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081d8:	4ba1      	ldr	r3, [pc, #644]	; (8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	f003 0303 	and.w	r3, r3, #3
 80081e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80081e2:	4b9f      	ldr	r3, [pc, #636]	; (8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	0b1b      	lsrs	r3, r3, #12
 80081e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081ee:	4b9c      	ldr	r3, [pc, #624]	; (8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f2:	091b      	lsrs	r3, r3, #4
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80081fa:	4b99      	ldr	r3, [pc, #612]	; (8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fe:	08db      	lsrs	r3, r3, #3
 8008200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	fb02 f303 	mul.w	r3, r2, r3
 800820a:	ee07 3a90 	vmov	s15, r3
 800820e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008212:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 8111 	beq.w	8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	2b02      	cmp	r3, #2
 8008222:	f000 8083 	beq.w	800832c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	2b02      	cmp	r3, #2
 800822a:	f200 80a1 	bhi.w	8008370 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d003      	beq.n	800823c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d056      	beq.n	80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800823a:	e099      	b.n	8008370 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800823c:	4b88      	ldr	r3, [pc, #544]	; (8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0320 	and.w	r3, r3, #32
 8008244:	2b00      	cmp	r3, #0
 8008246:	d02d      	beq.n	80082a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008248:	4b85      	ldr	r3, [pc, #532]	; (8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	08db      	lsrs	r3, r3, #3
 800824e:	f003 0303 	and.w	r3, r3, #3
 8008252:	4a84      	ldr	r2, [pc, #528]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008254:	fa22 f303 	lsr.w	r3, r2, r3
 8008258:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	ee07 3a90 	vmov	s15, r3
 8008260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	ee07 3a90 	vmov	s15, r3
 800826a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008272:	4b7b      	ldr	r3, [pc, #492]	; (8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008282:	ed97 6a03 	vldr	s12, [r7, #12]
 8008286:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008468 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800828a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800828e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800829a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800829e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80082a2:	e087      	b.n	80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800846c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80082b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082b6:	4b6a      	ldr	r3, [pc, #424]	; (8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008468 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082e6:	e065      	b.n	80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	ee07 3a90 	vmov	s15, r3
 80082ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008470 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082fa:	4b59      	ldr	r3, [pc, #356]	; (8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008302:	ee07 3a90 	vmov	s15, r3
 8008306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830a:	ed97 6a03 	vldr	s12, [r7, #12]
 800830e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008468 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800831a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800831e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008326:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800832a:	e043      	b.n	80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008336:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800833a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800833e:	4b48      	ldr	r3, [pc, #288]	; (8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800834e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008352:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008468 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800835e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800836e:	e021      	b.n	80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008470 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800837e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008382:	4b37      	ldr	r3, [pc, #220]	; (8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008392:	ed97 6a03 	vldr	s12, [r7, #12]
 8008396:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008468 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800839a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800839e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80083b4:	4b2a      	ldr	r3, [pc, #168]	; (8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b8:	0a5b      	lsrs	r3, r3, #9
 80083ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80083d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083da:	ee17 2a90 	vmov	r2, s15
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80083e2:	4b1f      	ldr	r3, [pc, #124]	; (8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e6:	0c1b      	lsrs	r3, r3, #16
 80083e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ec:	ee07 3a90 	vmov	s15, r3
 80083f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008408:	ee17 2a90 	vmov	r2, s15
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008410:	4b13      	ldr	r3, [pc, #76]	; (8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008414:	0e1b      	lsrs	r3, r3, #24
 8008416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800841a:	ee07 3a90 	vmov	s15, r3
 800841e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008422:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008426:	ee37 7a87 	vadd.f32	s14, s15, s14
 800842a:	edd7 6a07 	vldr	s13, [r7, #28]
 800842e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008436:	ee17 2a90 	vmov	r2, s15
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800843e:	e008      	b.n	8008452 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	609a      	str	r2, [r3, #8]
}
 8008452:	bf00      	nop
 8008454:	3724      	adds	r7, #36	; 0x24
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	58024400 	.word	0x58024400
 8008464:	03d09000 	.word	0x03d09000
 8008468:	46000000 	.word	0x46000000
 800846c:	4c742400 	.word	0x4c742400
 8008470:	4a742400 	.word	0x4a742400
 8008474:	4af42400 	.word	0x4af42400

08008478 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008478:	b480      	push	{r7}
 800847a:	b089      	sub	sp, #36	; 0x24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008480:	4ba1      	ldr	r3, [pc, #644]	; (8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008484:	f003 0303 	and.w	r3, r3, #3
 8008488:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800848a:	4b9f      	ldr	r3, [pc, #636]	; (8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800848c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848e:	0d1b      	lsrs	r3, r3, #20
 8008490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008494:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008496:	4b9c      	ldr	r3, [pc, #624]	; (8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849a:	0a1b      	lsrs	r3, r3, #8
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80084a2:	4b99      	ldr	r3, [pc, #612]	; (8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a6:	08db      	lsrs	r3, r3, #3
 80084a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	fb02 f303 	mul.w	r3, r2, r3
 80084b2:	ee07 3a90 	vmov	s15, r3
 80084b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 8111 	beq.w	80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	f000 8083 	beq.w	80085d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	f200 80a1 	bhi.w	8008618 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d056      	beq.n	8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80084e2:	e099      	b.n	8008618 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084e4:	4b88      	ldr	r3, [pc, #544]	; (8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0320 	and.w	r3, r3, #32
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d02d      	beq.n	800854c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084f0:	4b85      	ldr	r3, [pc, #532]	; (8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	08db      	lsrs	r3, r3, #3
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	4a84      	ldr	r2, [pc, #528]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80084fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008500:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	ee07 3a90 	vmov	s15, r3
 8008508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	ee07 3a90 	vmov	s15, r3
 8008512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800851a:	4b7b      	ldr	r3, [pc, #492]	; (8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800851c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008522:	ee07 3a90 	vmov	s15, r3
 8008526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800852a:	ed97 6a03 	vldr	s12, [r7, #12]
 800852e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008710 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800853a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800853e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008546:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800854a:	e087      	b.n	800865c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	ee07 3a90 	vmov	s15, r3
 8008552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008556:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800855a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800855e:	4b6a      	ldr	r3, [pc, #424]	; (8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008566:	ee07 3a90 	vmov	s15, r3
 800856a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800856e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008572:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008710 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800857e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800858e:	e065      	b.n	800865c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	ee07 3a90 	vmov	s15, r3
 8008596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800859a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008718 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800859e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a2:	4b59      	ldr	r3, [pc, #356]	; (8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085aa:	ee07 3a90 	vmov	s15, r3
 80085ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80085b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008710 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085d2:	e043      	b.n	800865c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	ee07 3a90 	vmov	s15, r3
 80085da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800871c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80085e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e6:	4b48      	ldr	r3, [pc, #288]	; (8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ee:	ee07 3a90 	vmov	s15, r3
 80085f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008710 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800860a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800860e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008612:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008616:	e021      	b.n	800865c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	ee07 3a90 	vmov	s15, r3
 800861e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008622:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008718 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862a:	4b37      	ldr	r3, [pc, #220]	; (8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800862c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008632:	ee07 3a90 	vmov	s15, r3
 8008636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863a:	ed97 6a03 	vldr	s12, [r7, #12]
 800863e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008710 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800864e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800865a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800865c:	4b2a      	ldr	r3, [pc, #168]	; (8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800865e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008660:	0a5b      	lsrs	r3, r3, #9
 8008662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008666:	ee07 3a90 	vmov	s15, r3
 800866a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800866e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008672:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008676:	edd7 6a07 	vldr	s13, [r7, #28]
 800867a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800867e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008682:	ee17 2a90 	vmov	r2, s15
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800868a:	4b1f      	ldr	r3, [pc, #124]	; (8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800868c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868e:	0c1b      	lsrs	r3, r3, #16
 8008690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008694:	ee07 3a90 	vmov	s15, r3
 8008698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800869c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80086a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086b0:	ee17 2a90 	vmov	r2, s15
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80086b8:	4b13      	ldr	r3, [pc, #76]	; (8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086bc:	0e1b      	lsrs	r3, r3, #24
 80086be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c2:	ee07 3a90 	vmov	s15, r3
 80086c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80086d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086de:	ee17 2a90 	vmov	r2, s15
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80086e6:	e008      	b.n	80086fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	609a      	str	r2, [r3, #8]
}
 80086fa:	bf00      	nop
 80086fc:	3724      	adds	r7, #36	; 0x24
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	58024400 	.word	0x58024400
 800870c:	03d09000 	.word	0x03d09000
 8008710:	46000000 	.word	0x46000000
 8008714:	4c742400 	.word	0x4c742400
 8008718:	4a742400 	.word	0x4a742400
 800871c:	4af42400 	.word	0x4af42400

08008720 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008720:	b480      	push	{r7}
 8008722:	b089      	sub	sp, #36	; 0x24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008728:	4ba0      	ldr	r3, [pc, #640]	; (80089ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800872a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872c:	f003 0303 	and.w	r3, r3, #3
 8008730:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008732:	4b9e      	ldr	r3, [pc, #632]	; (80089ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008736:	091b      	lsrs	r3, r3, #4
 8008738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800873c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800873e:	4b9b      	ldr	r3, [pc, #620]	; (80089ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008748:	4b98      	ldr	r3, [pc, #608]	; (80089ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800874a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874c:	08db      	lsrs	r3, r3, #3
 800874e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	fb02 f303 	mul.w	r3, r2, r3
 8008758:	ee07 3a90 	vmov	s15, r3
 800875c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008760:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	f000 8111 	beq.w	800898e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	2b02      	cmp	r3, #2
 8008770:	f000 8083 	beq.w	800887a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	2b02      	cmp	r3, #2
 8008778:	f200 80a1 	bhi.w	80088be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d003      	beq.n	800878a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d056      	beq.n	8008836 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008788:	e099      	b.n	80088be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800878a:	4b88      	ldr	r3, [pc, #544]	; (80089ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0320 	and.w	r3, r3, #32
 8008792:	2b00      	cmp	r3, #0
 8008794:	d02d      	beq.n	80087f2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008796:	4b85      	ldr	r3, [pc, #532]	; (80089ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	08db      	lsrs	r3, r3, #3
 800879c:	f003 0303 	and.w	r3, r3, #3
 80087a0:	4a83      	ldr	r2, [pc, #524]	; (80089b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80087a2:	fa22 f303 	lsr.w	r3, r2, r3
 80087a6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	ee07 3a90 	vmov	s15, r3
 80087b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087c0:	4b7a      	ldr	r3, [pc, #488]	; (80089ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c8:	ee07 3a90 	vmov	s15, r3
 80087cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80087d4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80089b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80087d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80087f0:	e087      	b.n	8008902 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	ee07 3a90 	vmov	s15, r3
 80087f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087fc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008800:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008804:	4b69      	ldr	r3, [pc, #420]	; (80089ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800880c:	ee07 3a90 	vmov	s15, r3
 8008810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008814:	ed97 6a03 	vldr	s12, [r7, #12]
 8008818:	eddf 5a66 	vldr	s11, [pc, #408]	; 80089b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800881c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008820:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008824:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008828:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800882c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008830:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008834:	e065      	b.n	8008902 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	ee07 3a90 	vmov	s15, r3
 800883c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008840:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80089bc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008848:	4b58      	ldr	r3, [pc, #352]	; (80089ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800884a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008850:	ee07 3a90 	vmov	s15, r3
 8008854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008858:	ed97 6a03 	vldr	s12, [r7, #12]
 800885c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80089b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008860:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008864:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008868:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800886c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008874:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008878:	e043      	b.n	8008902 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	ee07 3a90 	vmov	s15, r3
 8008880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008884:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80089c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008888:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800888c:	4b47      	ldr	r3, [pc, #284]	; (80089ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800888e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008894:	ee07 3a90 	vmov	s15, r3
 8008898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800889c:	ed97 6a03 	vldr	s12, [r7, #12]
 80088a0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80089b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088bc:	e021      	b.n	8008902 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	ee07 3a90 	vmov	s15, r3
 80088c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80089b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80088cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d0:	4b36      	ldr	r3, [pc, #216]	; (80089ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d8:	ee07 3a90 	vmov	s15, r3
 80088dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80088e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80089b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008900:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008902:	4b2a      	ldr	r3, [pc, #168]	; (80089ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008906:	0a5b      	lsrs	r3, r3, #9
 8008908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800890c:	ee07 3a90 	vmov	s15, r3
 8008910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008918:	ee37 7a87 	vadd.f32	s14, s15, s14
 800891c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008928:	ee17 2a90 	vmov	r2, s15
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008930:	4b1e      	ldr	r3, [pc, #120]	; (80089ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008934:	0c1b      	lsrs	r3, r3, #16
 8008936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800893a:	ee07 3a90 	vmov	s15, r3
 800893e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008942:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008946:	ee37 7a87 	vadd.f32	s14, s15, s14
 800894a:	edd7 6a07 	vldr	s13, [r7, #28]
 800894e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008956:	ee17 2a90 	vmov	r2, s15
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800895e:	4b13      	ldr	r3, [pc, #76]	; (80089ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008962:	0e1b      	lsrs	r3, r3, #24
 8008964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008968:	ee07 3a90 	vmov	s15, r3
 800896c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008974:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008978:	edd7 6a07 	vldr	s13, [r7, #28]
 800897c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008984:	ee17 2a90 	vmov	r2, s15
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800898c:	e008      	b.n	80089a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	609a      	str	r2, [r3, #8]
}
 80089a0:	bf00      	nop
 80089a2:	3724      	adds	r7, #36	; 0x24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	58024400 	.word	0x58024400
 80089b0:	03d09000 	.word	0x03d09000
 80089b4:	46000000 	.word	0x46000000
 80089b8:	4c742400 	.word	0x4c742400
 80089bc:	4a742400 	.word	0x4a742400
 80089c0:	4af42400 	.word	0x4af42400

080089c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80089d2:	4b53      	ldr	r3, [pc, #332]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 80089d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d6:	f003 0303 	and.w	r3, r3, #3
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d101      	bne.n	80089e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e099      	b.n	8008b16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80089e2:	4b4f      	ldr	r3, [pc, #316]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a4e      	ldr	r2, [pc, #312]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 80089e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089ee:	f7f8 ffe5 	bl	80019bc <HAL_GetTick>
 80089f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089f4:	e008      	b.n	8008a08 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80089f6:	f7f8 ffe1 	bl	80019bc <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d901      	bls.n	8008a08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e086      	b.n	8008b16 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a08:	4b45      	ldr	r3, [pc, #276]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1f0      	bne.n	80089f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a14:	4b42      	ldr	r3, [pc, #264]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	031b      	lsls	r3, r3, #12
 8008a22:	493f      	ldr	r1, [pc, #252]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008a24:	4313      	orrs	r3, r2
 8008a26:	628b      	str	r3, [r1, #40]	; 0x28
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	3b01      	subs	r3, #1
 8008a38:	025b      	lsls	r3, r3, #9
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	431a      	orrs	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	041b      	lsls	r3, r3, #16
 8008a46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	061b      	lsls	r3, r3, #24
 8008a54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a58:	4931      	ldr	r1, [pc, #196]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008a5e:	4b30      	ldr	r3, [pc, #192]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	492d      	ldr	r1, [pc, #180]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008a70:	4b2b      	ldr	r3, [pc, #172]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a74:	f023 0220 	bic.w	r2, r3, #32
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	4928      	ldr	r1, [pc, #160]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008a82:	4b27      	ldr	r3, [pc, #156]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a86:	4a26      	ldr	r2, [pc, #152]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008a88:	f023 0310 	bic.w	r3, r3, #16
 8008a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008a8e:	4b24      	ldr	r3, [pc, #144]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008a90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a92:	4b24      	ldr	r3, [pc, #144]	; (8008b24 <RCCEx_PLL2_Config+0x160>)
 8008a94:	4013      	ands	r3, r2
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	69d2      	ldr	r2, [r2, #28]
 8008a9a:	00d2      	lsls	r2, r2, #3
 8008a9c:	4920      	ldr	r1, [pc, #128]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008aa2:	4b1f      	ldr	r3, [pc, #124]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa6:	4a1e      	ldr	r2, [pc, #120]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008aa8:	f043 0310 	orr.w	r3, r3, #16
 8008aac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d106      	bne.n	8008ac2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008ab4:	4b1a      	ldr	r3, [pc, #104]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab8:	4a19      	ldr	r2, [pc, #100]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008aba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008abe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ac0:	e00f      	b.n	8008ae2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d106      	bne.n	8008ad6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008ac8:	4b15      	ldr	r3, [pc, #84]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	4a14      	ldr	r2, [pc, #80]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ad2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ad4:	e005      	b.n	8008ae2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008ad6:	4b12      	ldr	r3, [pc, #72]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	4a11      	ldr	r2, [pc, #68]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008adc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008ae2:	4b0f      	ldr	r3, [pc, #60]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a0e      	ldr	r2, [pc, #56]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008ae8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aee:	f7f8 ff65 	bl	80019bc <HAL_GetTick>
 8008af2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008af4:	e008      	b.n	8008b08 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008af6:	f7f8 ff61 	bl	80019bc <HAL_GetTick>
 8008afa:	4602      	mov	r2, r0
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d901      	bls.n	8008b08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e006      	b.n	8008b16 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b08:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <RCCEx_PLL2_Config+0x15c>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d0f0      	beq.n	8008af6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	58024400 	.word	0x58024400
 8008b24:	ffff0007 	.word	0xffff0007

08008b28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b36:	4b53      	ldr	r3, [pc, #332]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3a:	f003 0303 	and.w	r3, r3, #3
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d101      	bne.n	8008b46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e099      	b.n	8008c7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008b46:	4b4f      	ldr	r3, [pc, #316]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a4e      	ldr	r2, [pc, #312]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b52:	f7f8 ff33 	bl	80019bc <HAL_GetTick>
 8008b56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b58:	e008      	b.n	8008b6c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b5a:	f7f8 ff2f 	bl	80019bc <HAL_GetTick>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d901      	bls.n	8008b6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e086      	b.n	8008c7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008b6c:	4b45      	ldr	r3, [pc, #276]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1f0      	bne.n	8008b5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008b78:	4b42      	ldr	r3, [pc, #264]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	051b      	lsls	r3, r3, #20
 8008b86:	493f      	ldr	r1, [pc, #252]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	628b      	str	r3, [r1, #40]	; 0x28
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	025b      	lsls	r3, r3, #9
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	041b      	lsls	r3, r3, #16
 8008baa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	061b      	lsls	r3, r3, #24
 8008bb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008bbc:	4931      	ldr	r1, [pc, #196]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008bc2:	4b30      	ldr	r3, [pc, #192]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	492d      	ldr	r1, [pc, #180]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008bd4:	4b2b      	ldr	r3, [pc, #172]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	4928      	ldr	r1, [pc, #160]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008be2:	4313      	orrs	r3, r2
 8008be4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008be6:	4b27      	ldr	r3, [pc, #156]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bea:	4a26      	ldr	r2, [pc, #152]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008bf2:	4b24      	ldr	r3, [pc, #144]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bf6:	4b24      	ldr	r3, [pc, #144]	; (8008c88 <RCCEx_PLL3_Config+0x160>)
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	69d2      	ldr	r2, [r2, #28]
 8008bfe:	00d2      	lsls	r2, r2, #3
 8008c00:	4920      	ldr	r1, [pc, #128]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008c02:	4313      	orrs	r3, r2
 8008c04:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008c06:	4b1f      	ldr	r3, [pc, #124]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0a:	4a1e      	ldr	r2, [pc, #120]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d106      	bne.n	8008c26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008c18:	4b1a      	ldr	r3, [pc, #104]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1c:	4a19      	ldr	r2, [pc, #100]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008c1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008c22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c24:	e00f      	b.n	8008c46 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d106      	bne.n	8008c3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008c2c:	4b15      	ldr	r3, [pc, #84]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c30:	4a14      	ldr	r2, [pc, #80]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008c32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c38:	e005      	b.n	8008c46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008c3a:	4b12      	ldr	r3, [pc, #72]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3e:	4a11      	ldr	r2, [pc, #68]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008c40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008c46:	4b0f      	ldr	r3, [pc, #60]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a0e      	ldr	r2, [pc, #56]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c52:	f7f8 feb3 	bl	80019bc <HAL_GetTick>
 8008c56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c58:	e008      	b.n	8008c6c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c5a:	f7f8 feaf 	bl	80019bc <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d901      	bls.n	8008c6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e006      	b.n	8008c7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008c6c:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <RCCEx_PLL3_Config+0x15c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d0f0      	beq.n	8008c5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	58024400 	.word	0x58024400
 8008c88:	ffff0007 	.word	0xffff0007

08008c8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e049      	b.n	8008d32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d106      	bne.n	8008cb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7f8 fcf6 	bl	80016a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4610      	mov	r0, r2
 8008ccc:	f000 f8a6 	bl	8008e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d001      	beq.n	8008d54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e04c      	b.n	8008dee <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a26      	ldr	r2, [pc, #152]	; (8008dfc <HAL_TIM_Base_Start+0xc0>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d022      	beq.n	8008dac <HAL_TIM_Base_Start+0x70>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d6e:	d01d      	beq.n	8008dac <HAL_TIM_Base_Start+0x70>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a22      	ldr	r2, [pc, #136]	; (8008e00 <HAL_TIM_Base_Start+0xc4>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d018      	beq.n	8008dac <HAL_TIM_Base_Start+0x70>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a21      	ldr	r2, [pc, #132]	; (8008e04 <HAL_TIM_Base_Start+0xc8>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d013      	beq.n	8008dac <HAL_TIM_Base_Start+0x70>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a1f      	ldr	r2, [pc, #124]	; (8008e08 <HAL_TIM_Base_Start+0xcc>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d00e      	beq.n	8008dac <HAL_TIM_Base_Start+0x70>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a1e      	ldr	r2, [pc, #120]	; (8008e0c <HAL_TIM_Base_Start+0xd0>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d009      	beq.n	8008dac <HAL_TIM_Base_Start+0x70>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a1c      	ldr	r2, [pc, #112]	; (8008e10 <HAL_TIM_Base_Start+0xd4>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d004      	beq.n	8008dac <HAL_TIM_Base_Start+0x70>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a1b      	ldr	r2, [pc, #108]	; (8008e14 <HAL_TIM_Base_Start+0xd8>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d115      	bne.n	8008dd8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689a      	ldr	r2, [r3, #8]
 8008db2:	4b19      	ldr	r3, [pc, #100]	; (8008e18 <HAL_TIM_Base_Start+0xdc>)
 8008db4:	4013      	ands	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b06      	cmp	r3, #6
 8008dbc:	d015      	beq.n	8008dea <HAL_TIM_Base_Start+0xae>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc4:	d011      	beq.n	8008dea <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f042 0201 	orr.w	r2, r2, #1
 8008dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dd6:	e008      	b.n	8008dea <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f042 0201 	orr.w	r2, r2, #1
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	e000      	b.n	8008dec <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	40010000 	.word	0x40010000
 8008e00:	40000400 	.word	0x40000400
 8008e04:	40000800 	.word	0x40000800
 8008e08:	40000c00 	.word	0x40000c00
 8008e0c:	40010400 	.word	0x40010400
 8008e10:	40001800 	.word	0x40001800
 8008e14:	40014000 	.word	0x40014000
 8008e18:	00010007 	.word	0x00010007

08008e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a40      	ldr	r2, [pc, #256]	; (8008f30 <TIM_Base_SetConfig+0x114>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d013      	beq.n	8008e5c <TIM_Base_SetConfig+0x40>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e3a:	d00f      	beq.n	8008e5c <TIM_Base_SetConfig+0x40>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a3d      	ldr	r2, [pc, #244]	; (8008f34 <TIM_Base_SetConfig+0x118>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d00b      	beq.n	8008e5c <TIM_Base_SetConfig+0x40>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a3c      	ldr	r2, [pc, #240]	; (8008f38 <TIM_Base_SetConfig+0x11c>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d007      	beq.n	8008e5c <TIM_Base_SetConfig+0x40>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a3b      	ldr	r2, [pc, #236]	; (8008f3c <TIM_Base_SetConfig+0x120>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d003      	beq.n	8008e5c <TIM_Base_SetConfig+0x40>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a3a      	ldr	r2, [pc, #232]	; (8008f40 <TIM_Base_SetConfig+0x124>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d108      	bne.n	8008e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a2f      	ldr	r2, [pc, #188]	; (8008f30 <TIM_Base_SetConfig+0x114>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d01f      	beq.n	8008eb6 <TIM_Base_SetConfig+0x9a>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e7c:	d01b      	beq.n	8008eb6 <TIM_Base_SetConfig+0x9a>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a2c      	ldr	r2, [pc, #176]	; (8008f34 <TIM_Base_SetConfig+0x118>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d017      	beq.n	8008eb6 <TIM_Base_SetConfig+0x9a>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a2b      	ldr	r2, [pc, #172]	; (8008f38 <TIM_Base_SetConfig+0x11c>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d013      	beq.n	8008eb6 <TIM_Base_SetConfig+0x9a>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a2a      	ldr	r2, [pc, #168]	; (8008f3c <TIM_Base_SetConfig+0x120>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d00f      	beq.n	8008eb6 <TIM_Base_SetConfig+0x9a>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a29      	ldr	r2, [pc, #164]	; (8008f40 <TIM_Base_SetConfig+0x124>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d00b      	beq.n	8008eb6 <TIM_Base_SetConfig+0x9a>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a28      	ldr	r2, [pc, #160]	; (8008f44 <TIM_Base_SetConfig+0x128>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d007      	beq.n	8008eb6 <TIM_Base_SetConfig+0x9a>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a27      	ldr	r2, [pc, #156]	; (8008f48 <TIM_Base_SetConfig+0x12c>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d003      	beq.n	8008eb6 <TIM_Base_SetConfig+0x9a>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a26      	ldr	r2, [pc, #152]	; (8008f4c <TIM_Base_SetConfig+0x130>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d108      	bne.n	8008ec8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	689a      	ldr	r2, [r3, #8]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a10      	ldr	r2, [pc, #64]	; (8008f30 <TIM_Base_SetConfig+0x114>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d00f      	beq.n	8008f14 <TIM_Base_SetConfig+0xf8>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a12      	ldr	r2, [pc, #72]	; (8008f40 <TIM_Base_SetConfig+0x124>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d00b      	beq.n	8008f14 <TIM_Base_SetConfig+0xf8>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a11      	ldr	r2, [pc, #68]	; (8008f44 <TIM_Base_SetConfig+0x128>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d007      	beq.n	8008f14 <TIM_Base_SetConfig+0xf8>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a10      	ldr	r2, [pc, #64]	; (8008f48 <TIM_Base_SetConfig+0x12c>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d003      	beq.n	8008f14 <TIM_Base_SetConfig+0xf8>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a0f      	ldr	r2, [pc, #60]	; (8008f4c <TIM_Base_SetConfig+0x130>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d103      	bne.n	8008f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	691a      	ldr	r2, [r3, #16]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	615a      	str	r2, [r3, #20]
}
 8008f22:	bf00      	nop
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	40010000 	.word	0x40010000
 8008f34:	40000400 	.word	0x40000400
 8008f38:	40000800 	.word	0x40000800
 8008f3c:	40000c00 	.word	0x40000c00
 8008f40:	40010400 	.word	0x40010400
 8008f44:	40014000 	.word	0x40014000
 8008f48:	40014400 	.word	0x40014400
 8008f4c:	40014800 	.word	0x40014800

08008f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d101      	bne.n	8008f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f64:	2302      	movs	r3, #2
 8008f66:	e06d      	b.n	8009044 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2202      	movs	r2, #2
 8008f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a30      	ldr	r2, [pc, #192]	; (8009050 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d004      	beq.n	8008f9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a2f      	ldr	r2, [pc, #188]	; (8009054 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d108      	bne.n	8008fae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008fa2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a20      	ldr	r2, [pc, #128]	; (8009050 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d022      	beq.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fda:	d01d      	beq.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a1d      	ldr	r2, [pc, #116]	; (8009058 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d018      	beq.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a1c      	ldr	r2, [pc, #112]	; (800905c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d013      	beq.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a1a      	ldr	r2, [pc, #104]	; (8009060 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d00e      	beq.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a15      	ldr	r2, [pc, #84]	; (8009054 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d009      	beq.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a16      	ldr	r2, [pc, #88]	; (8009064 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d004      	beq.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a15      	ldr	r2, [pc, #84]	; (8009068 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d10c      	bne.n	8009032 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800901e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	4313      	orrs	r3, r2
 8009028:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr
 8009050:	40010000 	.word	0x40010000
 8009054:	40010400 	.word	0x40010400
 8009058:	40000400 	.word	0x40000400
 800905c:	40000800 	.word	0x40000800
 8009060:	40000c00 	.word	0x40000c00
 8009064:	40001800 	.word	0x40001800
 8009068:	40014000 	.word	0x40014000

0800906c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e042      	b.n	8009104 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009084:	2b00      	cmp	r3, #0
 8009086:	d106      	bne.n	8009096 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7f8 fb75 	bl	8001780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2224      	movs	r2, #36	; 0x24
 800909a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f022 0201 	bic.w	r2, r2, #1
 80090ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f82c 	bl	800910c <UART_SetConfig>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d101      	bne.n	80090be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e022      	b.n	8009104 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d002      	beq.n	80090cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fe8c 	bl	8009de4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	685a      	ldr	r2, [r3, #4]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689a      	ldr	r2, [r3, #8]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f042 0201 	orr.w	r2, r2, #1
 80090fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 ff13 	bl	8009f28 <UART_CheckIdleState>
 8009102:	4603      	mov	r3, r0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800910c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009110:	b092      	sub	sp, #72	; 0x48
 8009112:	af00      	add	r7, sp, #0
 8009114:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	689a      	ldr	r2, [r3, #8]
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	431a      	orrs	r2, r3
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	431a      	orrs	r2, r3
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	69db      	ldr	r3, [r3, #28]
 8009130:	4313      	orrs	r3, r2
 8009132:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	4bbe      	ldr	r3, [pc, #760]	; (8009434 <UART_SetConfig+0x328>)
 800913c:	4013      	ands	r3, r2
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	6812      	ldr	r2, [r2, #0]
 8009142:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009144:	430b      	orrs	r3, r1
 8009146:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	68da      	ldr	r2, [r3, #12]
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	430a      	orrs	r2, r1
 800915c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4ab3      	ldr	r2, [pc, #716]	; (8009438 <UART_SetConfig+0x32c>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d004      	beq.n	8009178 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009174:	4313      	orrs	r3, r2
 8009176:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	689a      	ldr	r2, [r3, #8]
 800917e:	4baf      	ldr	r3, [pc, #700]	; (800943c <UART_SetConfig+0x330>)
 8009180:	4013      	ands	r3, r2
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	6812      	ldr	r2, [r2, #0]
 8009186:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009188:	430b      	orrs	r3, r1
 800918a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009192:	f023 010f 	bic.w	r1, r3, #15
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	430a      	orrs	r2, r1
 80091a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4aa6      	ldr	r2, [pc, #664]	; (8009440 <UART_SetConfig+0x334>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d177      	bne.n	800929c <UART_SetConfig+0x190>
 80091ac:	4ba5      	ldr	r3, [pc, #660]	; (8009444 <UART_SetConfig+0x338>)
 80091ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091b4:	2b28      	cmp	r3, #40	; 0x28
 80091b6:	d86d      	bhi.n	8009294 <UART_SetConfig+0x188>
 80091b8:	a201      	add	r2, pc, #4	; (adr r2, 80091c0 <UART_SetConfig+0xb4>)
 80091ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091be:	bf00      	nop
 80091c0:	08009265 	.word	0x08009265
 80091c4:	08009295 	.word	0x08009295
 80091c8:	08009295 	.word	0x08009295
 80091cc:	08009295 	.word	0x08009295
 80091d0:	08009295 	.word	0x08009295
 80091d4:	08009295 	.word	0x08009295
 80091d8:	08009295 	.word	0x08009295
 80091dc:	08009295 	.word	0x08009295
 80091e0:	0800926d 	.word	0x0800926d
 80091e4:	08009295 	.word	0x08009295
 80091e8:	08009295 	.word	0x08009295
 80091ec:	08009295 	.word	0x08009295
 80091f0:	08009295 	.word	0x08009295
 80091f4:	08009295 	.word	0x08009295
 80091f8:	08009295 	.word	0x08009295
 80091fc:	08009295 	.word	0x08009295
 8009200:	08009275 	.word	0x08009275
 8009204:	08009295 	.word	0x08009295
 8009208:	08009295 	.word	0x08009295
 800920c:	08009295 	.word	0x08009295
 8009210:	08009295 	.word	0x08009295
 8009214:	08009295 	.word	0x08009295
 8009218:	08009295 	.word	0x08009295
 800921c:	08009295 	.word	0x08009295
 8009220:	0800927d 	.word	0x0800927d
 8009224:	08009295 	.word	0x08009295
 8009228:	08009295 	.word	0x08009295
 800922c:	08009295 	.word	0x08009295
 8009230:	08009295 	.word	0x08009295
 8009234:	08009295 	.word	0x08009295
 8009238:	08009295 	.word	0x08009295
 800923c:	08009295 	.word	0x08009295
 8009240:	08009285 	.word	0x08009285
 8009244:	08009295 	.word	0x08009295
 8009248:	08009295 	.word	0x08009295
 800924c:	08009295 	.word	0x08009295
 8009250:	08009295 	.word	0x08009295
 8009254:	08009295 	.word	0x08009295
 8009258:	08009295 	.word	0x08009295
 800925c:	08009295 	.word	0x08009295
 8009260:	0800928d 	.word	0x0800928d
 8009264:	2301      	movs	r3, #1
 8009266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800926a:	e326      	b.n	80098ba <UART_SetConfig+0x7ae>
 800926c:	2304      	movs	r3, #4
 800926e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009272:	e322      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009274:	2308      	movs	r3, #8
 8009276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800927a:	e31e      	b.n	80098ba <UART_SetConfig+0x7ae>
 800927c:	2310      	movs	r3, #16
 800927e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009282:	e31a      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009284:	2320      	movs	r3, #32
 8009286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800928a:	e316      	b.n	80098ba <UART_SetConfig+0x7ae>
 800928c:	2340      	movs	r3, #64	; 0x40
 800928e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009292:	e312      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009294:	2380      	movs	r3, #128	; 0x80
 8009296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800929a:	e30e      	b.n	80098ba <UART_SetConfig+0x7ae>
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a69      	ldr	r2, [pc, #420]	; (8009448 <UART_SetConfig+0x33c>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d130      	bne.n	8009308 <UART_SetConfig+0x1fc>
 80092a6:	4b67      	ldr	r3, [pc, #412]	; (8009444 <UART_SetConfig+0x338>)
 80092a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092aa:	f003 0307 	and.w	r3, r3, #7
 80092ae:	2b05      	cmp	r3, #5
 80092b0:	d826      	bhi.n	8009300 <UART_SetConfig+0x1f4>
 80092b2:	a201      	add	r2, pc, #4	; (adr r2, 80092b8 <UART_SetConfig+0x1ac>)
 80092b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b8:	080092d1 	.word	0x080092d1
 80092bc:	080092d9 	.word	0x080092d9
 80092c0:	080092e1 	.word	0x080092e1
 80092c4:	080092e9 	.word	0x080092e9
 80092c8:	080092f1 	.word	0x080092f1
 80092cc:	080092f9 	.word	0x080092f9
 80092d0:	2300      	movs	r3, #0
 80092d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092d6:	e2f0      	b.n	80098ba <UART_SetConfig+0x7ae>
 80092d8:	2304      	movs	r3, #4
 80092da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092de:	e2ec      	b.n	80098ba <UART_SetConfig+0x7ae>
 80092e0:	2308      	movs	r3, #8
 80092e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092e6:	e2e8      	b.n	80098ba <UART_SetConfig+0x7ae>
 80092e8:	2310      	movs	r3, #16
 80092ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ee:	e2e4      	b.n	80098ba <UART_SetConfig+0x7ae>
 80092f0:	2320      	movs	r3, #32
 80092f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092f6:	e2e0      	b.n	80098ba <UART_SetConfig+0x7ae>
 80092f8:	2340      	movs	r3, #64	; 0x40
 80092fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092fe:	e2dc      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009300:	2380      	movs	r3, #128	; 0x80
 8009302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009306:	e2d8      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a4f      	ldr	r2, [pc, #316]	; (800944c <UART_SetConfig+0x340>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d130      	bne.n	8009374 <UART_SetConfig+0x268>
 8009312:	4b4c      	ldr	r3, [pc, #304]	; (8009444 <UART_SetConfig+0x338>)
 8009314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009316:	f003 0307 	and.w	r3, r3, #7
 800931a:	2b05      	cmp	r3, #5
 800931c:	d826      	bhi.n	800936c <UART_SetConfig+0x260>
 800931e:	a201      	add	r2, pc, #4	; (adr r2, 8009324 <UART_SetConfig+0x218>)
 8009320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009324:	0800933d 	.word	0x0800933d
 8009328:	08009345 	.word	0x08009345
 800932c:	0800934d 	.word	0x0800934d
 8009330:	08009355 	.word	0x08009355
 8009334:	0800935d 	.word	0x0800935d
 8009338:	08009365 	.word	0x08009365
 800933c:	2300      	movs	r3, #0
 800933e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009342:	e2ba      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009344:	2304      	movs	r3, #4
 8009346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800934a:	e2b6      	b.n	80098ba <UART_SetConfig+0x7ae>
 800934c:	2308      	movs	r3, #8
 800934e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009352:	e2b2      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009354:	2310      	movs	r3, #16
 8009356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800935a:	e2ae      	b.n	80098ba <UART_SetConfig+0x7ae>
 800935c:	2320      	movs	r3, #32
 800935e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009362:	e2aa      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009364:	2340      	movs	r3, #64	; 0x40
 8009366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800936a:	e2a6      	b.n	80098ba <UART_SetConfig+0x7ae>
 800936c:	2380      	movs	r3, #128	; 0x80
 800936e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009372:	e2a2      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a35      	ldr	r2, [pc, #212]	; (8009450 <UART_SetConfig+0x344>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d130      	bne.n	80093e0 <UART_SetConfig+0x2d4>
 800937e:	4b31      	ldr	r3, [pc, #196]	; (8009444 <UART_SetConfig+0x338>)
 8009380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009382:	f003 0307 	and.w	r3, r3, #7
 8009386:	2b05      	cmp	r3, #5
 8009388:	d826      	bhi.n	80093d8 <UART_SetConfig+0x2cc>
 800938a:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <UART_SetConfig+0x284>)
 800938c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009390:	080093a9 	.word	0x080093a9
 8009394:	080093b1 	.word	0x080093b1
 8009398:	080093b9 	.word	0x080093b9
 800939c:	080093c1 	.word	0x080093c1
 80093a0:	080093c9 	.word	0x080093c9
 80093a4:	080093d1 	.word	0x080093d1
 80093a8:	2300      	movs	r3, #0
 80093aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ae:	e284      	b.n	80098ba <UART_SetConfig+0x7ae>
 80093b0:	2304      	movs	r3, #4
 80093b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093b6:	e280      	b.n	80098ba <UART_SetConfig+0x7ae>
 80093b8:	2308      	movs	r3, #8
 80093ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093be:	e27c      	b.n	80098ba <UART_SetConfig+0x7ae>
 80093c0:	2310      	movs	r3, #16
 80093c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093c6:	e278      	b.n	80098ba <UART_SetConfig+0x7ae>
 80093c8:	2320      	movs	r3, #32
 80093ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ce:	e274      	b.n	80098ba <UART_SetConfig+0x7ae>
 80093d0:	2340      	movs	r3, #64	; 0x40
 80093d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093d6:	e270      	b.n	80098ba <UART_SetConfig+0x7ae>
 80093d8:	2380      	movs	r3, #128	; 0x80
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093de:	e26c      	b.n	80098ba <UART_SetConfig+0x7ae>
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a1b      	ldr	r2, [pc, #108]	; (8009454 <UART_SetConfig+0x348>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d142      	bne.n	8009470 <UART_SetConfig+0x364>
 80093ea:	4b16      	ldr	r3, [pc, #88]	; (8009444 <UART_SetConfig+0x338>)
 80093ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ee:	f003 0307 	and.w	r3, r3, #7
 80093f2:	2b05      	cmp	r3, #5
 80093f4:	d838      	bhi.n	8009468 <UART_SetConfig+0x35c>
 80093f6:	a201      	add	r2, pc, #4	; (adr r2, 80093fc <UART_SetConfig+0x2f0>)
 80093f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fc:	08009415 	.word	0x08009415
 8009400:	0800941d 	.word	0x0800941d
 8009404:	08009425 	.word	0x08009425
 8009408:	0800942d 	.word	0x0800942d
 800940c:	08009459 	.word	0x08009459
 8009410:	08009461 	.word	0x08009461
 8009414:	2300      	movs	r3, #0
 8009416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800941a:	e24e      	b.n	80098ba <UART_SetConfig+0x7ae>
 800941c:	2304      	movs	r3, #4
 800941e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009422:	e24a      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009424:	2308      	movs	r3, #8
 8009426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800942a:	e246      	b.n	80098ba <UART_SetConfig+0x7ae>
 800942c:	2310      	movs	r3, #16
 800942e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009432:	e242      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009434:	cfff69f3 	.word	0xcfff69f3
 8009438:	58000c00 	.word	0x58000c00
 800943c:	11fff4ff 	.word	0x11fff4ff
 8009440:	40011000 	.word	0x40011000
 8009444:	58024400 	.word	0x58024400
 8009448:	40004400 	.word	0x40004400
 800944c:	40004800 	.word	0x40004800
 8009450:	40004c00 	.word	0x40004c00
 8009454:	40005000 	.word	0x40005000
 8009458:	2320      	movs	r3, #32
 800945a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800945e:	e22c      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009460:	2340      	movs	r3, #64	; 0x40
 8009462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009466:	e228      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009468:	2380      	movs	r3, #128	; 0x80
 800946a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800946e:	e224      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4ab1      	ldr	r2, [pc, #708]	; (800973c <UART_SetConfig+0x630>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d176      	bne.n	8009568 <UART_SetConfig+0x45c>
 800947a:	4bb1      	ldr	r3, [pc, #708]	; (8009740 <UART_SetConfig+0x634>)
 800947c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800947e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009482:	2b28      	cmp	r3, #40	; 0x28
 8009484:	d86c      	bhi.n	8009560 <UART_SetConfig+0x454>
 8009486:	a201      	add	r2, pc, #4	; (adr r2, 800948c <UART_SetConfig+0x380>)
 8009488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948c:	08009531 	.word	0x08009531
 8009490:	08009561 	.word	0x08009561
 8009494:	08009561 	.word	0x08009561
 8009498:	08009561 	.word	0x08009561
 800949c:	08009561 	.word	0x08009561
 80094a0:	08009561 	.word	0x08009561
 80094a4:	08009561 	.word	0x08009561
 80094a8:	08009561 	.word	0x08009561
 80094ac:	08009539 	.word	0x08009539
 80094b0:	08009561 	.word	0x08009561
 80094b4:	08009561 	.word	0x08009561
 80094b8:	08009561 	.word	0x08009561
 80094bc:	08009561 	.word	0x08009561
 80094c0:	08009561 	.word	0x08009561
 80094c4:	08009561 	.word	0x08009561
 80094c8:	08009561 	.word	0x08009561
 80094cc:	08009541 	.word	0x08009541
 80094d0:	08009561 	.word	0x08009561
 80094d4:	08009561 	.word	0x08009561
 80094d8:	08009561 	.word	0x08009561
 80094dc:	08009561 	.word	0x08009561
 80094e0:	08009561 	.word	0x08009561
 80094e4:	08009561 	.word	0x08009561
 80094e8:	08009561 	.word	0x08009561
 80094ec:	08009549 	.word	0x08009549
 80094f0:	08009561 	.word	0x08009561
 80094f4:	08009561 	.word	0x08009561
 80094f8:	08009561 	.word	0x08009561
 80094fc:	08009561 	.word	0x08009561
 8009500:	08009561 	.word	0x08009561
 8009504:	08009561 	.word	0x08009561
 8009508:	08009561 	.word	0x08009561
 800950c:	08009551 	.word	0x08009551
 8009510:	08009561 	.word	0x08009561
 8009514:	08009561 	.word	0x08009561
 8009518:	08009561 	.word	0x08009561
 800951c:	08009561 	.word	0x08009561
 8009520:	08009561 	.word	0x08009561
 8009524:	08009561 	.word	0x08009561
 8009528:	08009561 	.word	0x08009561
 800952c:	08009559 	.word	0x08009559
 8009530:	2301      	movs	r3, #1
 8009532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009536:	e1c0      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009538:	2304      	movs	r3, #4
 800953a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800953e:	e1bc      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009540:	2308      	movs	r3, #8
 8009542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009546:	e1b8      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009548:	2310      	movs	r3, #16
 800954a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800954e:	e1b4      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009550:	2320      	movs	r3, #32
 8009552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009556:	e1b0      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009558:	2340      	movs	r3, #64	; 0x40
 800955a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800955e:	e1ac      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009560:	2380      	movs	r3, #128	; 0x80
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009566:	e1a8      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a75      	ldr	r2, [pc, #468]	; (8009744 <UART_SetConfig+0x638>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d130      	bne.n	80095d4 <UART_SetConfig+0x4c8>
 8009572:	4b73      	ldr	r3, [pc, #460]	; (8009740 <UART_SetConfig+0x634>)
 8009574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009576:	f003 0307 	and.w	r3, r3, #7
 800957a:	2b05      	cmp	r3, #5
 800957c:	d826      	bhi.n	80095cc <UART_SetConfig+0x4c0>
 800957e:	a201      	add	r2, pc, #4	; (adr r2, 8009584 <UART_SetConfig+0x478>)
 8009580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009584:	0800959d 	.word	0x0800959d
 8009588:	080095a5 	.word	0x080095a5
 800958c:	080095ad 	.word	0x080095ad
 8009590:	080095b5 	.word	0x080095b5
 8009594:	080095bd 	.word	0x080095bd
 8009598:	080095c5 	.word	0x080095c5
 800959c:	2300      	movs	r3, #0
 800959e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095a2:	e18a      	b.n	80098ba <UART_SetConfig+0x7ae>
 80095a4:	2304      	movs	r3, #4
 80095a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095aa:	e186      	b.n	80098ba <UART_SetConfig+0x7ae>
 80095ac:	2308      	movs	r3, #8
 80095ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095b2:	e182      	b.n	80098ba <UART_SetConfig+0x7ae>
 80095b4:	2310      	movs	r3, #16
 80095b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ba:	e17e      	b.n	80098ba <UART_SetConfig+0x7ae>
 80095bc:	2320      	movs	r3, #32
 80095be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095c2:	e17a      	b.n	80098ba <UART_SetConfig+0x7ae>
 80095c4:	2340      	movs	r3, #64	; 0x40
 80095c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ca:	e176      	b.n	80098ba <UART_SetConfig+0x7ae>
 80095cc:	2380      	movs	r3, #128	; 0x80
 80095ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095d2:	e172      	b.n	80098ba <UART_SetConfig+0x7ae>
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a5b      	ldr	r2, [pc, #364]	; (8009748 <UART_SetConfig+0x63c>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d130      	bne.n	8009640 <UART_SetConfig+0x534>
 80095de:	4b58      	ldr	r3, [pc, #352]	; (8009740 <UART_SetConfig+0x634>)
 80095e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e2:	f003 0307 	and.w	r3, r3, #7
 80095e6:	2b05      	cmp	r3, #5
 80095e8:	d826      	bhi.n	8009638 <UART_SetConfig+0x52c>
 80095ea:	a201      	add	r2, pc, #4	; (adr r2, 80095f0 <UART_SetConfig+0x4e4>)
 80095ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f0:	08009609 	.word	0x08009609
 80095f4:	08009611 	.word	0x08009611
 80095f8:	08009619 	.word	0x08009619
 80095fc:	08009621 	.word	0x08009621
 8009600:	08009629 	.word	0x08009629
 8009604:	08009631 	.word	0x08009631
 8009608:	2300      	movs	r3, #0
 800960a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800960e:	e154      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009610:	2304      	movs	r3, #4
 8009612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009616:	e150      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009618:	2308      	movs	r3, #8
 800961a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800961e:	e14c      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009620:	2310      	movs	r3, #16
 8009622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009626:	e148      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009628:	2320      	movs	r3, #32
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800962e:	e144      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009630:	2340      	movs	r3, #64	; 0x40
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009636:	e140      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009638:	2380      	movs	r3, #128	; 0x80
 800963a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800963e:	e13c      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a41      	ldr	r2, [pc, #260]	; (800974c <UART_SetConfig+0x640>)
 8009646:	4293      	cmp	r3, r2
 8009648:	f040 8082 	bne.w	8009750 <UART_SetConfig+0x644>
 800964c:	4b3c      	ldr	r3, [pc, #240]	; (8009740 <UART_SetConfig+0x634>)
 800964e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009650:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009654:	2b28      	cmp	r3, #40	; 0x28
 8009656:	d86d      	bhi.n	8009734 <UART_SetConfig+0x628>
 8009658:	a201      	add	r2, pc, #4	; (adr r2, 8009660 <UART_SetConfig+0x554>)
 800965a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800965e:	bf00      	nop
 8009660:	08009705 	.word	0x08009705
 8009664:	08009735 	.word	0x08009735
 8009668:	08009735 	.word	0x08009735
 800966c:	08009735 	.word	0x08009735
 8009670:	08009735 	.word	0x08009735
 8009674:	08009735 	.word	0x08009735
 8009678:	08009735 	.word	0x08009735
 800967c:	08009735 	.word	0x08009735
 8009680:	0800970d 	.word	0x0800970d
 8009684:	08009735 	.word	0x08009735
 8009688:	08009735 	.word	0x08009735
 800968c:	08009735 	.word	0x08009735
 8009690:	08009735 	.word	0x08009735
 8009694:	08009735 	.word	0x08009735
 8009698:	08009735 	.word	0x08009735
 800969c:	08009735 	.word	0x08009735
 80096a0:	08009715 	.word	0x08009715
 80096a4:	08009735 	.word	0x08009735
 80096a8:	08009735 	.word	0x08009735
 80096ac:	08009735 	.word	0x08009735
 80096b0:	08009735 	.word	0x08009735
 80096b4:	08009735 	.word	0x08009735
 80096b8:	08009735 	.word	0x08009735
 80096bc:	08009735 	.word	0x08009735
 80096c0:	0800971d 	.word	0x0800971d
 80096c4:	08009735 	.word	0x08009735
 80096c8:	08009735 	.word	0x08009735
 80096cc:	08009735 	.word	0x08009735
 80096d0:	08009735 	.word	0x08009735
 80096d4:	08009735 	.word	0x08009735
 80096d8:	08009735 	.word	0x08009735
 80096dc:	08009735 	.word	0x08009735
 80096e0:	08009725 	.word	0x08009725
 80096e4:	08009735 	.word	0x08009735
 80096e8:	08009735 	.word	0x08009735
 80096ec:	08009735 	.word	0x08009735
 80096f0:	08009735 	.word	0x08009735
 80096f4:	08009735 	.word	0x08009735
 80096f8:	08009735 	.word	0x08009735
 80096fc:	08009735 	.word	0x08009735
 8009700:	0800972d 	.word	0x0800972d
 8009704:	2301      	movs	r3, #1
 8009706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800970a:	e0d6      	b.n	80098ba <UART_SetConfig+0x7ae>
 800970c:	2304      	movs	r3, #4
 800970e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009712:	e0d2      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009714:	2308      	movs	r3, #8
 8009716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800971a:	e0ce      	b.n	80098ba <UART_SetConfig+0x7ae>
 800971c:	2310      	movs	r3, #16
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009722:	e0ca      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009724:	2320      	movs	r3, #32
 8009726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800972a:	e0c6      	b.n	80098ba <UART_SetConfig+0x7ae>
 800972c:	2340      	movs	r3, #64	; 0x40
 800972e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009732:	e0c2      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009734:	2380      	movs	r3, #128	; 0x80
 8009736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800973a:	e0be      	b.n	80098ba <UART_SetConfig+0x7ae>
 800973c:	40011400 	.word	0x40011400
 8009740:	58024400 	.word	0x58024400
 8009744:	40007800 	.word	0x40007800
 8009748:	40007c00 	.word	0x40007c00
 800974c:	40011800 	.word	0x40011800
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4aad      	ldr	r2, [pc, #692]	; (8009a0c <UART_SetConfig+0x900>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d176      	bne.n	8009848 <UART_SetConfig+0x73c>
 800975a:	4bad      	ldr	r3, [pc, #692]	; (8009a10 <UART_SetConfig+0x904>)
 800975c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800975e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009762:	2b28      	cmp	r3, #40	; 0x28
 8009764:	d86c      	bhi.n	8009840 <UART_SetConfig+0x734>
 8009766:	a201      	add	r2, pc, #4	; (adr r2, 800976c <UART_SetConfig+0x660>)
 8009768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976c:	08009811 	.word	0x08009811
 8009770:	08009841 	.word	0x08009841
 8009774:	08009841 	.word	0x08009841
 8009778:	08009841 	.word	0x08009841
 800977c:	08009841 	.word	0x08009841
 8009780:	08009841 	.word	0x08009841
 8009784:	08009841 	.word	0x08009841
 8009788:	08009841 	.word	0x08009841
 800978c:	08009819 	.word	0x08009819
 8009790:	08009841 	.word	0x08009841
 8009794:	08009841 	.word	0x08009841
 8009798:	08009841 	.word	0x08009841
 800979c:	08009841 	.word	0x08009841
 80097a0:	08009841 	.word	0x08009841
 80097a4:	08009841 	.word	0x08009841
 80097a8:	08009841 	.word	0x08009841
 80097ac:	08009821 	.word	0x08009821
 80097b0:	08009841 	.word	0x08009841
 80097b4:	08009841 	.word	0x08009841
 80097b8:	08009841 	.word	0x08009841
 80097bc:	08009841 	.word	0x08009841
 80097c0:	08009841 	.word	0x08009841
 80097c4:	08009841 	.word	0x08009841
 80097c8:	08009841 	.word	0x08009841
 80097cc:	08009829 	.word	0x08009829
 80097d0:	08009841 	.word	0x08009841
 80097d4:	08009841 	.word	0x08009841
 80097d8:	08009841 	.word	0x08009841
 80097dc:	08009841 	.word	0x08009841
 80097e0:	08009841 	.word	0x08009841
 80097e4:	08009841 	.word	0x08009841
 80097e8:	08009841 	.word	0x08009841
 80097ec:	08009831 	.word	0x08009831
 80097f0:	08009841 	.word	0x08009841
 80097f4:	08009841 	.word	0x08009841
 80097f8:	08009841 	.word	0x08009841
 80097fc:	08009841 	.word	0x08009841
 8009800:	08009841 	.word	0x08009841
 8009804:	08009841 	.word	0x08009841
 8009808:	08009841 	.word	0x08009841
 800980c:	08009839 	.word	0x08009839
 8009810:	2301      	movs	r3, #1
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009816:	e050      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009818:	2304      	movs	r3, #4
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800981e:	e04c      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009820:	2308      	movs	r3, #8
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009826:	e048      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009828:	2310      	movs	r3, #16
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800982e:	e044      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009830:	2320      	movs	r3, #32
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009836:	e040      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009838:	2340      	movs	r3, #64	; 0x40
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800983e:	e03c      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009840:	2380      	movs	r3, #128	; 0x80
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009846:	e038      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a71      	ldr	r2, [pc, #452]	; (8009a14 <UART_SetConfig+0x908>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d130      	bne.n	80098b4 <UART_SetConfig+0x7a8>
 8009852:	4b6f      	ldr	r3, [pc, #444]	; (8009a10 <UART_SetConfig+0x904>)
 8009854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009856:	f003 0307 	and.w	r3, r3, #7
 800985a:	2b05      	cmp	r3, #5
 800985c:	d826      	bhi.n	80098ac <UART_SetConfig+0x7a0>
 800985e:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <UART_SetConfig+0x758>)
 8009860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009864:	0800987d 	.word	0x0800987d
 8009868:	08009885 	.word	0x08009885
 800986c:	0800988d 	.word	0x0800988d
 8009870:	08009895 	.word	0x08009895
 8009874:	0800989d 	.word	0x0800989d
 8009878:	080098a5 	.word	0x080098a5
 800987c:	2302      	movs	r3, #2
 800987e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009882:	e01a      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009884:	2304      	movs	r3, #4
 8009886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800988a:	e016      	b.n	80098ba <UART_SetConfig+0x7ae>
 800988c:	2308      	movs	r3, #8
 800988e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009892:	e012      	b.n	80098ba <UART_SetConfig+0x7ae>
 8009894:	2310      	movs	r3, #16
 8009896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800989a:	e00e      	b.n	80098ba <UART_SetConfig+0x7ae>
 800989c:	2320      	movs	r3, #32
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a2:	e00a      	b.n	80098ba <UART_SetConfig+0x7ae>
 80098a4:	2340      	movs	r3, #64	; 0x40
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098aa:	e006      	b.n	80098ba <UART_SetConfig+0x7ae>
 80098ac:	2380      	movs	r3, #128	; 0x80
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098b2:	e002      	b.n	80098ba <UART_SetConfig+0x7ae>
 80098b4:	2380      	movs	r3, #128	; 0x80
 80098b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a55      	ldr	r2, [pc, #340]	; (8009a14 <UART_SetConfig+0x908>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	f040 80f8 	bne.w	8009ab6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80098ca:	2b20      	cmp	r3, #32
 80098cc:	dc46      	bgt.n	800995c <UART_SetConfig+0x850>
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	db75      	blt.n	80099be <UART_SetConfig+0x8b2>
 80098d2:	3b02      	subs	r3, #2
 80098d4:	2b1e      	cmp	r3, #30
 80098d6:	d872      	bhi.n	80099be <UART_SetConfig+0x8b2>
 80098d8:	a201      	add	r2, pc, #4	; (adr r2, 80098e0 <UART_SetConfig+0x7d4>)
 80098da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098de:	bf00      	nop
 80098e0:	08009963 	.word	0x08009963
 80098e4:	080099bf 	.word	0x080099bf
 80098e8:	0800996b 	.word	0x0800996b
 80098ec:	080099bf 	.word	0x080099bf
 80098f0:	080099bf 	.word	0x080099bf
 80098f4:	080099bf 	.word	0x080099bf
 80098f8:	0800997b 	.word	0x0800997b
 80098fc:	080099bf 	.word	0x080099bf
 8009900:	080099bf 	.word	0x080099bf
 8009904:	080099bf 	.word	0x080099bf
 8009908:	080099bf 	.word	0x080099bf
 800990c:	080099bf 	.word	0x080099bf
 8009910:	080099bf 	.word	0x080099bf
 8009914:	080099bf 	.word	0x080099bf
 8009918:	0800998b 	.word	0x0800998b
 800991c:	080099bf 	.word	0x080099bf
 8009920:	080099bf 	.word	0x080099bf
 8009924:	080099bf 	.word	0x080099bf
 8009928:	080099bf 	.word	0x080099bf
 800992c:	080099bf 	.word	0x080099bf
 8009930:	080099bf 	.word	0x080099bf
 8009934:	080099bf 	.word	0x080099bf
 8009938:	080099bf 	.word	0x080099bf
 800993c:	080099bf 	.word	0x080099bf
 8009940:	080099bf 	.word	0x080099bf
 8009944:	080099bf 	.word	0x080099bf
 8009948:	080099bf 	.word	0x080099bf
 800994c:	080099bf 	.word	0x080099bf
 8009950:	080099bf 	.word	0x080099bf
 8009954:	080099bf 	.word	0x080099bf
 8009958:	080099b1 	.word	0x080099b1
 800995c:	2b40      	cmp	r3, #64	; 0x40
 800995e:	d02a      	beq.n	80099b6 <UART_SetConfig+0x8aa>
 8009960:	e02d      	b.n	80099be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009962:	f7fe fc1f 	bl	80081a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009966:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009968:	e02f      	b.n	80099ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800996a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800996e:	4618      	mov	r0, r3
 8009970:	f7fe fc2e 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009978:	e027      	b.n	80099ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800997a:	f107 0318 	add.w	r3, r7, #24
 800997e:	4618      	mov	r0, r3
 8009980:	f7fe fd7a 	bl	8008478 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009988:	e01f      	b.n	80099ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800998a:	4b21      	ldr	r3, [pc, #132]	; (8009a10 <UART_SetConfig+0x904>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0320 	and.w	r3, r3, #32
 8009992:	2b00      	cmp	r3, #0
 8009994:	d009      	beq.n	80099aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009996:	4b1e      	ldr	r3, [pc, #120]	; (8009a10 <UART_SetConfig+0x904>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	08db      	lsrs	r3, r3, #3
 800999c:	f003 0303 	and.w	r3, r3, #3
 80099a0:	4a1d      	ldr	r2, [pc, #116]	; (8009a18 <UART_SetConfig+0x90c>)
 80099a2:	fa22 f303 	lsr.w	r3, r2, r3
 80099a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80099a8:	e00f      	b.n	80099ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80099aa:	4b1b      	ldr	r3, [pc, #108]	; (8009a18 <UART_SetConfig+0x90c>)
 80099ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099ae:	e00c      	b.n	80099ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80099b0:	4b1a      	ldr	r3, [pc, #104]	; (8009a1c <UART_SetConfig+0x910>)
 80099b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099b4:	e009      	b.n	80099ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099bc:	e005      	b.n	80099ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80099be:	2300      	movs	r3, #0
 80099c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80099c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f000 81ee 	beq.w	8009dae <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d6:	4a12      	ldr	r2, [pc, #72]	; (8009a20 <UART_SetConfig+0x914>)
 80099d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099dc:	461a      	mov	r2, r3
 80099de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80099e4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	685a      	ldr	r2, [r3, #4]
 80099ea:	4613      	mov	r3, r2
 80099ec:	005b      	lsls	r3, r3, #1
 80099ee:	4413      	add	r3, r2
 80099f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d305      	bcc.n	8009a02 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d910      	bls.n	8009a24 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009a08:	e1d1      	b.n	8009dae <UART_SetConfig+0xca2>
 8009a0a:	bf00      	nop
 8009a0c:	40011c00 	.word	0x40011c00
 8009a10:	58024400 	.word	0x58024400
 8009a14:	58000c00 	.word	0x58000c00
 8009a18:	03d09000 	.word	0x03d09000
 8009a1c:	003d0900 	.word	0x003d0900
 8009a20:	0800a718 	.word	0x0800a718
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a26:	2200      	movs	r2, #0
 8009a28:	60bb      	str	r3, [r7, #8]
 8009a2a:	60fa      	str	r2, [r7, #12]
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	4ac0      	ldr	r2, [pc, #768]	; (8009d34 <UART_SetConfig+0xc28>)
 8009a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	2200      	movs	r2, #0
 8009a3a:	603b      	str	r3, [r7, #0]
 8009a3c:	607a      	str	r2, [r7, #4]
 8009a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a46:	f7f6 fe0f 	bl	8000668 <__aeabi_uldivmod>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	4610      	mov	r0, r2
 8009a50:	4619      	mov	r1, r3
 8009a52:	f04f 0200 	mov.w	r2, #0
 8009a56:	f04f 0300 	mov.w	r3, #0
 8009a5a:	020b      	lsls	r3, r1, #8
 8009a5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a60:	0202      	lsls	r2, r0, #8
 8009a62:	6979      	ldr	r1, [r7, #20]
 8009a64:	6849      	ldr	r1, [r1, #4]
 8009a66:	0849      	lsrs	r1, r1, #1
 8009a68:	2000      	movs	r0, #0
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	eb12 0804 	adds.w	r8, r2, r4
 8009a72:	eb43 0905 	adc.w	r9, r3, r5
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	469a      	mov	sl, r3
 8009a7e:	4693      	mov	fp, r2
 8009a80:	4652      	mov	r2, sl
 8009a82:	465b      	mov	r3, fp
 8009a84:	4640      	mov	r0, r8
 8009a86:	4649      	mov	r1, r9
 8009a88:	f7f6 fdee 	bl	8000668 <__aeabi_uldivmod>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4613      	mov	r3, r2
 8009a92:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a9a:	d308      	bcc.n	8009aae <UART_SetConfig+0x9a2>
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009aa2:	d204      	bcs.n	8009aae <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009aaa:	60da      	str	r2, [r3, #12]
 8009aac:	e17f      	b.n	8009dae <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009ab4:	e17b      	b.n	8009dae <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	69db      	ldr	r3, [r3, #28]
 8009aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009abe:	f040 80bd 	bne.w	8009c3c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009ac2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009ac6:	2b20      	cmp	r3, #32
 8009ac8:	dc48      	bgt.n	8009b5c <UART_SetConfig+0xa50>
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	db7b      	blt.n	8009bc6 <UART_SetConfig+0xaba>
 8009ace:	2b20      	cmp	r3, #32
 8009ad0:	d879      	bhi.n	8009bc6 <UART_SetConfig+0xaba>
 8009ad2:	a201      	add	r2, pc, #4	; (adr r2, 8009ad8 <UART_SetConfig+0x9cc>)
 8009ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad8:	08009b63 	.word	0x08009b63
 8009adc:	08009b6b 	.word	0x08009b6b
 8009ae0:	08009bc7 	.word	0x08009bc7
 8009ae4:	08009bc7 	.word	0x08009bc7
 8009ae8:	08009b73 	.word	0x08009b73
 8009aec:	08009bc7 	.word	0x08009bc7
 8009af0:	08009bc7 	.word	0x08009bc7
 8009af4:	08009bc7 	.word	0x08009bc7
 8009af8:	08009b83 	.word	0x08009b83
 8009afc:	08009bc7 	.word	0x08009bc7
 8009b00:	08009bc7 	.word	0x08009bc7
 8009b04:	08009bc7 	.word	0x08009bc7
 8009b08:	08009bc7 	.word	0x08009bc7
 8009b0c:	08009bc7 	.word	0x08009bc7
 8009b10:	08009bc7 	.word	0x08009bc7
 8009b14:	08009bc7 	.word	0x08009bc7
 8009b18:	08009b93 	.word	0x08009b93
 8009b1c:	08009bc7 	.word	0x08009bc7
 8009b20:	08009bc7 	.word	0x08009bc7
 8009b24:	08009bc7 	.word	0x08009bc7
 8009b28:	08009bc7 	.word	0x08009bc7
 8009b2c:	08009bc7 	.word	0x08009bc7
 8009b30:	08009bc7 	.word	0x08009bc7
 8009b34:	08009bc7 	.word	0x08009bc7
 8009b38:	08009bc7 	.word	0x08009bc7
 8009b3c:	08009bc7 	.word	0x08009bc7
 8009b40:	08009bc7 	.word	0x08009bc7
 8009b44:	08009bc7 	.word	0x08009bc7
 8009b48:	08009bc7 	.word	0x08009bc7
 8009b4c:	08009bc7 	.word	0x08009bc7
 8009b50:	08009bc7 	.word	0x08009bc7
 8009b54:	08009bc7 	.word	0x08009bc7
 8009b58:	08009bb9 	.word	0x08009bb9
 8009b5c:	2b40      	cmp	r3, #64	; 0x40
 8009b5e:	d02e      	beq.n	8009bbe <UART_SetConfig+0xab2>
 8009b60:	e031      	b.n	8009bc6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b62:	f7fc ffb9 	bl	8006ad8 <HAL_RCC_GetPCLK1Freq>
 8009b66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009b68:	e033      	b.n	8009bd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b6a:	f7fc ffcb 	bl	8006b04 <HAL_RCC_GetPCLK2Freq>
 8009b6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009b70:	e02f      	b.n	8009bd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7fe fb2a 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b80:	e027      	b.n	8009bd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b82:	f107 0318 	add.w	r3, r7, #24
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fe fc76 	bl	8008478 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b90:	e01f      	b.n	8009bd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b92:	4b69      	ldr	r3, [pc, #420]	; (8009d38 <UART_SetConfig+0xc2c>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 0320 	and.w	r3, r3, #32
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d009      	beq.n	8009bb2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b9e:	4b66      	ldr	r3, [pc, #408]	; (8009d38 <UART_SetConfig+0xc2c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	08db      	lsrs	r3, r3, #3
 8009ba4:	f003 0303 	and.w	r3, r3, #3
 8009ba8:	4a64      	ldr	r2, [pc, #400]	; (8009d3c <UART_SetConfig+0xc30>)
 8009baa:	fa22 f303 	lsr.w	r3, r2, r3
 8009bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009bb0:	e00f      	b.n	8009bd2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009bb2:	4b62      	ldr	r3, [pc, #392]	; (8009d3c <UART_SetConfig+0xc30>)
 8009bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bb6:	e00c      	b.n	8009bd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009bb8:	4b61      	ldr	r3, [pc, #388]	; (8009d40 <UART_SetConfig+0xc34>)
 8009bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bbc:	e009      	b.n	8009bd2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bc4:	e005      	b.n	8009bd2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009bd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f000 80ea 	beq.w	8009dae <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bde:	4a55      	ldr	r2, [pc, #340]	; (8009d34 <UART_SetConfig+0xc28>)
 8009be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009be4:	461a      	mov	r2, r3
 8009be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bec:	005a      	lsls	r2, r3, #1
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	085b      	lsrs	r3, r3, #1
 8009bf4:	441a      	add	r2, r3
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bfe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c02:	2b0f      	cmp	r3, #15
 8009c04:	d916      	bls.n	8009c34 <UART_SetConfig+0xb28>
 8009c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c0c:	d212      	bcs.n	8009c34 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	f023 030f 	bic.w	r3, r3, #15
 8009c16:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1a:	085b      	lsrs	r3, r3, #1
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	f003 0307 	and.w	r3, r3, #7
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009c26:	4313      	orrs	r3, r2
 8009c28:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009c30:	60da      	str	r2, [r3, #12]
 8009c32:	e0bc      	b.n	8009dae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009c3a:	e0b8      	b.n	8009dae <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c40:	2b20      	cmp	r3, #32
 8009c42:	dc4b      	bgt.n	8009cdc <UART_SetConfig+0xbd0>
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f2c0 8087 	blt.w	8009d58 <UART_SetConfig+0xc4c>
 8009c4a:	2b20      	cmp	r3, #32
 8009c4c:	f200 8084 	bhi.w	8009d58 <UART_SetConfig+0xc4c>
 8009c50:	a201      	add	r2, pc, #4	; (adr r2, 8009c58 <UART_SetConfig+0xb4c>)
 8009c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c56:	bf00      	nop
 8009c58:	08009ce3 	.word	0x08009ce3
 8009c5c:	08009ceb 	.word	0x08009ceb
 8009c60:	08009d59 	.word	0x08009d59
 8009c64:	08009d59 	.word	0x08009d59
 8009c68:	08009cf3 	.word	0x08009cf3
 8009c6c:	08009d59 	.word	0x08009d59
 8009c70:	08009d59 	.word	0x08009d59
 8009c74:	08009d59 	.word	0x08009d59
 8009c78:	08009d03 	.word	0x08009d03
 8009c7c:	08009d59 	.word	0x08009d59
 8009c80:	08009d59 	.word	0x08009d59
 8009c84:	08009d59 	.word	0x08009d59
 8009c88:	08009d59 	.word	0x08009d59
 8009c8c:	08009d59 	.word	0x08009d59
 8009c90:	08009d59 	.word	0x08009d59
 8009c94:	08009d59 	.word	0x08009d59
 8009c98:	08009d13 	.word	0x08009d13
 8009c9c:	08009d59 	.word	0x08009d59
 8009ca0:	08009d59 	.word	0x08009d59
 8009ca4:	08009d59 	.word	0x08009d59
 8009ca8:	08009d59 	.word	0x08009d59
 8009cac:	08009d59 	.word	0x08009d59
 8009cb0:	08009d59 	.word	0x08009d59
 8009cb4:	08009d59 	.word	0x08009d59
 8009cb8:	08009d59 	.word	0x08009d59
 8009cbc:	08009d59 	.word	0x08009d59
 8009cc0:	08009d59 	.word	0x08009d59
 8009cc4:	08009d59 	.word	0x08009d59
 8009cc8:	08009d59 	.word	0x08009d59
 8009ccc:	08009d59 	.word	0x08009d59
 8009cd0:	08009d59 	.word	0x08009d59
 8009cd4:	08009d59 	.word	0x08009d59
 8009cd8:	08009d4b 	.word	0x08009d4b
 8009cdc:	2b40      	cmp	r3, #64	; 0x40
 8009cde:	d037      	beq.n	8009d50 <UART_SetConfig+0xc44>
 8009ce0:	e03a      	b.n	8009d58 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ce2:	f7fc fef9 	bl	8006ad8 <HAL_RCC_GetPCLK1Freq>
 8009ce6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ce8:	e03c      	b.n	8009d64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cea:	f7fc ff0b 	bl	8006b04 <HAL_RCC_GetPCLK2Freq>
 8009cee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009cf0:	e038      	b.n	8009d64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe fa6a 	bl	80081d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d00:	e030      	b.n	8009d64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d02:	f107 0318 	add.w	r3, r7, #24
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fe fbb6 	bl	8008478 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d10:	e028      	b.n	8009d64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d12:	4b09      	ldr	r3, [pc, #36]	; (8009d38 <UART_SetConfig+0xc2c>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0320 	and.w	r3, r3, #32
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d012      	beq.n	8009d44 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d1e:	4b06      	ldr	r3, [pc, #24]	; (8009d38 <UART_SetConfig+0xc2c>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	08db      	lsrs	r3, r3, #3
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	4a04      	ldr	r2, [pc, #16]	; (8009d3c <UART_SetConfig+0xc30>)
 8009d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d30:	e018      	b.n	8009d64 <UART_SetConfig+0xc58>
 8009d32:	bf00      	nop
 8009d34:	0800a718 	.word	0x0800a718
 8009d38:	58024400 	.word	0x58024400
 8009d3c:	03d09000 	.word	0x03d09000
 8009d40:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009d44:	4b24      	ldr	r3, [pc, #144]	; (8009dd8 <UART_SetConfig+0xccc>)
 8009d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d48:	e00c      	b.n	8009d64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d4a:	4b24      	ldr	r3, [pc, #144]	; (8009ddc <UART_SetConfig+0xcd0>)
 8009d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d4e:	e009      	b.n	8009d64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d56:	e005      	b.n	8009d64 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009d62:	bf00      	nop
    }

    if (pclk != 0U)
 8009d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d021      	beq.n	8009dae <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6e:	4a1c      	ldr	r2, [pc, #112]	; (8009de0 <UART_SetConfig+0xcd4>)
 8009d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d74:	461a      	mov	r2, r3
 8009d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d78:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	085b      	lsrs	r3, r3, #1
 8009d82:	441a      	add	r2, r3
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d8c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d90:	2b0f      	cmp	r3, #15
 8009d92:	d909      	bls.n	8009da8 <UART_SetConfig+0xc9c>
 8009d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d9a:	d205      	bcs.n	8009da8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	60da      	str	r2, [r3, #12]
 8009da6:	e002      	b.n	8009dae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009dca:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3748      	adds	r7, #72	; 0x48
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dd8:	03d09000 	.word	0x03d09000
 8009ddc:	003d0900 	.word	0x003d0900
 8009de0:	0800a718 	.word	0x0800a718

08009de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df0:	f003 0301 	and.w	r3, r3, #1
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00a      	beq.n	8009e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e12:	f003 0302 	and.w	r3, r3, #2
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	430a      	orrs	r2, r1
 8009e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e34:	f003 0304 	and.w	r3, r3, #4
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00a      	beq.n	8009e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e56:	f003 0308 	and.w	r3, r3, #8
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00a      	beq.n	8009e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	430a      	orrs	r2, r1
 8009e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e78:	f003 0310 	and.w	r3, r3, #16
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00a      	beq.n	8009e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	430a      	orrs	r2, r1
 8009e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9a:	f003 0320 	and.w	r3, r3, #32
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00a      	beq.n	8009eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d01a      	beq.n	8009efa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	430a      	orrs	r2, r1
 8009ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ee2:	d10a      	bne.n	8009efa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00a      	beq.n	8009f1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	605a      	str	r2, [r3, #4]
  }
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af02      	add	r7, sp, #8
 8009f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f38:	f7f7 fd40 	bl	80019bc <HAL_GetTick>
 8009f3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f003 0308 	and.w	r3, r3, #8
 8009f48:	2b08      	cmp	r3, #8
 8009f4a:	d10e      	bne.n	8009f6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f82f 	bl	8009fbe <UART_WaitOnFlagUntilTimeout>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f66:	2303      	movs	r3, #3
 8009f68:	e025      	b.n	8009fb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0304 	and.w	r3, r3, #4
 8009f74:	2b04      	cmp	r3, #4
 8009f76:	d10e      	bne.n	8009f96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f819 	bl	8009fbe <UART_WaitOnFlagUntilTimeout>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e00f      	b.n	8009fb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2220      	movs	r2, #32
 8009f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b09c      	sub	sp, #112	; 0x70
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	60b9      	str	r1, [r7, #8]
 8009fc8:	603b      	str	r3, [r7, #0]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fce:	e0a9      	b.n	800a124 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd6:	f000 80a5 	beq.w	800a124 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fda:	f7f7 fcef 	bl	80019bc <HAL_GetTick>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d302      	bcc.n	8009ff0 <UART_WaitOnFlagUntilTimeout+0x32>
 8009fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d140      	bne.n	800a072 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ff8:	e853 3f00 	ldrex	r3, [r3]
 8009ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a000:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a004:	667b      	str	r3, [r7, #100]	; 0x64
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a00e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a010:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a012:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a014:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a016:	e841 2300 	strex	r3, r2, [r1]
 800a01a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a01c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1e6      	bne.n	8009ff0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3308      	adds	r3, #8
 800a028:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a034:	f023 0301 	bic.w	r3, r3, #1
 800a038:	663b      	str	r3, [r7, #96]	; 0x60
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	3308      	adds	r3, #8
 800a040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a042:	64ba      	str	r2, [r7, #72]	; 0x48
 800a044:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e5      	bne.n	800a022 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2220      	movs	r2, #32
 800a05a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2220      	movs	r2, #32
 800a062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a06e:	2303      	movs	r3, #3
 800a070:	e069      	b.n	800a146 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 0304 	and.w	r3, r3, #4
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d051      	beq.n	800a124 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	69db      	ldr	r3, [r3, #28]
 800a086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a08a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a08e:	d149      	bne.n	800a124 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a098:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	e853 3f00 	ldrex	r3, [r3]
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a0ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a0ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0c0:	e841 2300 	strex	r3, r2, [r1]
 800a0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1e6      	bne.n	800a09a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3308      	adds	r3, #8
 800a0d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	e853 3f00 	ldrex	r3, [r3]
 800a0da:	613b      	str	r3, [r7, #16]
   return(result);
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	f023 0301 	bic.w	r3, r3, #1
 800a0e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	3308      	adds	r3, #8
 800a0ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a0ec:	623a      	str	r2, [r7, #32]
 800a0ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f0:	69f9      	ldr	r1, [r7, #28]
 800a0f2:	6a3a      	ldr	r2, [r7, #32]
 800a0f4:	e841 2300 	strex	r3, r2, [r1]
 800a0f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1e5      	bne.n	800a0cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2220      	movs	r2, #32
 800a104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2220      	movs	r2, #32
 800a10c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2220      	movs	r2, #32
 800a114:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e010      	b.n	800a146 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	69da      	ldr	r2, [r3, #28]
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	4013      	ands	r3, r2
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	429a      	cmp	r2, r3
 800a132:	bf0c      	ite	eq
 800a134:	2301      	moveq	r3, #1
 800a136:	2300      	movne	r3, #0
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	461a      	mov	r2, r3
 800a13c:	79fb      	ldrb	r3, [r7, #7]
 800a13e:	429a      	cmp	r2, r3
 800a140:	f43f af46 	beq.w	8009fd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3770      	adds	r7, #112	; 0x70
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a14e:	b480      	push	{r7}
 800a150:	b085      	sub	sp, #20
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d101      	bne.n	800a164 <HAL_UARTEx_DisableFifoMode+0x16>
 800a160:	2302      	movs	r3, #2
 800a162:	e027      	b.n	800a1b4 <HAL_UARTEx_DisableFifoMode+0x66>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2224      	movs	r2, #36	; 0x24
 800a170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f022 0201 	bic.w	r2, r2, #1
 800a18a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a192:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2220      	movs	r2, #32
 800a1a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d101      	bne.n	800a1d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	e02d      	b.n	800a234 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2224      	movs	r2, #36	; 0x24
 800a1e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f022 0201 	bic.w	r2, r2, #1
 800a1fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	430a      	orrs	r2, r1
 800a212:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f84f 	bl	800a2b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2220      	movs	r2, #32
 800a226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d101      	bne.n	800a254 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a250:	2302      	movs	r3, #2
 800a252:	e02d      	b.n	800a2b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2224      	movs	r2, #36	; 0x24
 800a260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f022 0201 	bic.w	r2, r2, #1
 800a27a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	430a      	orrs	r2, r1
 800a28e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 f811 	bl	800a2b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2220      	movs	r2, #32
 800a2a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b085      	sub	sp, #20
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d108      	bne.n	800a2da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a2d8:	e031      	b.n	800a33e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a2da:	2310      	movs	r3, #16
 800a2dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a2de:	2310      	movs	r3, #16
 800a2e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	0e5b      	lsrs	r3, r3, #25
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	f003 0307 	and.w	r3, r3, #7
 800a2f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	0f5b      	lsrs	r3, r3, #29
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	f003 0307 	and.w	r3, r3, #7
 800a300:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a302:	7bbb      	ldrb	r3, [r7, #14]
 800a304:	7b3a      	ldrb	r2, [r7, #12]
 800a306:	4911      	ldr	r1, [pc, #68]	; (800a34c <UARTEx_SetNbDataToProcess+0x94>)
 800a308:	5c8a      	ldrb	r2, [r1, r2]
 800a30a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a30e:	7b3a      	ldrb	r2, [r7, #12]
 800a310:	490f      	ldr	r1, [pc, #60]	; (800a350 <UARTEx_SetNbDataToProcess+0x98>)
 800a312:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a314:	fb93 f3f2 	sdiv	r3, r3, r2
 800a318:	b29a      	uxth	r2, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a320:	7bfb      	ldrb	r3, [r7, #15]
 800a322:	7b7a      	ldrb	r2, [r7, #13]
 800a324:	4909      	ldr	r1, [pc, #36]	; (800a34c <UARTEx_SetNbDataToProcess+0x94>)
 800a326:	5c8a      	ldrb	r2, [r1, r2]
 800a328:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a32c:	7b7a      	ldrb	r2, [r7, #13]
 800a32e:	4908      	ldr	r1, [pc, #32]	; (800a350 <UARTEx_SetNbDataToProcess+0x98>)
 800a330:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a332:	fb93 f3f2 	sdiv	r3, r3, r2
 800a336:	b29a      	uxth	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a33e:	bf00      	nop
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	0800a730 	.word	0x0800a730
 800a350:	0800a738 	.word	0x0800a738

0800a354 <__errno>:
 800a354:	4b01      	ldr	r3, [pc, #4]	; (800a35c <__errno+0x8>)
 800a356:	6818      	ldr	r0, [r3, #0]
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	24000010 	.word	0x24000010

0800a360 <__libc_init_array>:
 800a360:	b570      	push	{r4, r5, r6, lr}
 800a362:	4d0d      	ldr	r5, [pc, #52]	; (800a398 <__libc_init_array+0x38>)
 800a364:	4c0d      	ldr	r4, [pc, #52]	; (800a39c <__libc_init_array+0x3c>)
 800a366:	1b64      	subs	r4, r4, r5
 800a368:	10a4      	asrs	r4, r4, #2
 800a36a:	2600      	movs	r6, #0
 800a36c:	42a6      	cmp	r6, r4
 800a36e:	d109      	bne.n	800a384 <__libc_init_array+0x24>
 800a370:	4d0b      	ldr	r5, [pc, #44]	; (800a3a0 <__libc_init_array+0x40>)
 800a372:	4c0c      	ldr	r4, [pc, #48]	; (800a3a4 <__libc_init_array+0x44>)
 800a374:	f000 f9b6 	bl	800a6e4 <_init>
 800a378:	1b64      	subs	r4, r4, r5
 800a37a:	10a4      	asrs	r4, r4, #2
 800a37c:	2600      	movs	r6, #0
 800a37e:	42a6      	cmp	r6, r4
 800a380:	d105      	bne.n	800a38e <__libc_init_array+0x2e>
 800a382:	bd70      	pop	{r4, r5, r6, pc}
 800a384:	f855 3b04 	ldr.w	r3, [r5], #4
 800a388:	4798      	blx	r3
 800a38a:	3601      	adds	r6, #1
 800a38c:	e7ee      	b.n	800a36c <__libc_init_array+0xc>
 800a38e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a392:	4798      	blx	r3
 800a394:	3601      	adds	r6, #1
 800a396:	e7f2      	b.n	800a37e <__libc_init_array+0x1e>
 800a398:	0800a888 	.word	0x0800a888
 800a39c:	0800a888 	.word	0x0800a888
 800a3a0:	0800a888 	.word	0x0800a888
 800a3a4:	0800a88c 	.word	0x0800a88c

0800a3a8 <malloc>:
 800a3a8:	4b02      	ldr	r3, [pc, #8]	; (800a3b4 <malloc+0xc>)
 800a3aa:	4601      	mov	r1, r0
 800a3ac:	6818      	ldr	r0, [r3, #0]
 800a3ae:	f000 b82b 	b.w	800a408 <_malloc_r>
 800a3b2:	bf00      	nop
 800a3b4:	24000010 	.word	0x24000010

0800a3b8 <memset>:
 800a3b8:	4402      	add	r2, r0
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d100      	bne.n	800a3c2 <memset+0xa>
 800a3c0:	4770      	bx	lr
 800a3c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a3c6:	e7f9      	b.n	800a3bc <memset+0x4>

0800a3c8 <sbrk_aligned>:
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	4e0e      	ldr	r6, [pc, #56]	; (800a404 <sbrk_aligned+0x3c>)
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	6831      	ldr	r1, [r6, #0]
 800a3d0:	4605      	mov	r5, r0
 800a3d2:	b911      	cbnz	r1, 800a3da <sbrk_aligned+0x12>
 800a3d4:	f000 f88c 	bl	800a4f0 <_sbrk_r>
 800a3d8:	6030      	str	r0, [r6, #0]
 800a3da:	4621      	mov	r1, r4
 800a3dc:	4628      	mov	r0, r5
 800a3de:	f000 f887 	bl	800a4f0 <_sbrk_r>
 800a3e2:	1c43      	adds	r3, r0, #1
 800a3e4:	d00a      	beq.n	800a3fc <sbrk_aligned+0x34>
 800a3e6:	1cc4      	adds	r4, r0, #3
 800a3e8:	f024 0403 	bic.w	r4, r4, #3
 800a3ec:	42a0      	cmp	r0, r4
 800a3ee:	d007      	beq.n	800a400 <sbrk_aligned+0x38>
 800a3f0:	1a21      	subs	r1, r4, r0
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f000 f87c 	bl	800a4f0 <_sbrk_r>
 800a3f8:	3001      	adds	r0, #1
 800a3fa:	d101      	bne.n	800a400 <sbrk_aligned+0x38>
 800a3fc:	f04f 34ff 	mov.w	r4, #4294967295
 800a400:	4620      	mov	r0, r4
 800a402:	bd70      	pop	{r4, r5, r6, pc}
 800a404:	2400071c 	.word	0x2400071c

0800a408 <_malloc_r>:
 800a408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a40c:	1ccd      	adds	r5, r1, #3
 800a40e:	f025 0503 	bic.w	r5, r5, #3
 800a412:	3508      	adds	r5, #8
 800a414:	2d0c      	cmp	r5, #12
 800a416:	bf38      	it	cc
 800a418:	250c      	movcc	r5, #12
 800a41a:	2d00      	cmp	r5, #0
 800a41c:	4607      	mov	r7, r0
 800a41e:	db01      	blt.n	800a424 <_malloc_r+0x1c>
 800a420:	42a9      	cmp	r1, r5
 800a422:	d905      	bls.n	800a430 <_malloc_r+0x28>
 800a424:	230c      	movs	r3, #12
 800a426:	603b      	str	r3, [r7, #0]
 800a428:	2600      	movs	r6, #0
 800a42a:	4630      	mov	r0, r6
 800a42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a430:	4e2e      	ldr	r6, [pc, #184]	; (800a4ec <_malloc_r+0xe4>)
 800a432:	f000 f86d 	bl	800a510 <__malloc_lock>
 800a436:	6833      	ldr	r3, [r6, #0]
 800a438:	461c      	mov	r4, r3
 800a43a:	bb34      	cbnz	r4, 800a48a <_malloc_r+0x82>
 800a43c:	4629      	mov	r1, r5
 800a43e:	4638      	mov	r0, r7
 800a440:	f7ff ffc2 	bl	800a3c8 <sbrk_aligned>
 800a444:	1c43      	adds	r3, r0, #1
 800a446:	4604      	mov	r4, r0
 800a448:	d14d      	bne.n	800a4e6 <_malloc_r+0xde>
 800a44a:	6834      	ldr	r4, [r6, #0]
 800a44c:	4626      	mov	r6, r4
 800a44e:	2e00      	cmp	r6, #0
 800a450:	d140      	bne.n	800a4d4 <_malloc_r+0xcc>
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	4631      	mov	r1, r6
 800a456:	4638      	mov	r0, r7
 800a458:	eb04 0803 	add.w	r8, r4, r3
 800a45c:	f000 f848 	bl	800a4f0 <_sbrk_r>
 800a460:	4580      	cmp	r8, r0
 800a462:	d13a      	bne.n	800a4da <_malloc_r+0xd2>
 800a464:	6821      	ldr	r1, [r4, #0]
 800a466:	3503      	adds	r5, #3
 800a468:	1a6d      	subs	r5, r5, r1
 800a46a:	f025 0503 	bic.w	r5, r5, #3
 800a46e:	3508      	adds	r5, #8
 800a470:	2d0c      	cmp	r5, #12
 800a472:	bf38      	it	cc
 800a474:	250c      	movcc	r5, #12
 800a476:	4629      	mov	r1, r5
 800a478:	4638      	mov	r0, r7
 800a47a:	f7ff ffa5 	bl	800a3c8 <sbrk_aligned>
 800a47e:	3001      	adds	r0, #1
 800a480:	d02b      	beq.n	800a4da <_malloc_r+0xd2>
 800a482:	6823      	ldr	r3, [r4, #0]
 800a484:	442b      	add	r3, r5
 800a486:	6023      	str	r3, [r4, #0]
 800a488:	e00e      	b.n	800a4a8 <_malloc_r+0xa0>
 800a48a:	6822      	ldr	r2, [r4, #0]
 800a48c:	1b52      	subs	r2, r2, r5
 800a48e:	d41e      	bmi.n	800a4ce <_malloc_r+0xc6>
 800a490:	2a0b      	cmp	r2, #11
 800a492:	d916      	bls.n	800a4c2 <_malloc_r+0xba>
 800a494:	1961      	adds	r1, r4, r5
 800a496:	42a3      	cmp	r3, r4
 800a498:	6025      	str	r5, [r4, #0]
 800a49a:	bf18      	it	ne
 800a49c:	6059      	strne	r1, [r3, #4]
 800a49e:	6863      	ldr	r3, [r4, #4]
 800a4a0:	bf08      	it	eq
 800a4a2:	6031      	streq	r1, [r6, #0]
 800a4a4:	5162      	str	r2, [r4, r5]
 800a4a6:	604b      	str	r3, [r1, #4]
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	f104 060b 	add.w	r6, r4, #11
 800a4ae:	f000 f835 	bl	800a51c <__malloc_unlock>
 800a4b2:	f026 0607 	bic.w	r6, r6, #7
 800a4b6:	1d23      	adds	r3, r4, #4
 800a4b8:	1af2      	subs	r2, r6, r3
 800a4ba:	d0b6      	beq.n	800a42a <_malloc_r+0x22>
 800a4bc:	1b9b      	subs	r3, r3, r6
 800a4be:	50a3      	str	r3, [r4, r2]
 800a4c0:	e7b3      	b.n	800a42a <_malloc_r+0x22>
 800a4c2:	6862      	ldr	r2, [r4, #4]
 800a4c4:	42a3      	cmp	r3, r4
 800a4c6:	bf0c      	ite	eq
 800a4c8:	6032      	streq	r2, [r6, #0]
 800a4ca:	605a      	strne	r2, [r3, #4]
 800a4cc:	e7ec      	b.n	800a4a8 <_malloc_r+0xa0>
 800a4ce:	4623      	mov	r3, r4
 800a4d0:	6864      	ldr	r4, [r4, #4]
 800a4d2:	e7b2      	b.n	800a43a <_malloc_r+0x32>
 800a4d4:	4634      	mov	r4, r6
 800a4d6:	6876      	ldr	r6, [r6, #4]
 800a4d8:	e7b9      	b.n	800a44e <_malloc_r+0x46>
 800a4da:	230c      	movs	r3, #12
 800a4dc:	603b      	str	r3, [r7, #0]
 800a4de:	4638      	mov	r0, r7
 800a4e0:	f000 f81c 	bl	800a51c <__malloc_unlock>
 800a4e4:	e7a1      	b.n	800a42a <_malloc_r+0x22>
 800a4e6:	6025      	str	r5, [r4, #0]
 800a4e8:	e7de      	b.n	800a4a8 <_malloc_r+0xa0>
 800a4ea:	bf00      	nop
 800a4ec:	24000718 	.word	0x24000718

0800a4f0 <_sbrk_r>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	4d06      	ldr	r5, [pc, #24]	; (800a50c <_sbrk_r+0x1c>)
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	4608      	mov	r0, r1
 800a4fa:	602b      	str	r3, [r5, #0]
 800a4fc:	f7f6 ffee 	bl	80014dc <_sbrk>
 800a500:	1c43      	adds	r3, r0, #1
 800a502:	d102      	bne.n	800a50a <_sbrk_r+0x1a>
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	b103      	cbz	r3, 800a50a <_sbrk_r+0x1a>
 800a508:	6023      	str	r3, [r4, #0]
 800a50a:	bd38      	pop	{r3, r4, r5, pc}
 800a50c:	24000720 	.word	0x24000720

0800a510 <__malloc_lock>:
 800a510:	4801      	ldr	r0, [pc, #4]	; (800a518 <__malloc_lock+0x8>)
 800a512:	f000 b809 	b.w	800a528 <__retarget_lock_acquire_recursive>
 800a516:	bf00      	nop
 800a518:	24000724 	.word	0x24000724

0800a51c <__malloc_unlock>:
 800a51c:	4801      	ldr	r0, [pc, #4]	; (800a524 <__malloc_unlock+0x8>)
 800a51e:	f000 b804 	b.w	800a52a <__retarget_lock_release_recursive>
 800a522:	bf00      	nop
 800a524:	24000724 	.word	0x24000724

0800a528 <__retarget_lock_acquire_recursive>:
 800a528:	4770      	bx	lr

0800a52a <__retarget_lock_release_recursive>:
 800a52a:	4770      	bx	lr

0800a52c <sinf_poly>:
 800a52c:	07cb      	lsls	r3, r1, #31
 800a52e:	d412      	bmi.n	800a556 <sinf_poly+0x2a>
 800a530:	ee21 5b00 	vmul.f64	d5, d1, d0
 800a534:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 800a538:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800a53c:	eea6 7b01 	vfma.f64	d7, d6, d1
 800a540:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 800a544:	ee21 1b05 	vmul.f64	d1, d1, d5
 800a548:	eea6 0b05 	vfma.f64	d0, d6, d5
 800a54c:	eea7 0b01 	vfma.f64	d0, d7, d1
 800a550:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a554:	4770      	bx	lr
 800a556:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 800a55a:	ee21 5b01 	vmul.f64	d5, d1, d1
 800a55e:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800a562:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800a566:	eea1 7b06 	vfma.f64	d7, d1, d6
 800a56a:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 800a56e:	eea1 0b06 	vfma.f64	d0, d1, d6
 800a572:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 800a576:	ee21 1b05 	vmul.f64	d1, d1, d5
 800a57a:	eea5 0b06 	vfma.f64	d0, d5, d6
 800a57e:	e7e5      	b.n	800a54c <sinf_poly+0x20>

0800a580 <sinf>:
 800a580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a582:	ee10 4a10 	vmov	r4, s0
 800a586:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a58a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800a58e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800a592:	eef0 7a40 	vmov.f32	s15, s0
 800a596:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800a59a:	d218      	bcs.n	800a5ce <sinf+0x4e>
 800a59c:	ee26 1b06 	vmul.f64	d1, d6, d6
 800a5a0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800a5a4:	d20a      	bcs.n	800a5bc <sinf+0x3c>
 800a5a6:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800a5aa:	d103      	bne.n	800a5b4 <sinf+0x34>
 800a5ac:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800a5b0:	ed8d 1a01 	vstr	s2, [sp, #4]
 800a5b4:	eeb0 0a67 	vmov.f32	s0, s15
 800a5b8:	b003      	add	sp, #12
 800a5ba:	bd30      	pop	{r4, r5, pc}
 800a5bc:	483a      	ldr	r0, [pc, #232]	; (800a6a8 <sinf+0x128>)
 800a5be:	eeb0 0b46 	vmov.f64	d0, d6
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	b003      	add	sp, #12
 800a5c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5ca:	f7ff bfaf 	b.w	800a52c <sinf_poly>
 800a5ce:	f240 422e 	movw	r2, #1070	; 0x42e
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d824      	bhi.n	800a620 <sinf+0xa0>
 800a5d6:	4b34      	ldr	r3, [pc, #208]	; (800a6a8 <sinf+0x128>)
 800a5d8:	ed93 7b08 	vldr	d7, [r3, #32]
 800a5dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a5e0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a5e4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800a5e8:	ee17 1a90 	vmov	r1, s15
 800a5ec:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800a5f0:	1609      	asrs	r1, r1, #24
 800a5f2:	ee07 1a90 	vmov	s15, r1
 800a5f6:	f001 0203 	and.w	r2, r1, #3
 800a5fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800a5fe:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a602:	ed92 0b00 	vldr	d0, [r2]
 800a606:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800a60a:	f011 0f02 	tst.w	r1, #2
 800a60e:	eea5 6b47 	vfms.f64	d6, d5, d7
 800a612:	bf08      	it	eq
 800a614:	4618      	moveq	r0, r3
 800a616:	ee26 1b06 	vmul.f64	d1, d6, d6
 800a61a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800a61e:	e7d1      	b.n	800a5c4 <sinf+0x44>
 800a620:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800a624:	d237      	bcs.n	800a696 <sinf+0x116>
 800a626:	4a21      	ldr	r2, [pc, #132]	; (800a6ac <sinf+0x12c>)
 800a628:	f3c4 6183 	ubfx	r1, r4, #26, #4
 800a62c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800a630:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800a634:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800a638:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a63c:	4083      	lsls	r3, r0
 800a63e:	6a28      	ldr	r0, [r5, #32]
 800a640:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a644:	fba3 1000 	umull	r1, r0, r3, r0
 800a648:	6929      	ldr	r1, [r5, #16]
 800a64a:	435a      	muls	r2, r3
 800a64c:	fbe3 0201 	umlal	r0, r2, r3, r1
 800a650:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 800a654:	0f8d      	lsrs	r5, r1, #30
 800a656:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 800a65a:	1a51      	subs	r1, r2, r1
 800a65c:	f7f5 ffd6 	bl	800060c <__aeabi_l2d>
 800a660:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800a664:	4b10      	ldr	r3, [pc, #64]	; (800a6a8 <sinf+0x128>)
 800a666:	f004 0203 	and.w	r2, r4, #3
 800a66a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800a66e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800a6a0 <sinf+0x120>
 800a672:	ed92 0b00 	vldr	d0, [r2]
 800a676:	ec41 0b16 	vmov	d6, r0, r1
 800a67a:	f014 0f02 	tst.w	r4, #2
 800a67e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a682:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800a686:	4629      	mov	r1, r5
 800a688:	bf08      	it	eq
 800a68a:	4618      	moveq	r0, r3
 800a68c:	ee27 1b07 	vmul.f64	d1, d7, d7
 800a690:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a694:	e796      	b.n	800a5c4 <sinf+0x44>
 800a696:	b003      	add	sp, #12
 800a698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a69c:	f000 b813 	b.w	800a6c6 <__math_invalidf>
 800a6a0:	54442d18 	.word	0x54442d18
 800a6a4:	3c1921fb 	.word	0x3c1921fb
 800a6a8:	0800a7a0 	.word	0x0800a7a0
 800a6ac:	0800a740 	.word	0x0800a740

0800a6b0 <with_errnof>:
 800a6b0:	b513      	push	{r0, r1, r4, lr}
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a6b8:	f7ff fe4c 	bl	800a354 <__errno>
 800a6bc:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a6c0:	6004      	str	r4, [r0, #0]
 800a6c2:	b002      	add	sp, #8
 800a6c4:	bd10      	pop	{r4, pc}

0800a6c6 <__math_invalidf>:
 800a6c6:	eef0 7a40 	vmov.f32	s15, s0
 800a6ca:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a6ce:	eef4 7a67 	vcmp.f32	s15, s15
 800a6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d6:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800a6da:	d602      	bvs.n	800a6e2 <__math_invalidf+0x1c>
 800a6dc:	2021      	movs	r0, #33	; 0x21
 800a6de:	f7ff bfe7 	b.w	800a6b0 <with_errnof>
 800a6e2:	4770      	bx	lr

0800a6e4 <_init>:
 800a6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e6:	bf00      	nop
 800a6e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ea:	bc08      	pop	{r3}
 800a6ec:	469e      	mov	lr, r3
 800a6ee:	4770      	bx	lr

0800a6f0 <_fini>:
 800a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f2:	bf00      	nop
 800a6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6f6:	bc08      	pop	{r3}
 800a6f8:	469e      	mov	lr, r3
 800a6fa:	4770      	bx	lr
